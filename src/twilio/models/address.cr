#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Twilio
  class Address
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The SID of the Account that is responsible for the resource
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_SID = 34
    MIN_LENGTH_FOR_ACCOUNT_SID = 34
    PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The city in which the address is located
    @[JSON::Field(key: "city", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String? = nil

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # The name associated with the address
    @[JSON::Field(key: "customer_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_name.nil? && !customer_name_present?)]
    getter customer_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_name_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # Whether emergency calling has been enabled on this number
    @[JSON::Field(key: "emergency_enabled", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: emergency_enabled.nil? && !emergency_enabled_present?)]
    getter emergency_enabled : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? emergency_enabled_present : Bool = false

    # The string that you assigned to describe the resource
    @[JSON::Field(key: "friendly_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: friendly_name.nil? && !friendly_name_present?)]
    getter friendly_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? friendly_name_present : Bool = false

    # The ISO country code of the address
    @[JSON::Field(key: "iso_country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iso_country.nil? && !iso_country_present?)]
    getter iso_country : String? = nil

    @[JSON::Field(ignore: true)]
    property? iso_country_present : Bool = false

    # The postal code of the address
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: postal_code.nil? && !postal_code_present?)]
    getter postal_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? postal_code_present : Bool = false

    # The state or region of the address
    @[JSON::Field(key: "region", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: region.nil? && !region_present?)]
    getter region : String? = nil

    @[JSON::Field(ignore: true)]
    property? region_present : Bool = false

    # The unique string that identifies the resource
    @[JSON::Field(key: "sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String? = nil
    MAX_LENGTH_FOR_SID = 34
    MIN_LENGTH_FOR_SID = 34
    PATTERN_FOR_SID    = /^AD[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    # The number and street address of the address
    @[JSON::Field(key: "street", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: street.nil? && !street_present?)]
    getter street : String? = nil

    @[JSON::Field(ignore: true)]
    property? street_present : Bool = false

    # The additional number and street address of the address
    @[JSON::Field(key: "street_secondary", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: street_secondary.nil? && !street_secondary_present?)]
    getter street_secondary : String? = nil

    @[JSON::Field(ignore: true)]
    property? street_secondary_present : Bool = false

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    getter uri : String? = nil

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Whether the address has been validated to comply with local regulation
    @[JSON::Field(key: "validated", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: validated.nil? && !validated_present?)]
    getter validated : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? validated_present : Bool = false

    # Whether the address has been verified to comply with regulation
    @[JSON::Field(key: "verified", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified.nil? && !verified_present?)]
    getter verified : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? verified_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @city : String? = nil,
      @customer_name : String? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @emergency_enabled : Bool? = nil,
      @friendly_name : String? = nil,
      @iso_country : String? = nil,
      @postal_code : String? = nil,
      @region : String? = nil,
      @sid : String? = nil,
      @street : String? = nil,
      @street_secondary : String? = nil,
      @uri : String? = nil,
      @validated : Bool? = nil,
      @verified : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_sid = @account_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
          invalid_properties.push(pattern_error)
        end
      end

      unless (_sid = @sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("sid", _sid.to_s.size, MAX_LENGTH_FOR_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("sid", _sid.to_s.size, MIN_LENGTH_FOR_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("sid", _sid, PATTERN_FOR_SID)
          invalid_properties.push(pattern_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_sid = @account_sid).nil?
        return false if _account_sid.to_s.size > MAX_LENGTH_FOR_ACCOUNT_SID
        return false if _account_sid.to_s.size < MIN_LENGTH_FOR_ACCOUNT_SID
        return false if !PATTERN_FOR_ACCOUNT_SID.matches?(_account_sid)
      end

      unless (_sid = @sid).nil?
        return false if _sid.to_s.size > MAX_LENGTH_FOR_SID
        return false if _sid.to_s.size < MIN_LENGTH_FOR_SID
        return false if !PATTERN_FOR_SID.matches?(_sid)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_sid", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
        OpenApi::PrimitiveValidator.validate_min_length("account_sid", new_value.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
        OpenApi::PrimitiveValidator.validate_pattern("account_sid", new_value, PATTERN_FOR_ACCOUNT_SID)
      end

      @account_sid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_name Object to be assigned
    def customer_name=(new_value : String?)
      @customer_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(new_value : Time?)
      @date_created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(new_value : Time?)
      @date_updated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] emergency_enabled Object to be assigned
    def emergency_enabled=(new_value : Bool?)
      @emergency_enabled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] friendly_name Object to be assigned
    def friendly_name=(new_value : String?)
      @friendly_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_country Object to be assigned
    def iso_country=(new_value : String?)
      @iso_country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(new_value : String?)
      @region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sid Object to be assigned
    def sid=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("sid", new_value.to_s.size, MAX_LENGTH_FOR_SID)
        OpenApi::PrimitiveValidator.validate_min_length("sid", new_value.to_s.size, MIN_LENGTH_FOR_SID)
        OpenApi::PrimitiveValidator.validate_pattern("sid", new_value, PATTERN_FOR_SID)
      end

      @sid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] street Object to be assigned
    def street=(new_value : String?)
      @street = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] street_secondary Object to be assigned
    def street_secondary=(new_value : String?)
      @street_secondary = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uri Object to be assigned
    def uri=(new_value : String?)
      @uri = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validated Object to be assigned
    def validated=(new_value : Bool?)
      @validated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified Object to be assigned
    def verified=(new_value : Bool?)
      @verified = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @city, @city_present, @customer_name, @customer_name_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @emergency_enabled, @emergency_enabled_present, @friendly_name, @friendly_name_present, @iso_country, @iso_country_present, @postal_code, @postal_code_present, @region, @region_present, @sid, @sid_present, @street, @street_present, @street_secondary, @street_secondary_present, @uri, @uri_present, @validated, @validated_present, @verified, @verified_present)
  end
end
