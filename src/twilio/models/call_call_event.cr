#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class CallCallEvent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "request", type: CallCallEventRequest?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: request.nil? && !request_present?)]
    getter request : CallCallEventRequest? = nil

    @[JSON::Field(ignore: true)]
    property? request_present : Bool = false

    @[JSON::Field(key: "response", type: CallCallEventResponse?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: response.nil? && !response_present?)]
    getter response : CallCallEventResponse? = nil

    @[JSON::Field(ignore: true)]
    property? response_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @request : CallCallEventRequest? = nil,
      @response : CallCallEventResponse? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request Object to be assigned
    def request=(request : CallCallEventRequest?)
      if request.nil?
        return @request = nil
      end
      @request = request
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response Object to be assigned
    def response=(response : CallCallEventResponse?)
      if response.nil?
        return @response = nil
      end
      @response = response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@request, @request_present, @response, @response_present)
  end
end
