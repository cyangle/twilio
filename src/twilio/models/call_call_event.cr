#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CallCallEvent
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "request", type: CallCallEventRequest?, presence: true, ignore_serialize: request.nil? && !request_present?)]
    property request : CallCallEventRequest?

    @[JSON::Field(ignore: true)]
    property? request_present : Bool = false

    @[JSON::Field(key: "response", type: CallCallEventResponse?, presence: true, ignore_serialize: response.nil? && !response_present?)]
    property response : CallCallEventResponse?

    @[JSON::Field(ignore: true)]
    property? response_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @request : CallCallEventRequest? = nil, @response : CallCallEventResponse? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        request == o.request &&
        response == o.response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [request, response].hash
    end
  end
end
