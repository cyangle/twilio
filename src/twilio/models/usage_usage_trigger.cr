#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class UsageUsageTrigger
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The SID of the Account that this trigger monitors
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_SID = 34
    MIN_LENGTH_FOR_ACCOUNT_SID = 34
    PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The API version used to create the resource
    @[JSON::Field(key: "api_version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: api_version.nil? && !api_version_present?)]
    getter api_version : String? = nil

    @[JSON::Field(ignore: true)]
    property? api_version_present : Bool = false

    @[JSON::Field(key: "callback_method", type: Twilio::HttpMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: callback_method.nil? && !callback_method_present?)]
    getter callback_method : Twilio::HttpMethod? = nil

    @[JSON::Field(ignore: true)]
    property? callback_method_present : Bool = false

    # he URL we call when the trigger fires
    @[JSON::Field(key: "callback_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: callback_url.nil? && !callback_url_present?)]
    getter callback_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? callback_url_present : Bool = false

    # The current value of the field the trigger is watching
    @[JSON::Field(key: "current_value", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: current_value.nil? && !current_value_present?)]
    getter current_value : String? = nil

    @[JSON::Field(ignore: true)]
    property? current_value_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the trigger was last fired
    @[JSON::Field(key: "date_fired", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_fired.nil? && !date_fired_present?, converter: Time::RFC2822Converter)]
    getter date_fired : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_fired_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # The string that you assigned to describe the trigger
    @[JSON::Field(key: "friendly_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: friendly_name.nil? && !friendly_name_present?)]
    getter friendly_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? friendly_name_present : Bool = false

    @[JSON::Field(key: "recurring", type: Twilio::UsageTriggerEnumRecurring?, default: nil, required: false, nullable: false, emit_null: false)]
    getter recurring : Twilio::UsageTriggerEnumRecurring? = nil

    # The unique string that identifies the resource
    @[JSON::Field(key: "sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String? = nil
    MAX_LENGTH_FOR_SID = 34
    MIN_LENGTH_FOR_SID = 34
    PATTERN_FOR_SID    = /^UT[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    @[JSON::Field(key: "trigger_by", type: Twilio::UsageTriggerEnumTriggerField?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil

    # The value at which the trigger will fire
    @[JSON::Field(key: "trigger_value", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: trigger_value.nil? && !trigger_value_present?)]
    getter trigger_value : String? = nil

    @[JSON::Field(ignore: true)]
    property? trigger_value_present : Bool = false

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    getter uri : String? = nil

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    @[JSON::Field(key: "usage_category", type: Twilio::UsageRecordEnumCategory?, default: nil, required: false, nullable: false, emit_null: false)]
    getter usage_category : Twilio::UsageRecordEnumCategory? = nil

    # The URI of the UsageRecord resource this trigger watches
    @[JSON::Field(key: "usage_record_uri", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: usage_record_uri.nil? && !usage_record_uri_present?)]
    getter usage_record_uri : String? = nil

    @[JSON::Field(ignore: true)]
    property? usage_record_uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @api_version : String? = nil,
      @callback_method : Twilio::HttpMethod? = nil,
      @callback_url : String? = nil,
      @current_value : String? = nil,
      @date_created : Time? = nil,
      @date_fired : Time? = nil,
      @date_updated : Time? = nil,
      @friendly_name : String? = nil,
      @recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      @sid : String? = nil,
      @trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      @trigger_value : String? = nil,
      @uri : String? = nil,
      @usage_category : Twilio::UsageRecordEnumCategory? = nil,
      @usage_record_uri : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_sid = @account_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_api_version = @api_version).nil?
      end
      unless (_callback_method = @callback_method).nil?
        invalid_properties.push(_callback_method.error_message) if !_callback_method.valid?
      end
      unless (_callback_url = @callback_url).nil?
      end
      unless (_current_value = @current_value).nil?
      end
      unless (_date_created = @date_created).nil?
      end
      unless (_date_fired = @date_fired).nil?
      end
      unless (_date_updated = @date_updated).nil?
      end
      unless (_friendly_name = @friendly_name).nil?
      end
      unless (_recurring = @recurring).nil?
        invalid_properties.push(_recurring.error_message) if !_recurring.valid?
      end
      unless (_sid = @sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("sid", _sid.to_s.size, MAX_LENGTH_FOR_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("sid", _sid.to_s.size, MIN_LENGTH_FOR_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("sid", _sid, PATTERN_FOR_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_trigger_by = @trigger_by).nil?
        invalid_properties.push(_trigger_by.error_message) if !_trigger_by.valid?
      end
      unless (_trigger_value = @trigger_value).nil?
      end
      unless (_uri = @uri).nil?
      end
      unless (_usage_category = @usage_category).nil?
        invalid_properties.push(_usage_category.error_message) if !_usage_category.valid?
      end
      unless (_usage_record_uri = @usage_record_uri).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_sid = @account_sid).nil?
        return false if _account_sid.to_s.size > MAX_LENGTH_FOR_ACCOUNT_SID
        return false if _account_sid.to_s.size < MIN_LENGTH_FOR_ACCOUNT_SID
        return false if !PATTERN_FOR_ACCOUNT_SID.matches?(_account_sid)
      end

      unless (_api_version = @api_version).nil?
      end

      unless (_callback_method = @callback_method).nil?
        return false if !_callback_method.valid?
      end

      unless (_callback_url = @callback_url).nil?
      end

      unless (_current_value = @current_value).nil?
      end

      unless (_date_created = @date_created).nil?
      end

      unless (_date_fired = @date_fired).nil?
      end

      unless (_date_updated = @date_updated).nil?
      end

      unless (_friendly_name = @friendly_name).nil?
      end

      unless (_recurring = @recurring).nil?
        return false if !_recurring.valid?
      end

      unless (_sid = @sid).nil?
        return false if _sid.to_s.size > MAX_LENGTH_FOR_SID
        return false if _sid.to_s.size < MIN_LENGTH_FOR_SID
        return false if !PATTERN_FOR_SID.matches?(_sid)
      end

      unless (_trigger_by = @trigger_by).nil?
        return false if !_trigger_by.valid?
      end

      unless (_trigger_value = @trigger_value).nil?
      end

      unless (_uri = @uri).nil?
      end

      unless (_usage_category = @usage_category).nil?
        return false if !_usage_category.valid?
      end

      unless (_usage_record_uri = @usage_record_uri).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_min_length("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
      @account_sid = _account_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] api_version Object to be assigned
    def api_version=(api_version : String?)
      if api_version.nil?
        return @api_version = nil
      end
      _api_version = api_version.not_nil!
      @api_version = _api_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] callback_method Object to be assigned
    def callback_method=(callback_method : Twilio::HttpMethod?)
      if callback_method.nil?
        return @callback_method = nil
      end
      _callback_method = callback_method.not_nil!
      _callback_method.validate
      @callback_method = _callback_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] callback_url Object to be assigned
    def callback_url=(callback_url : String?)
      if callback_url.nil?
        return @callback_url = nil
      end
      _callback_url = callback_url.not_nil!
      @callback_url = _callback_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_value Object to be assigned
    def current_value=(current_value : String?)
      if current_value.nil?
        return @current_value = nil
      end
      _current_value = current_value.not_nil!
      @current_value = _current_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      _date_created = date_created.not_nil!
      @date_created = _date_created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_fired Object to be assigned
    def date_fired=(date_fired : Time?)
      if date_fired.nil?
        return @date_fired = nil
      end
      _date_fired = date_fired.not_nil!
      @date_fired = _date_fired
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      _date_updated = date_updated.not_nil!
      @date_updated = _date_updated
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] friendly_name Object to be assigned
    def friendly_name=(friendly_name : String?)
      if friendly_name.nil?
        return @friendly_name = nil
      end
      _friendly_name = friendly_name.not_nil!
      @friendly_name = _friendly_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurring Object to be assigned
    def recurring=(recurring : Twilio::UsageTriggerEnumRecurring?)
      if recurring.nil?
        return @recurring = nil
      end
      _recurring = recurring.not_nil!
      _recurring.validate
      @recurring = _recurring
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sid Object to be assigned
    def sid=(sid : String?)
      if sid.nil?
        return @sid = nil
      end
      _sid = sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("sid", _sid.to_s.size, MAX_LENGTH_FOR_SID)
      OpenApi::PrimitiveValidator.validate_min_length("sid", _sid.to_s.size, MIN_LENGTH_FOR_SID)
      OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, PATTERN_FOR_SID)
      @sid = _sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trigger_by Object to be assigned
    def trigger_by=(trigger_by : Twilio::UsageTriggerEnumTriggerField?)
      if trigger_by.nil?
        return @trigger_by = nil
      end
      _trigger_by = trigger_by.not_nil!
      _trigger_by.validate
      @trigger_by = _trigger_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trigger_value Object to be assigned
    def trigger_value=(trigger_value : String?)
      if trigger_value.nil?
        return @trigger_value = nil
      end
      _trigger_value = trigger_value.not_nil!
      @trigger_value = _trigger_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uri Object to be assigned
    def uri=(uri : String?)
      if uri.nil?
        return @uri = nil
      end
      _uri = uri.not_nil!
      @uri = _uri
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage_category Object to be assigned
    def usage_category=(usage_category : Twilio::UsageRecordEnumCategory?)
      if usage_category.nil?
        return @usage_category = nil
      end
      _usage_category = usage_category.not_nil!
      _usage_category.validate
      @usage_category = _usage_category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage_record_uri Object to be assigned
    def usage_record_uri=(usage_record_uri : String?)
      if usage_record_uri.nil?
        return @usage_record_uri = nil
      end
      _usage_record_uri = usage_record_uri.not_nil!
      @usage_record_uri = _usage_record_uri
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @api_version, @api_version_present, @callback_method, @callback_method_present, @callback_url, @callback_url_present, @current_value, @current_value_present, @date_created, @date_created_present, @date_fired, @date_fired_present, @date_updated, @date_updated_present, @friendly_name, @friendly_name_present, @recurring, @sid, @sid_present, @trigger_by, @trigger_value, @trigger_value_present, @uri, @uri_present, @usage_category, @usage_record_uri, @usage_record_uri_present)
  end
end
