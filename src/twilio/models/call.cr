#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Twilio
  class Call
    include NASON::Serializable

    # Optional properties
    # The SID of the Account that created this resource
    @[NASON::Field(key: "account_sid", type: String? | Null, nillable: true)]
    property account_sid : String? | Null

    # Either `human` or `machine` if this call was initiated with answering machine detection. Empty otherwise.
    @[NASON::Field(key: "answered_by", type: String? | Null, nillable: true)]
    property answered_by : String? | Null

    # The API Version used to create the call
    @[NASON::Field(key: "api_version", type: String? | Null, nillable: true)]
    property api_version : String? | Null

    # The caller's name if this call was an incoming call to a phone number with caller ID Lookup enabled. Otherwise, empty.
    @[NASON::Field(key: "caller_name", type: String? | Null, nillable: true)]
    property caller_name : String? | Null

    # The RFC 2822 date and time in GMT that this resource was created
    @[NASON::Field(key: "date_created", type: Time? | Null, converter: Time::RFC2822Converter, nillable: true)]
    property date_created : Time? | Null

    # The RFC 2822 date and time in GMT that this resource was last updated
    @[NASON::Field(key: "date_updated", type: Time? | Null, converter: Time::RFC2822Converter, nillable: true)]
    property date_updated : Time? | Null

    # A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
    @[NASON::Field(key: "direction", type: String? | Null, nillable: true)]
    property direction : String? | Null

    # The length of the call in seconds.
    @[NASON::Field(key: "duration", type: String? | Null, nillable: true)]
    property duration : String? | Null

    # The end time of the call. Null if the call did not complete successfully.
    @[NASON::Field(key: "end_time", type: Time? | Null, converter: Time::RFC2822Converter, nillable: true)]
    property end_time : Time? | Null

    # The forwarding phone number if this call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Otherwise, empty.
    @[NASON::Field(key: "forwarded_from", type: String? | Null, nillable: true)]
    property forwarded_from : String? | Null

    # The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
    @[NASON::Field(key: "from", type: String? | Null, nillable: true)]
    property from : String? | Null

    # The calling phone number, SIP address, or Client identifier formatted for display.
    @[NASON::Field(key: "from_formatted", type: String? | Null, nillable: true)]
    property from_formatted : String? | Null

    # The Group SID associated with this call. If no Group is associated with the call, the field is empty.
    @[NASON::Field(key: "group_sid", type: String? | Null, nillable: true)]
    property group_sid : String? | Null

    # The SID that identifies the call that created this leg.
    @[NASON::Field(key: "parent_call_sid", type: String? | Null, nillable: true)]
    property parent_call_sid : String? | Null

    # If the call was inbound, this is the SID of the IncomingPhoneNumber resource that received the call. If the call was outbound, it is the SID of the OutgoingCallerId resource from which the call was placed.
    @[NASON::Field(key: "phone_number_sid", type: String? | Null, nillable: true)]
    property phone_number_sid : String? | Null

    # The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
    @[NASON::Field(key: "price", type: String? | Null, nillable: true)]
    property price : String? | Null

    # The currency in which `Price` is measured.
    @[NASON::Field(key: "price_unit", type: String? | Null, nillable: true)]
    property price_unit : String? | Null

    # The wait time in milliseconds before the call is placed.
    @[NASON::Field(key: "queue_time", type: String? | Null, nillable: true)]
    property queue_time : String? | Null

    # The unique string that identifies this resource
    @[NASON::Field(key: "sid", type: String? | Null, nillable: true)]
    property sid : String? | Null

    # The start time of the call. Null if the call has not yet been dialed.
    @[NASON::Field(key: "start_time", type: Time? | Null, converter: Time::RFC2822Converter, nillable: true)]
    property start_time : Time? | Null

    # The status of this call.
    @[NASON::Field(key: "status", type: String? | Null, nillable: true)]
    property status : String? | Null

    # Account Instance Subresources
    @[NASON::Field(key: "subresource_uris", type: Hash(String, String)? | Null, nillable: true)]
    property subresource_uris : Hash(String, String)? | Null

    # The phone number, SIP address or Client identifier that received this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
    @[NASON::Field(key: "to", type: String? | Null, nillable: true)]
    property to : String? | Null

    # The phone number, SIP address or Client identifier that received this call. Formatted for display.
    @[NASON::Field(key: "to_formatted", type: String? | Null, nillable: true)]
    property to_formatted : String? | Null

    # The (optional) unique identifier of the trunk resource that was used for this call.
    @[NASON::Field(key: "trunk_sid", type: String? | Null, nillable: true)]
    property trunk_sid : String? | Null

    # The URI of this resource, relative to `https://api.twilio.com`
    @[NASON::Field(key: "uri", type: String? | Null, nillable: true)]
    property uri : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int32 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @account_sid : String? | Null = nil, @answered_by : String? | Null = nil, @api_version : String? | Null = nil, @caller_name : String? | Null = nil, @date_created : Time? | Null = nil, @date_updated : Time? | Null = nil, @direction : String? | Null = nil, @duration : String? | Null = nil, @end_time : Time? | Null = nil, @forwarded_from : String? | Null = nil, @from : String? | Null = nil, @from_formatted : String? | Null = nil, @group_sid : String? | Null = nil, @parent_call_sid : String? | Null = nil, @phone_number_sid : String? | Null = nil, @price : String? | Null = nil, @price_unit : String? | Null = nil, @queue_time : String? | Null = nil, @sid : String? | Null = nil, @start_time : Time? | Null = nil, @status : String? | Null = nil, @subresource_uris : Hash(String, String)? | Null = nil, @to : String? | Null = nil, @to_formatted : String? | Null = nil, @trunk_sid : String? | Null = nil, @uri : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@account_sid.nil? && !@account_sid.null? && @account_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@account_sid.nil? && !@account_sid.null? && @account_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !@account_sid.nil? && !@account_sid.null? && @account_sid !~ pattern
        invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      if !@group_sid.nil? && !@group_sid.null? && @group_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"group_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@group_sid.nil? && !@group_sid.null? && @group_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"group_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^GP[0-9a-fA-F]{32}$/
      if !@group_sid.nil? && !@group_sid.null? && @group_sid !~ pattern
        invalid_properties.push("invalid value for \"group_sid\", must conform to the pattern #{pattern}.")
      end

      if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"parent_call_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"parent_call_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid !~ pattern
        invalid_properties.push("invalid value for \"parent_call_sid\", must conform to the pattern #{pattern}.")
      end

      if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"phone_number_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"phone_number_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^PN[0-9a-fA-F]{32}$/
      if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid !~ pattern
        invalid_properties.push("invalid value for \"phone_number_sid\", must conform to the pattern #{pattern}.")
      end

      if !@sid.nil? && !@sid.null? && @sid.to_s.size > 34
        invalid_properties.push("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !@sid.nil? && !@sid.null? && @sid.to_s.size < 34
        invalid_properties.push("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !@sid.nil? && !@sid.null? && @sid !~ pattern
        invalid_properties.push("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"trunk_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"trunk_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^TK[0-9a-fA-F]{32}$/
      if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid !~ pattern
        invalid_properties.push("invalid value for \"trunk_sid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@account_sid.nil? && !@account_sid.null? && @account_sid.to_s.size > 34
      return false if !@account_sid.nil? && !@account_sid.null? && @account_sid.to_s.size < 34
      return false if !@account_sid.nil? && !@account_sid.null? && @account_sid !~ /^AC[0-9a-fA-F]{32}$/
      return false if !@group_sid.nil? && !@group_sid.null? && @group_sid.to_s.size > 34
      return false if !@group_sid.nil? && !@group_sid.null? && @group_sid.to_s.size < 34
      return false if !@group_sid.nil? && !@group_sid.null? && @group_sid !~ /^GP[0-9a-fA-F]{32}$/
      return false if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid.to_s.size > 34
      return false if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid.to_s.size < 34
      return false if !@parent_call_sid.nil? && !@parent_call_sid.null? && @parent_call_sid !~ /^CA[0-9a-fA-F]{32}$/
      return false if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid.to_s.size > 34
      return false if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid.to_s.size < 34
      return false if !@phone_number_sid.nil? && !@phone_number_sid.null? && @phone_number_sid !~ /^PN[0-9a-fA-F]{32}$/
      return false if !@sid.nil? && !@sid.null? && @sid.to_s.size > 34
      return false if !@sid.nil? && !@sid.null? && @sid.to_s.size < 34
      return false if !@sid.nil? && !@sid.null? && @sid !~ /^CA[0-9a-fA-F]{32}$/
      status_validator = EnumAttributeValidator.new("String", ["queued", "ringing", "in-progress", "completed", "busy", "failed", "no-answer", "canceled"])
      return false unless status_validator.valid?(@status)
      return false if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid.to_s.size > 34
      return false if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid.to_s.size < 34
      return false if !@trunk_sid.nil? && !@trunk_sid.null? && @trunk_sid !~ /^TK[0-9a-fA-F]{32}$/
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_sid Value to be assigned
    def account_sid=(account_sid)
      if !account_sid.nil? && !@account_sid.null? && account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !account_sid.nil? && !@account_sid.null? && account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !account_sid.nil? && !@account_sid.null? && account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] group_sid Value to be assigned
    def group_sid=(group_sid)
      if !group_sid.nil? && !@group_sid.null? && group_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"group_sid\", the character length must be smaller than or equal to 34.")
      end

      if !group_sid.nil? && !@group_sid.null? && group_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"group_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^GP[0-9a-fA-F]{32}$/
      if !group_sid.nil? && !@group_sid.null? && group_sid !~ pattern
        raise ArgumentError.new("invalid value for \"group_sid\", must conform to the pattern #{pattern}.")
      end

      @group_sid = group_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_call_sid Value to be assigned
    def parent_call_sid=(parent_call_sid)
      if !parent_call_sid.nil? && !@parent_call_sid.null? && parent_call_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"parent_call_sid\", the character length must be smaller than or equal to 34.")
      end

      if !parent_call_sid.nil? && !@parent_call_sid.null? && parent_call_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"parent_call_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !parent_call_sid.nil? && !@parent_call_sid.null? && parent_call_sid !~ pattern
        raise ArgumentError.new("invalid value for \"parent_call_sid\", must conform to the pattern #{pattern}.")
      end

      @parent_call_sid = parent_call_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number_sid Value to be assigned
    def phone_number_sid=(phone_number_sid)
      if !phone_number_sid.nil? && !@phone_number_sid.null? && phone_number_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"phone_number_sid\", the character length must be smaller than or equal to 34.")
      end

      if !phone_number_sid.nil? && !@phone_number_sid.null? && phone_number_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"phone_number_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^PN[0-9a-fA-F]{32}$/
      if !phone_number_sid.nil? && !@phone_number_sid.null? && phone_number_sid !~ pattern
        raise ArgumentError.new("invalid value for \"phone_number_sid\", must conform to the pattern #{pattern}.")
      end

      @phone_number_sid = phone_number_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] sid Value to be assigned
    def sid=(sid)
      if !sid.nil? && !@sid.null? && sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !sid.nil? && !@sid.null? && sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !sid.nil? && !@sid.null? && sid !~ pattern
        raise ArgumentError.new("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      @sid = sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["queued", "ringing", "in-progress", "completed", "busy", "failed", "no-answer", "canceled"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] trunk_sid Value to be assigned
    def trunk_sid=(trunk_sid)
      if !trunk_sid.nil? && !@trunk_sid.null? && trunk_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"trunk_sid\", the character length must be smaller than or equal to 34.")
      end

      if !trunk_sid.nil? && !@trunk_sid.null? && trunk_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"trunk_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^TK[0-9a-fA-F]{32}$/
      if !trunk_sid.nil? && !@trunk_sid.null? && trunk_sid !~ pattern
        raise ArgumentError.new("invalid value for \"trunk_sid\", must conform to the pattern #{pattern}.")
      end

      @trunk_sid = trunk_sid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        account_sid == o.account_sid &&
        answered_by == o.answered_by &&
        api_version == o.api_version &&
        caller_name == o.caller_name &&
        date_created == o.date_created &&
        date_updated == o.date_updated &&
        direction == o.direction &&
        duration == o.duration &&
        end_time == o.end_time &&
        forwarded_from == o.forwarded_from &&
        from == o.from &&
        from_formatted == o.from_formatted &&
        group_sid == o.group_sid &&
        parent_call_sid == o.parent_call_sid &&
        phone_number_sid == o.phone_number_sid &&
        price == o.price &&
        price_unit == o.price_unit &&
        queue_time == o.queue_time &&
        sid == o.sid &&
        start_time == o.start_time &&
        status == o.status &&
        subresource_uris == o.subresource_uris &&
        to == o.to &&
        to_formatted == o.to_formatted &&
        trunk_sid == o.trunk_sid &&
        uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_sid, answered_by, api_version, caller_name, date_created, date_updated, direction, duration, end_time, forwarded_from, from, from_formatted, group_sid, parent_call_sid, phone_number_sid, price, price_unit, queue_time, sid, start_time, status, subresource_uris, to, to_formatted, trunk_sid, uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Twilio.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
