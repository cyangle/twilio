#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class Token
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The SID of the Account that created the resource
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_SID = 34
    MIN_LENGTH_FOR_ACCOUNT_SID = 34
    PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # An array representing the ephemeral credentials
    @[JSON::Field(key: "ice_servers", type: Array(Twilio::TokenIceServersInner)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ice_servers.nil? && !ice_servers_present?)]
    getter ice_servers : Array(Twilio::TokenIceServersInner)? = nil

    @[JSON::Field(ignore: true)]
    property? ice_servers_present : Bool = false

    # The temporary password used for authenticating
    @[JSON::Field(key: "password", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: password.nil? && !password_present?)]
    getter password : String? = nil

    @[JSON::Field(ignore: true)]
    property? password_present : Bool = false

    # The duration in seconds the credentials are valid
    @[JSON::Field(key: "ttl", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ttl.nil? && !ttl_present?)]
    getter ttl : String? = nil

    @[JSON::Field(ignore: true)]
    property? ttl_present : Bool = false

    # The temporary username that uniquely identifies a Token
    @[JSON::Field(key: "username", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: username.nil? && !username_present?)]
    getter username : String? = nil

    @[JSON::Field(ignore: true)]
    property? username_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @ice_servers : Array(Twilio::TokenIceServersInner)? = nil,
      @password : String? = nil,
      @ttl : String? = nil,
      @username : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_sid = @account_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_date_created = @date_created).nil?
      end
      unless (_date_updated = @date_updated).nil?
      end
      unless (_ice_servers = @ice_servers).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "ice_servers", container: _ice_servers)) if _ice_servers.is_a?(Array)
      end
      unless (_password = @password).nil?
      end
      unless (_ttl = @ttl).nil?
      end
      unless (_username = @username).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_sid = @account_sid).nil?
        return false if _account_sid.to_s.size > MAX_LENGTH_FOR_ACCOUNT_SID
        return false if _account_sid.to_s.size < MIN_LENGTH_FOR_ACCOUNT_SID
        return false if !PATTERN_FOR_ACCOUNT_SID.matches?(_account_sid)
      end

      unless (_date_created = @date_created).nil?
      end

      unless (_date_updated = @date_updated).nil?
      end

      unless (_ice_servers = @ice_servers).nil?
        return false if _ice_servers.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _ice_servers)
      end

      unless (_password = @password).nil?
      end

      unless (_ttl = @ttl).nil?
      end

      unless (_username = @username).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_min_length("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
      @account_sid = _account_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      _date_created = date_created.not_nil!
      @date_created = _date_created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      _date_updated = date_updated.not_nil!
      @date_updated = _date_updated
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ice_servers Object to be assigned
    def ice_servers=(ice_servers : Array(Twilio::TokenIceServersInner)?)
      if ice_servers.nil?
        return @ice_servers = nil
      end
      _ice_servers = ice_servers.not_nil!
      OpenApi::ContainerValidator.validate(container: _ice_servers) if _ice_servers.is_a?(Array)
      @ice_servers = _ice_servers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] password Object to be assigned
    def password=(password : String?)
      if password.nil?
        return @password = nil
      end
      _password = password.not_nil!
      @password = _password
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ttl Object to be assigned
    def ttl=(ttl : String?)
      if ttl.nil?
        return @ttl = nil
      end
      _ttl = ttl.not_nil!
      @ttl = _ttl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] username Object to be assigned
    def username=(username : String?)
      if username.nil?
        return @username = nil
      end
      _username = username.not_nil!
      @username = _username
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @ice_servers, @ice_servers_present, @password, @password_present, @ttl, @ttl_present, @username, @username_present)
  end
end
