#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SipSipDomainSipCredentialListMapping
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The unique id of the Account that is responsible for this resource.
    @[JSON::Field(key: "account_sid", type: String?, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String?

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The date that this resource was created, given as GMT in RFC 2822 format.
    @[JSON::Field(key: "date_created", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_created.nil? && !date_created_present?)]
    property date_created : Time?

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The date that this resource was last updated, given as GMT in RFC 2822 format.
    @[JSON::Field(key: "date_updated", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?)]
    property date_updated : Time?

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # The unique string that identifies the SipDomain resource.
    @[JSON::Field(key: "domain_sid", type: String?, presence: true, ignore_serialize: domain_sid.nil? && !domain_sid_present?)]
    getter domain_sid : String?

    @[JSON::Field(ignore: true)]
    property? domain_sid_present : Bool = false

    # A human readable descriptive text for this resource, up to 64 characters long.
    @[JSON::Field(key: "friendly_name", type: String?, presence: true, ignore_serialize: friendly_name.nil? && !friendly_name_present?)]
    property friendly_name : String?

    @[JSON::Field(ignore: true)]
    property? friendly_name_present : Bool = false

    # A 34 character string that uniquely identifies this resource.
    @[JSON::Field(key: "sid", type: String?, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String?

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    # The URI for this resource, relative to https://api.twilio.com
    @[JSON::Field(key: "uri", type: String?, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    property uri : String?

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @account_sid : String? = nil, @date_created : Time? = nil, @date_updated : Time? = nil, @domain_sid : String? = nil, @friendly_name : String? = nil, @sid : String? = nil, @uri : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@account_sid.nil? && @account_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@account_sid.nil? && @account_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !@account_sid.nil? && @account_sid !~ pattern
        invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      if !@domain_sid.nil? && @domain_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"domain_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@domain_sid.nil? && @domain_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"domain_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^SD[0-9a-fA-F]{32}$/
      if !@domain_sid.nil? && @domain_sid !~ pattern
        invalid_properties.push("invalid value for \"domain_sid\", must conform to the pattern #{pattern}.")
      end

      if !@sid.nil? && @sid.to_s.size > 34
        invalid_properties.push("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !@sid.nil? && @sid.to_s.size < 34
        invalid_properties.push("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CL[0-9a-fA-F]{32}$/
      if !@sid.nil? && @sid !~ pattern
        invalid_properties.push("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@account_sid.nil? && @account_sid.to_s.size > 34
      return false if !@account_sid.nil? && @account_sid.to_s.size < 34
      return false if !@account_sid.nil? && @account_sid !~ /^AC[0-9a-fA-F]{32}$/

      return false if !@domain_sid.nil? && @domain_sid.to_s.size > 34
      return false if !@domain_sid.nil? && @domain_sid.to_s.size < 34
      return false if !@domain_sid.nil? && @domain_sid !~ /^SD[0-9a-fA-F]{32}$/

      return false if !@sid.nil? && @sid.to_s.size > 34
      return false if !@sid.nil? && @sid.to_s.size < 34
      return false if !@sid.nil? && @sid !~ /^CL[0-9a-fA-F]{32}$/

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_sid Value to be assigned
    def account_sid=(account_sid)
      if !account_sid.nil? && account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !account_sid.nil? && account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !account_sid.nil? && account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] domain_sid Value to be assigned
    def domain_sid=(domain_sid)
      if !domain_sid.nil? && domain_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"domain_sid\", the character length must be smaller than or equal to 34.")
      end

      if !domain_sid.nil? && domain_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"domain_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^SD[0-9a-fA-F]{32}$/
      if !domain_sid.nil? && domain_sid !~ pattern
        raise ArgumentError.new("invalid value for \"domain_sid\", must conform to the pattern #{pattern}.")
      end

      @domain_sid = domain_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] sid Value to be assigned
    def sid=(sid)
      if !sid.nil? && sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !sid.nil? && sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CL[0-9a-fA-F]{32}$/
      if !sid.nil? && sid !~ pattern
        raise ArgumentError.new("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      @sid = sid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @date_created, @date_updated, @domain_sid, @friendly_name, @sid, @uri)
  end
end
