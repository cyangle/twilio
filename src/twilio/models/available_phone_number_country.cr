#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AvailablePhoneNumberCountry
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Whether all phone numbers available in the country are new to the Twilio platform.
    @[JSON::Field(key: "beta", type: Bool?, presence: true, ignore_serialize: beta.nil? && !beta_present?)]
    property beta : Bool?

    @[JSON::Field(ignore: true)]
    property? beta_present : Bool = false

    # The name of the country
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    property country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # The ISO-3166-1 country code of the country.
    @[JSON::Field(key: "country_code", type: String?, presence: true, ignore_serialize: country_code.nil? && !country_code_present?)]
    property country_code : String?

    @[JSON::Field(ignore: true)]
    property? country_code_present : Bool = false

    # Account Instance Subresources
    @[JSON::Field(key: "subresource_uris", type: Hash(String, String)?, presence: true, ignore_serialize: subresource_uris.nil? && !subresource_uris_present?)]
    property subresource_uris : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? subresource_uris_present : Bool = false

    # The URI of the Country resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    property uri : String?

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @beta : Bool? = nil,
      @country : String? = nil,
      @country_code : String? = nil,
      @subresource_uris : Hash(String, String)? = nil,
      @uri : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@beta, @beta_present, @country, @country_present, @country_code, @country_code_present, @subresource_uris, @subresource_uris_present, @uri, @uri_present)
  end
end
