#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  # Call Response with Events.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CallCallEventResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "response_code", type: Int32?, presence: true, ignore_serialize: response_code.nil? && !response_code_present?)]
    property response_code : Int32?

    @[JSON::Field(ignore: true)]
    property? response_code_present : Bool = false

    @[JSON::Field(key: "request_duration", type: Int32?, presence: true, ignore_serialize: request_duration.nil? && !request_duration_present?)]
    property request_duration : Int32?

    @[JSON::Field(ignore: true)]
    property? request_duration_present : Bool = false

    @[JSON::Field(key: "content_type", type: String?, presence: true, ignore_serialize: content_type.nil? && !content_type_present?)]
    property content_type : String?

    @[JSON::Field(ignore: true)]
    property? content_type_present : Bool = false

    @[JSON::Field(key: "date_created", type: String?, presence: true, ignore_serialize: date_created.nil? && !date_created_present?)]
    property date_created : String?

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    @[JSON::Field(key: "response_body", type: String?, presence: true, ignore_serialize: response_body.nil? && !response_body_present?)]
    property response_body : String?

    @[JSON::Field(ignore: true)]
    property? response_body_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @response_code : Int32? = nil, @request_duration : Int32? = nil, @content_type : String? = nil, @date_created : String? = nil, @response_body : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        response_code == o.response_code &&
        request_duration == o.request_duration &&
        content_type == o.content_type &&
        date_created == o.date_created &&
        response_body == o.response_body
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [response_code, request_duration, content_type, date_created, response_body].hash
    end
  end
end
