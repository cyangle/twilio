#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class RecordingRecordingAddOnResult
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # The SID of the Account that created the resource
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The SID of the Add-on configuration
    @[JSON::Field(key: "add_on_configuration_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: add_on_configuration_sid.nil? && !add_on_configuration_sid_present?)]
    getter add_on_configuration_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? add_on_configuration_sid_present : Bool = false

    # The SID of the Add-on to which the result belongs
    @[JSON::Field(key: "add_on_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: add_on_sid.nil? && !add_on_sid_present?)]
    getter add_on_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? add_on_sid_present : Bool = false

    # The date and time in GMT that the result was completed
    @[JSON::Field(key: "date_completed", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_completed.nil? && !date_completed_present?, converter: Time::RFC2822Converter)]
    getter date_completed : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_completed_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # The SID of the recording to which the AddOnResult resource belongs
    @[JSON::Field(key: "reference_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reference_sid.nil? && !reference_sid_present?)]
    getter reference_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? reference_sid_present : Bool = false

    # The unique string that identifies the resource
    @[JSON::Field(key: "sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    # The status of the result
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "completed", "deleted", "failed", "in-progress", "init", "processing", "queued"])

    # Account Instance Subresources
    @[JSON::Field(key: "subresource_uris", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subresource_uris.nil? && !subresource_uris_present?)]
    getter subresource_uris : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? subresource_uris_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @add_on_configuration_sid : String? = nil,
      @add_on_sid : String? = nil,
      @date_completed : Time? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @reference_sid : String? = nil,
      @sid : String? = nil,
      @status : String? = nil,
      @subresource_uris : Hash(String, String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _account_sid = @account_sid
        if _account_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
        end

        if _account_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^AC[0-9a-fA-F]{32}$/
        if _account_sid !~ pattern
          invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _add_on_configuration_sid = @add_on_configuration_sid
        if _add_on_configuration_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"add_on_configuration_sid\", the character length must be smaller than or equal to 34.")
        end

        if _add_on_configuration_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"add_on_configuration_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^XE[0-9a-fA-F]{32}$/
        if _add_on_configuration_sid !~ pattern
          invalid_properties.push("invalid value for \"add_on_configuration_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _add_on_sid = @add_on_sid
        if _add_on_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"add_on_sid\", the character length must be smaller than or equal to 34.")
        end

        if _add_on_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"add_on_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^XB[0-9a-fA-F]{32}$/
        if _add_on_sid !~ pattern
          invalid_properties.push("invalid value for \"add_on_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _reference_sid = @reference_sid
        if _reference_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"reference_sid\", the character length must be smaller than or equal to 34.")
        end

        if _reference_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"reference_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^RE[0-9a-fA-F]{32}$/
        if _reference_sid !~ pattern
          invalid_properties.push("invalid value for \"reference_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _sid = @sid
        if _sid.to_s.size > 34
          invalid_properties.push("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
        end

        if _sid.to_s.size < 34
          invalid_properties.push("invalid value for \"sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^XR[0-9a-fA-F]{32}$/
        if _sid !~ pattern
          invalid_properties.push("invalid value for \"sid\", must conform to the pattern #{pattern}.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _account_sid = @account_sid
        return false if _account_sid.to_s.size > 34
        return false if _account_sid.to_s.size < 34
        return false if _account_sid !~ /^AC[0-9a-fA-F]{32}$/
      end
      if _add_on_configuration_sid = @add_on_configuration_sid
        return false if _add_on_configuration_sid.to_s.size > 34
        return false if _add_on_configuration_sid.to_s.size < 34
        return false if _add_on_configuration_sid !~ /^XE[0-9a-fA-F]{32}$/
      end
      if _add_on_sid = @add_on_sid
        return false if _add_on_sid.to_s.size > 34
        return false if _add_on_sid.to_s.size < 34
        return false if _add_on_sid !~ /^XB[0-9a-fA-F]{32}$/
      end
      if _reference_sid = @reference_sid
        return false if _reference_sid.to_s.size > 34
        return false if _reference_sid.to_s.size < 34
        return false if _reference_sid !~ /^RE[0-9a-fA-F]{32}$/
      end
      if _sid = @sid
        return false if _sid.to_s.size > 34
        return false if _sid.to_s.size < 34
        return false if _sid !~ /^XR[0-9a-fA-F]{32}$/
      end
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      if _account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if _account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if _account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] add_on_configuration_sid Object to be assigned
    def add_on_configuration_sid=(add_on_configuration_sid : String?)
      if add_on_configuration_sid.nil?
        return @add_on_configuration_sid = nil
      end
      _add_on_configuration_sid = add_on_configuration_sid.not_nil!
      if _add_on_configuration_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"add_on_configuration_sid\", the character length must be smaller than or equal to 34.")
      end

      if _add_on_configuration_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"add_on_configuration_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^XE[0-9a-fA-F]{32}$/
      if _add_on_configuration_sid !~ pattern
        raise ArgumentError.new("invalid value for \"add_on_configuration_sid\", must conform to the pattern #{pattern}.")
      end

      @add_on_configuration_sid = add_on_configuration_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] add_on_sid Object to be assigned
    def add_on_sid=(add_on_sid : String?)
      if add_on_sid.nil?
        return @add_on_sid = nil
      end
      _add_on_sid = add_on_sid.not_nil!
      if _add_on_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"add_on_sid\", the character length must be smaller than or equal to 34.")
      end

      if _add_on_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"add_on_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^XB[0-9a-fA-F]{32}$/
      if _add_on_sid !~ pattern
        raise ArgumentError.new("invalid value for \"add_on_sid\", must conform to the pattern #{pattern}.")
      end

      @add_on_sid = add_on_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_completed Object to be assigned
    def date_completed=(date_completed : Time?)
      if date_completed.nil?
        return @date_completed = nil
      end
      @date_completed = date_completed
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      @date_created = date_created
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      @date_updated = date_updated
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference_sid Object to be assigned
    def reference_sid=(reference_sid : String?)
      if reference_sid.nil?
        return @reference_sid = nil
      end
      _reference_sid = reference_sid.not_nil!
      if _reference_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"reference_sid\", the character length must be smaller than or equal to 34.")
      end

      if _reference_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"reference_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^RE[0-9a-fA-F]{32}$/
      if _reference_sid !~ pattern
        raise ArgumentError.new("invalid value for \"reference_sid\", must conform to the pattern #{pattern}.")
      end

      @reference_sid = reference_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sid Object to be assigned
    def sid=(sid : String?)
      if sid.nil?
        return @sid = nil
      end
      _sid = sid.not_nil!
      if _sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if _sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^XR[0-9a-fA-F]{32}$/
      if _sid !~ pattern
        raise ArgumentError.new("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      @sid = sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subresource_uris Object to be assigned
    def subresource_uris=(subresource_uris : Hash(String, String)?)
      if subresource_uris.nil?
        return @subresource_uris = nil
      end
      @subresource_uris = subresource_uris
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @add_on_configuration_sid, @add_on_configuration_sid_present, @add_on_sid, @add_on_sid_present, @date_completed, @date_completed_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @reference_sid, @reference_sid_present, @sid, @sid_present, @status, @status_present, @subresource_uris, @subresource_uris_present)
  end
end
