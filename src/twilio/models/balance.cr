#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class Balance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # Account Sid.
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # Account balance
    @[JSON::Field(key: "balance", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance.nil? && !balance_present?)]
    getter balance : String? = nil

    @[JSON::Field(ignore: true)]
    property? balance_present : Bool = false

    # Currency units
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @balance : String? = nil,
      @currency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _account_sid = @account_sid
        if _account_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
        end

        if _account_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^AC[0-9a-fA-F]{32}$/
        if _account_sid !~ pattern
          invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _account_sid = @account_sid
        return false if _account_sid.to_s.size > 34
        return false if _account_sid.to_s.size < 34
        return false if _account_sid !~ /^AC[0-9a-fA-F]{32}$/
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      if _account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if _account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if _account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(balance : String?)
      if balance.nil?
        return @balance = nil
      end
      @balance = balance
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      @currency = currency
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @balance, @balance_present, @currency, @currency_present)
  end
end
