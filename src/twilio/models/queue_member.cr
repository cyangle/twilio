#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  @[JSON::Serializable::Options(emit_nulls: true)]
  class QueueMember
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The SID of the Call the resource is associated with
    @[JSON::Field(key: "call_sid", type: String?, presence: true, ignore_serialize: call_sid.nil? && !call_sid_present?)]
    property call_sid : String?

    @[JSON::Field(ignore: true)]
    property? call_sid_present : Bool = false

    # The date the member was enqueued
    @[JSON::Field(key: "date_enqueued", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_enqueued.nil? && !date_enqueued_present?)]
    property date_enqueued : Time?

    @[JSON::Field(ignore: true)]
    property? date_enqueued_present : Bool = false

    # This member's current position in the queue.
    @[JSON::Field(key: "position", type: Int32?, presence: true, ignore_serialize: position.nil? && !position_present?)]
    property position : Int32?

    @[JSON::Field(ignore: true)]
    property? position_present : Bool = false

    # The SID of the Queue the member is in
    @[JSON::Field(key: "queue_sid", type: String?, presence: true, ignore_serialize: queue_sid.nil? && !queue_sid_present?)]
    property queue_sid : String?

    @[JSON::Field(ignore: true)]
    property? queue_sid_present : Bool = false

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    property uri : String?

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # The number of seconds the member has been in the queue.
    @[JSON::Field(key: "wait_time", type: Int32?, presence: true, ignore_serialize: wait_time.nil? && !wait_time_present?)]
    property wait_time : Int32?

    @[JSON::Field(ignore: true)]
    property? wait_time_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @call_sid : String? = nil, @date_enqueued : Time? = nil, @position : Int32? = nil, @queue_sid : String? = nil, @uri : String? = nil, @wait_time : Int32? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@call_sid.nil? && @call_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"call_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@call_sid.nil? && @call_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"call_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !@call_sid.nil? && @call_sid !~ pattern
        invalid_properties.push("invalid value for \"call_sid\", must conform to the pattern #{pattern}.")
      end

      if !@queue_sid.nil? && @queue_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"queue_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@queue_sid.nil? && @queue_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"queue_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^QU[0-9a-fA-F]{32}$/
      if !@queue_sid.nil? && @queue_sid !~ pattern
        invalid_properties.push("invalid value for \"queue_sid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@call_sid.nil? && @call_sid.to_s.size > 34
      return false if !@call_sid.nil? && @call_sid.to_s.size < 34
      return false if !@call_sid.nil? && @call_sid !~ /^CA[0-9a-fA-F]{32}$/
      return false if !@queue_sid.nil? && @queue_sid.to_s.size > 34
      return false if !@queue_sid.nil? && @queue_sid.to_s.size < 34
      return false if !@queue_sid.nil? && @queue_sid !~ /^QU[0-9a-fA-F]{32}$/
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] call_sid Value to be assigned
    def call_sid=(call_sid)
      if !call_sid.nil? && call_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"call_sid\", the character length must be smaller than or equal to 34.")
      end

      if !call_sid.nil? && call_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"call_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if !call_sid.nil? && call_sid !~ pattern
        raise ArgumentError.new("invalid value for \"call_sid\", must conform to the pattern #{pattern}.")
      end

      @call_sid = call_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] queue_sid Value to be assigned
    def queue_sid=(queue_sid)
      if !queue_sid.nil? && queue_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"queue_sid\", the character length must be smaller than or equal to 34.")
      end

      if !queue_sid.nil? && queue_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"queue_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^QU[0-9a-fA-F]{32}$/
      if !queue_sid.nil? && queue_sid !~ pattern
        raise ArgumentError.new("invalid value for \"queue_sid\", must conform to the pattern #{pattern}.")
      end

      @queue_sid = queue_sid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        call_sid == o.call_sid &&
        date_enqueued == o.date_enqueued &&
        position == o.position &&
        queue_sid == o.queue_sid &&
        uri == o.uri &&
        wait_time == o.wait_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [call_sid, date_enqueued, position, queue_sid, uri, wait_time].hash
    end
  end
end
