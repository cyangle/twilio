#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Twilio
  # Call Request.
  class CallCallEventRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: method.nil? && !method_present?)]
    getter method : String? = nil

    @[JSON::Field(ignore: true)]
    property? method_present : Bool = false

    @[JSON::Field(key: "url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String? = nil

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    @[JSON::Field(key: "parameters", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter parameters : Hash(String, String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @method : String? = nil,
      @url : String? = nil,
      @parameters : Hash(String, String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] method Object to be assigned
    def method=(new_value : String?)
      @method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(new_value : String?)
      @url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parameters Object to be assigned
    def parameters=(new_value : Hash(String, String)?)
      @parameters = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@method, @method_present, @url, @url_present, @parameters)
  end
end
