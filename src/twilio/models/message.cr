#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Message
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The SID of the Account that created the resource
    @[JSON::Field(key: "account_sid", type: String?, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String?

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The API version used to process the message
    @[JSON::Field(key: "api_version", type: String?, presence: true, ignore_serialize: api_version.nil? && !api_version_present?)]
    property api_version : String?

    @[JSON::Field(ignore: true)]
    property? api_version_present : Bool = false

    # The message text
    @[JSON::Field(key: "body", type: String?, presence: true, ignore_serialize: body.nil? && !body_present?)]
    property body : String?

    @[JSON::Field(ignore: true)]
    property? body_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_created.nil? && !date_created_present?)]
    property date_created : Time?

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT when the message was sent
    @[JSON::Field(key: "date_sent", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_sent.nil? && !date_sent_present?)]
    property date_sent : Time?

    @[JSON::Field(ignore: true)]
    property? date_sent_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, converter: Time::RFC2822Converter, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?)]
    property date_updated : Time?

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # The direction of the message
    @[JSON::Field(key: "direction", type: String?, presence: true, ignore_serialize: direction.nil? && !direction_present?)]
    getter direction : String?

    @[JSON::Field(ignore: true)]
    property? direction_present : Bool = false

    ENUM_VALIDATOR_FOR_DIRECTION = EnumValidator.new("String", ["inbound", "outbound-api", "outbound-call", "outbound-reply"])

    # The error code associated with the message
    @[JSON::Field(key: "error_code", type: Int32?, presence: true, ignore_serialize: error_code.nil? && !error_code_present?)]
    property error_code : Int32?

    @[JSON::Field(ignore: true)]
    property? error_code_present : Bool = false

    # The description of the error_code
    @[JSON::Field(key: "error_message", type: String?, presence: true, ignore_serialize: error_message.nil? && !error_message_present?)]
    property error_message : String?

    @[JSON::Field(ignore: true)]
    property? error_message_present : Bool = false

    # The phone number that initiated the message
    @[JSON::Field(key: "from", type: String?, presence: true, ignore_serialize: from.nil? && !from_present?)]
    property from : String?

    @[JSON::Field(ignore: true)]
    property? from_present : Bool = false

    # The SID of the Messaging Service used with the message.
    @[JSON::Field(key: "messaging_service_sid", type: String?, presence: true, ignore_serialize: messaging_service_sid.nil? && !messaging_service_sid_present?)]
    getter messaging_service_sid : String?

    @[JSON::Field(ignore: true)]
    property? messaging_service_sid_present : Bool = false

    # The number of media files associated with the message
    @[JSON::Field(key: "num_media", type: String?, presence: true, ignore_serialize: num_media.nil? && !num_media_present?)]
    property num_media : String?

    @[JSON::Field(ignore: true)]
    property? num_media_present : Bool = false

    # The number of messages used to deliver the message body
    @[JSON::Field(key: "num_segments", type: String?, presence: true, ignore_serialize: num_segments.nil? && !num_segments_present?)]
    property num_segments : String?

    @[JSON::Field(ignore: true)]
    property? num_segments_present : Bool = false

    # The amount billed for the message
    @[JSON::Field(key: "price", type: String?, presence: true, ignore_serialize: price.nil? && !price_present?)]
    property price : String?

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    # The currency in which price is measured
    @[JSON::Field(key: "price_unit", type: String?, presence: true, ignore_serialize: price_unit.nil? && !price_unit_present?)]
    property price_unit : String?

    @[JSON::Field(ignore: true)]
    property? price_unit_present : Bool = false

    # The unique string that identifies the resource
    @[JSON::Field(key: "sid", type: String?, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String?

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    # The status of the message
    @[JSON::Field(key: "status", type: String?, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String?

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("String", ["queued", "sending", "sent", "failed", "delivered", "undelivered", "receiving", "received", "accepted", "scheduled", "read", "partially_delivered", "canceled"])

    # Account Instance Subresources
    @[JSON::Field(key: "subresource_uris", type: Hash(String, String)?, presence: true, ignore_serialize: subresource_uris.nil? && !subresource_uris_present?)]
    property subresource_uris : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? subresource_uris_present : Bool = false

    # The phone number that received the message
    @[JSON::Field(key: "to", type: String?, presence: true, ignore_serialize: to.nil? && !to_present?)]
    property to : String?

    @[JSON::Field(ignore: true)]
    property? to_present : Bool = false

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    property uri : String?

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @account_sid : String? = nil, @api_version : String? = nil, @body : String? = nil, @date_created : Time? = nil, @date_sent : Time? = nil, @date_updated : Time? = nil, @direction : String? = nil, @error_code : Int32? = nil, @error_message : String? = nil, @from : String? = nil, @messaging_service_sid : String? = nil, @num_media : String? = nil, @num_segments : String? = nil, @price : String? = nil, @price_unit : String? = nil, @sid : String? = nil, @status : String? = nil, @subresource_uris : Hash(String, String)? = nil, @to : String? = nil, @uri : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@account_sid.nil? && @account_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@account_sid.nil? && @account_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !@account_sid.nil? && @account_sid !~ pattern
        invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      unless ENUM_VALIDATOR_FOR_DIRECTION.valid?(@direction)
        invalid_properties.push("invalid value for \"direction\", must be one of #{ENUM_VALIDATOR_FOR_DIRECTION.allowable_values}.")
      end

      if !@messaging_service_sid.nil? && @messaging_service_sid.to_s.size > 34
        invalid_properties.push("invalid value for \"messaging_service_sid\", the character length must be smaller than or equal to 34.")
      end

      if !@messaging_service_sid.nil? && @messaging_service_sid.to_s.size < 34
        invalid_properties.push("invalid value for \"messaging_service_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^MG[0-9a-fA-F]{32}$/
      if !@messaging_service_sid.nil? && @messaging_service_sid !~ pattern
        invalid_properties.push("invalid value for \"messaging_service_sid\", must conform to the pattern #{pattern}.")
      end

      if !@sid.nil? && @sid.to_s.size > 34
        invalid_properties.push("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !@sid.nil? && @sid.to_s.size < 34
        invalid_properties.push("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^(SM|MM)[0-9a-fA-F]{32}$/
      if !@sid.nil? && @sid !~ pattern
        invalid_properties.push("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)
        invalid_properties.push("invalid value for \"status\", must be one of #{ENUM_VALIDATOR_FOR_STATUS.allowable_values}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@account_sid.nil? && @account_sid.to_s.size > 34
      return false if !@account_sid.nil? && @account_sid.to_s.size < 34
      return false if !@account_sid.nil? && @account_sid !~ /^AC[0-9a-fA-F]{32}$/
      return false unless ENUM_VALIDATOR_FOR_DIRECTION.valid?(@direction)
      return false if !@messaging_service_sid.nil? && @messaging_service_sid.to_s.size > 34
      return false if !@messaging_service_sid.nil? && @messaging_service_sid.to_s.size < 34
      return false if !@messaging_service_sid.nil? && @messaging_service_sid !~ /^MG[0-9a-fA-F]{32}$/
      return false if !@sid.nil? && @sid.to_s.size > 34
      return false if !@sid.nil? && @sid.to_s.size < 34
      return false if !@sid.nil? && @sid !~ /^(SM|MM)[0-9a-fA-F]{32}$/
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_sid Value to be assigned
    def account_sid=(account_sid)
      if !account_sid.nil? && account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if !account_sid.nil? && account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if !account_sid.nil? && account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      unless ENUM_VALIDATOR_FOR_DIRECTION.valid?(direction)
        raise ArgumentError.new("invalid value for \"direction\", must be one of #{ENUM_VALIDATOR_FOR_DIRECTION.allowable_values}.")
      end
      @direction = direction
    end

    # Custom attribute writer method with validation
    # @param [Object] messaging_service_sid Value to be assigned
    def messaging_service_sid=(messaging_service_sid)
      if !messaging_service_sid.nil? && messaging_service_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"messaging_service_sid\", the character length must be smaller than or equal to 34.")
      end

      if !messaging_service_sid.nil? && messaging_service_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"messaging_service_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^MG[0-9a-fA-F]{32}$/
      if !messaging_service_sid.nil? && messaging_service_sid !~ pattern
        raise ArgumentError.new("invalid value for \"messaging_service_sid\", must conform to the pattern #{pattern}.")
      end

      @messaging_service_sid = messaging_service_sid
    end

    # Custom attribute writer method with validation
    # @param [Object] sid Value to be assigned
    def sid=(sid)
      if !sid.nil? && sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be smaller than or equal to 34.")
      end

      if !sid.nil? && sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^(SM|MM)[0-9a-fA-F]{32}$/
      if !sid.nil? && sid !~ pattern
        raise ArgumentError.new("invalid value for \"sid\", must conform to the pattern #{pattern}.")
      end

      @sid = sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      unless ENUM_VALIDATOR_FOR_STATUS.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{ENUM_VALIDATOR_FOR_STATUS.allowable_values}.")
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        account_sid == o.account_sid &&
        api_version == o.api_version &&
        body == o.body &&
        date_created == o.date_created &&
        date_sent == o.date_sent &&
        date_updated == o.date_updated &&
        direction == o.direction &&
        error_code == o.error_code &&
        error_message == o.error_message &&
        from == o.from &&
        messaging_service_sid == o.messaging_service_sid &&
        num_media == o.num_media &&
        num_segments == o.num_segments &&
        price == o.price &&
        price_unit == o.price_unit &&
        sid == o.sid &&
        status == o.status &&
        subresource_uris == o.subresource_uris &&
        to == o.to &&
        uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@account_sid, @api_version, @body, @date_created, @date_sent, @date_updated, @direction, @error_code, @error_message, @from, @messaging_service_sid, @num_media, @num_segments, @price, @price_unit, @sid, @status, @subresource_uris, @to, @uri)
  end
end
