#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class ConferenceParticipant
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The SID of the Account that created the resource
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_SID = 34
    MIN_LENGTH_FOR_ACCOUNT_SID = 34
    PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The SID of the Call the resource is associated with
    @[JSON::Field(key: "call_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_sid.nil? && !call_sid_present?)]
    getter call_sid : String? = nil
    MAX_LENGTH_FOR_CALL_SID = 34
    MIN_LENGTH_FOR_CALL_SID = 34
    PATTERN_FOR_CALL_SID    = /^CA[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? call_sid_present : Bool = false

    # The label of this participant
    @[JSON::Field(key: "label", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: label.nil? && !label_present?)]
    getter label : String? = nil

    @[JSON::Field(ignore: true)]
    property? label_present : Bool = false

    # The SID of the participant who is being `coached`
    @[JSON::Field(key: "call_sid_to_coach", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_sid_to_coach.nil? && !call_sid_to_coach_present?)]
    getter call_sid_to_coach : String? = nil
    MAX_LENGTH_FOR_CALL_SID_TO_COACH = 34
    MIN_LENGTH_FOR_CALL_SID_TO_COACH = 34
    PATTERN_FOR_CALL_SID_TO_COACH    = /^CA[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? call_sid_to_coach_present : Bool = false

    # Indicates if the participant changed to coach
    @[JSON::Field(key: "coaching", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: coaching.nil? && !coaching_present?)]
    getter coaching : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? coaching_present : Bool = false

    # The SID of the conference the participant is in
    @[JSON::Field(key: "conference_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: conference_sid.nil? && !conference_sid_present?)]
    getter conference_sid : String? = nil
    MAX_LENGTH_FOR_CONFERENCE_SID = 34
    MIN_LENGTH_FOR_CONFERENCE_SID = 34
    PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? conference_sid_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # Whether the conference ends when the participant leaves
    @[JSON::Field(key: "end_conference_on_exit", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: end_conference_on_exit.nil? && !end_conference_on_exit_present?)]
    getter end_conference_on_exit : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? end_conference_on_exit_present : Bool = false

    # Whether the participant is muted
    @[JSON::Field(key: "muted", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: muted.nil? && !muted_present?)]
    getter muted : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? muted_present : Bool = false

    # Whether the participant is on hold
    @[JSON::Field(key: "hold", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hold.nil? && !hold_present?)]
    getter hold : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? hold_present : Bool = false

    # Whether the conference starts when the participant joins the conference
    @[JSON::Field(key: "start_conference_on_enter", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: start_conference_on_enter.nil? && !start_conference_on_enter_present?)]
    getter start_conference_on_enter : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? start_conference_on_enter_present : Bool = false

    @[JSON::Field(key: "status", type: Twilio::ParticipantEnumStatus?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : Twilio::ParticipantEnumStatus? = nil

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    getter uri : String? = nil

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @call_sid : String? = nil,
      @label : String? = nil,
      @call_sid_to_coach : String? = nil,
      @coaching : Bool? = nil,
      @conference_sid : String? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @end_conference_on_exit : Bool? = nil,
      @muted : Bool? = nil,
      @hold : Bool? = nil,
      @start_conference_on_enter : Bool? = nil,
      @status : Twilio::ParticipantEnumStatus? = nil,
      @uri : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_sid = @account_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_call_sid = @call_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("call_sid", _call_sid.to_s.size, MAX_LENGTH_FOR_CALL_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("call_sid", _call_sid.to_s.size, MIN_LENGTH_FOR_CALL_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("call_sid", _call_sid, PATTERN_FOR_CALL_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_label = @label).nil?
      end
      unless (_call_sid_to_coach = @call_sid_to_coach).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("call_sid_to_coach", _call_sid_to_coach.to_s.size, MAX_LENGTH_FOR_CALL_SID_TO_COACH)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("call_sid_to_coach", _call_sid_to_coach.to_s.size, MIN_LENGTH_FOR_CALL_SID_TO_COACH)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("call_sid_to_coach", _call_sid_to_coach, PATTERN_FOR_CALL_SID_TO_COACH)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_coaching = @coaching).nil?
      end
      unless (_conference_sid = @conference_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("conference_sid", _conference_sid.to_s.size, MAX_LENGTH_FOR_CONFERENCE_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("conference_sid", _conference_sid.to_s.size, MIN_LENGTH_FOR_CONFERENCE_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("conference_sid", _conference_sid, PATTERN_FOR_CONFERENCE_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_date_created = @date_created).nil?
      end
      unless (_date_updated = @date_updated).nil?
      end
      unless (_end_conference_on_exit = @end_conference_on_exit).nil?
      end
      unless (_muted = @muted).nil?
      end
      unless (_hold = @hold).nil?
      end
      unless (_start_conference_on_enter = @start_conference_on_enter).nil?
      end
      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      unless (_uri = @uri).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_sid = @account_sid).nil?
        return false if _account_sid.to_s.size > MAX_LENGTH_FOR_ACCOUNT_SID
        return false if _account_sid.to_s.size < MIN_LENGTH_FOR_ACCOUNT_SID
        return false if !PATTERN_FOR_ACCOUNT_SID.matches?(_account_sid)
      end

      unless (_call_sid = @call_sid).nil?
        return false if _call_sid.to_s.size > MAX_LENGTH_FOR_CALL_SID
        return false if _call_sid.to_s.size < MIN_LENGTH_FOR_CALL_SID
        return false if !PATTERN_FOR_CALL_SID.matches?(_call_sid)
      end

      unless (_label = @label).nil?
      end

      unless (_call_sid_to_coach = @call_sid_to_coach).nil?
        return false if _call_sid_to_coach.to_s.size > MAX_LENGTH_FOR_CALL_SID_TO_COACH
        return false if _call_sid_to_coach.to_s.size < MIN_LENGTH_FOR_CALL_SID_TO_COACH
        return false if !PATTERN_FOR_CALL_SID_TO_COACH.matches?(_call_sid_to_coach)
      end

      unless (_coaching = @coaching).nil?
      end

      unless (_conference_sid = @conference_sid).nil?
        return false if _conference_sid.to_s.size > MAX_LENGTH_FOR_CONFERENCE_SID
        return false if _conference_sid.to_s.size < MIN_LENGTH_FOR_CONFERENCE_SID
        return false if !PATTERN_FOR_CONFERENCE_SID.matches?(_conference_sid)
      end

      unless (_date_created = @date_created).nil?
      end

      unless (_date_updated = @date_updated).nil?
      end

      unless (_end_conference_on_exit = @end_conference_on_exit).nil?
      end

      unless (_muted = @muted).nil?
      end

      unless (_hold = @hold).nil?
      end

      unless (_start_conference_on_enter = @start_conference_on_enter).nil?
      end

      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      unless (_uri = @uri).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_min_length("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
      @account_sid = _account_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_sid Object to be assigned
    def call_sid=(call_sid : String?)
      if call_sid.nil?
        return @call_sid = nil
      end
      _call_sid = call_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("call_sid", _call_sid.to_s.size, MAX_LENGTH_FOR_CALL_SID)
      OpenApi::PrimitiveValidator.validate_min_length("call_sid", _call_sid.to_s.size, MIN_LENGTH_FOR_CALL_SID)
      OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, PATTERN_FOR_CALL_SID)
      @call_sid = _call_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label Object to be assigned
    def label=(label : String?)
      if label.nil?
        return @label = nil
      end
      _label = label.not_nil!
      @label = _label
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_sid_to_coach Object to be assigned
    def call_sid_to_coach=(call_sid_to_coach : String?)
      if call_sid_to_coach.nil?
        return @call_sid_to_coach = nil
      end
      _call_sid_to_coach = call_sid_to_coach.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("call_sid_to_coach", _call_sid_to_coach.to_s.size, MAX_LENGTH_FOR_CALL_SID_TO_COACH)
      OpenApi::PrimitiveValidator.validate_min_length("call_sid_to_coach", _call_sid_to_coach.to_s.size, MIN_LENGTH_FOR_CALL_SID_TO_COACH)
      OpenApi::PrimitiveValidator.validate_pattern("call_sid_to_coach", _call_sid_to_coach, PATTERN_FOR_CALL_SID_TO_COACH)
      @call_sid_to_coach = _call_sid_to_coach
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] coaching Object to be assigned
    def coaching=(coaching : Bool?)
      if coaching.nil?
        return @coaching = nil
      end
      _coaching = coaching.not_nil!
      @coaching = _coaching
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conference_sid Object to be assigned
    def conference_sid=(conference_sid : String?)
      if conference_sid.nil?
        return @conference_sid = nil
      end
      _conference_sid = conference_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("conference_sid", _conference_sid.to_s.size, MAX_LENGTH_FOR_CONFERENCE_SID)
      OpenApi::PrimitiveValidator.validate_min_length("conference_sid", _conference_sid.to_s.size, MIN_LENGTH_FOR_CONFERENCE_SID)
      OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, PATTERN_FOR_CONFERENCE_SID)
      @conference_sid = _conference_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      _date_created = date_created.not_nil!
      @date_created = _date_created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      _date_updated = date_updated.not_nil!
      @date_updated = _date_updated
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_conference_on_exit Object to be assigned
    def end_conference_on_exit=(end_conference_on_exit : Bool?)
      if end_conference_on_exit.nil?
        return @end_conference_on_exit = nil
      end
      _end_conference_on_exit = end_conference_on_exit.not_nil!
      @end_conference_on_exit = _end_conference_on_exit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] muted Object to be assigned
    def muted=(muted : Bool?)
      if muted.nil?
        return @muted = nil
      end
      _muted = muted.not_nil!
      @muted = _muted
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hold Object to be assigned
    def hold=(hold : Bool?)
      if hold.nil?
        return @hold = nil
      end
      _hold = hold.not_nil!
      @hold = _hold
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_conference_on_enter Object to be assigned
    def start_conference_on_enter=(start_conference_on_enter : Bool?)
      if start_conference_on_enter.nil?
        return @start_conference_on_enter = nil
      end
      _start_conference_on_enter = start_conference_on_enter.not_nil!
      @start_conference_on_enter = _start_conference_on_enter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : Twilio::ParticipantEnumStatus?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      _status.validate
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uri Object to be assigned
    def uri=(uri : String?)
      if uri.nil?
        return @uri = nil
      end
      _uri = uri.not_nil!
      @uri = _uri
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @call_sid, @call_sid_present, @label, @label_present, @call_sid_to_coach, @call_sid_to_coach_present, @coaching, @coaching_present, @conference_sid, @conference_sid_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @end_conference_on_exit, @end_conference_on_exit_present, @muted, @muted_present, @hold, @hold_present, @start_conference_on_enter, @start_conference_on_enter_present, @status, @uri, @uri_present)
  end
end
