#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.29.1
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class ConferenceParticipant
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # The SID of the Account that created the resource
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The SID of the Call the resource is associated with
    @[JSON::Field(key: "call_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_sid.nil? && !call_sid_present?)]
    getter call_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? call_sid_present : Bool = false

    # The SID of the participant who is being `coached`
    @[JSON::Field(key: "call_sid_to_coach", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_sid_to_coach.nil? && !call_sid_to_coach_present?)]
    getter call_sid_to_coach : String? = nil

    @[JSON::Field(ignore: true)]
    property? call_sid_to_coach_present : Bool = false

    # Indicates if the participant changed to coach
    @[JSON::Field(key: "coaching", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: coaching.nil? && !coaching_present?)]
    getter coaching : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? coaching_present : Bool = false

    # The SID of the conference the participant is in
    @[JSON::Field(key: "conference_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: conference_sid.nil? && !conference_sid_present?)]
    getter conference_sid : String? = nil

    @[JSON::Field(ignore: true)]
    property? conference_sid_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The RFC 2822 date and time in GMT that the resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # Whether the conference ends when the participant leaves
    @[JSON::Field(key: "end_conference_on_exit", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: end_conference_on_exit.nil? && !end_conference_on_exit_present?)]
    getter end_conference_on_exit : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? end_conference_on_exit_present : Bool = false

    # Whether the participant is on hold
    @[JSON::Field(key: "hold", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hold.nil? && !hold_present?)]
    getter hold : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? hold_present : Bool = false

    # The label of this participant
    @[JSON::Field(key: "label", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: label.nil? && !label_present?)]
    getter label : String? = nil

    @[JSON::Field(ignore: true)]
    property? label_present : Bool = false

    # Whether the participant is muted
    @[JSON::Field(key: "muted", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: muted.nil? && !muted_present?)]
    getter muted : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? muted_present : Bool = false

    # Whether the conference starts when the participant joins the conference
    @[JSON::Field(key: "start_conference_on_enter", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: start_conference_on_enter.nil? && !start_conference_on_enter_present?)]
    getter start_conference_on_enter : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? start_conference_on_enter_present : Bool = false

    # The status of the participant's call in a session
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["queued", "connecting", "ringing", "connected", "complete", "failed"])

    # The URI of the resource, relative to `https://api.twilio.com`
    @[JSON::Field(key: "uri", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uri.nil? && !uri_present?)]
    getter uri : String? = nil

    @[JSON::Field(ignore: true)]
    property? uri_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @call_sid : String? = nil,
      @call_sid_to_coach : String? = nil,
      @coaching : Bool? = nil,
      @conference_sid : String? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @end_conference_on_exit : Bool? = nil,
      @hold : Bool? = nil,
      @label : String? = nil,
      @muted : Bool? = nil,
      @start_conference_on_enter : Bool? = nil,
      @status : String? = nil,
      @uri : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _account_sid = @account_sid
        if _account_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
        end

        if _account_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^AC[0-9a-fA-F]{32}$/
        if _account_sid !~ pattern
          invalid_properties.push("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _call_sid = @call_sid
        if _call_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"call_sid\", the character length must be smaller than or equal to 34.")
        end

        if _call_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"call_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^CA[0-9a-fA-F]{32}$/
        if _call_sid !~ pattern
          invalid_properties.push("invalid value for \"call_sid\", must conform to the pattern #{pattern}.")
        end
      end
      if _call_sid_to_coach = @call_sid_to_coach
        if _call_sid_to_coach.to_s.size > 34
          invalid_properties.push("invalid value for \"call_sid_to_coach\", the character length must be smaller than or equal to 34.")
        end

        if _call_sid_to_coach.to_s.size < 34
          invalid_properties.push("invalid value for \"call_sid_to_coach\", the character length must be great than or equal to 34.")
        end

        pattern = /^CA[0-9a-fA-F]{32}$/
        if _call_sid_to_coach !~ pattern
          invalid_properties.push("invalid value for \"call_sid_to_coach\", must conform to the pattern #{pattern}.")
        end
      end
      if _conference_sid = @conference_sid
        if _conference_sid.to_s.size > 34
          invalid_properties.push("invalid value for \"conference_sid\", the character length must be smaller than or equal to 34.")
        end

        if _conference_sid.to_s.size < 34
          invalid_properties.push("invalid value for \"conference_sid\", the character length must be great than or equal to 34.")
        end

        pattern = /^CF[0-9a-fA-F]{32}$/
        if _conference_sid !~ pattern
          invalid_properties.push("invalid value for \"conference_sid\", must conform to the pattern #{pattern}.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _account_sid = @account_sid
        return false if _account_sid.to_s.size > 34
        return false if _account_sid.to_s.size < 34
        return false if _account_sid !~ /^AC[0-9a-fA-F]{32}$/
      end
      if _call_sid = @call_sid
        return false if _call_sid.to_s.size > 34
        return false if _call_sid.to_s.size < 34
        return false if _call_sid !~ /^CA[0-9a-fA-F]{32}$/
      end
      if _call_sid_to_coach = @call_sid_to_coach
        return false if _call_sid_to_coach.to_s.size > 34
        return false if _call_sid_to_coach.to_s.size < 34
        return false if _call_sid_to_coach !~ /^CA[0-9a-fA-F]{32}$/
      end
      if _conference_sid = @conference_sid
        return false if _conference_sid.to_s.size > 34
        return false if _conference_sid.to_s.size < 34
        return false if _conference_sid !~ /^CF[0-9a-fA-F]{32}$/
      end
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      if _account_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be smaller than or equal to 34.")
      end

      if _account_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"account_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^AC[0-9a-fA-F]{32}$/
      if _account_sid !~ pattern
        raise ArgumentError.new("invalid value for \"account_sid\", must conform to the pattern #{pattern}.")
      end

      @account_sid = account_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_sid Object to be assigned
    def call_sid=(call_sid : String?)
      if call_sid.nil?
        return @call_sid = nil
      end
      _call_sid = call_sid.not_nil!
      if _call_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"call_sid\", the character length must be smaller than or equal to 34.")
      end

      if _call_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"call_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if _call_sid !~ pattern
        raise ArgumentError.new("invalid value for \"call_sid\", must conform to the pattern #{pattern}.")
      end

      @call_sid = call_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_sid_to_coach Object to be assigned
    def call_sid_to_coach=(call_sid_to_coach : String?)
      if call_sid_to_coach.nil?
        return @call_sid_to_coach = nil
      end
      _call_sid_to_coach = call_sid_to_coach.not_nil!
      if _call_sid_to_coach.to_s.size > 34
        raise ArgumentError.new("invalid value for \"call_sid_to_coach\", the character length must be smaller than or equal to 34.")
      end

      if _call_sid_to_coach.to_s.size < 34
        raise ArgumentError.new("invalid value for \"call_sid_to_coach\", the character length must be great than or equal to 34.")
      end

      pattern = /^CA[0-9a-fA-F]{32}$/
      if _call_sid_to_coach !~ pattern
        raise ArgumentError.new("invalid value for \"call_sid_to_coach\", must conform to the pattern #{pattern}.")
      end

      @call_sid_to_coach = call_sid_to_coach
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] coaching Object to be assigned
    def coaching=(coaching : Bool?)
      if coaching.nil?
        return @coaching = nil
      end
      @coaching = coaching
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conference_sid Object to be assigned
    def conference_sid=(conference_sid : String?)
      if conference_sid.nil?
        return @conference_sid = nil
      end
      _conference_sid = conference_sid.not_nil!
      if _conference_sid.to_s.size > 34
        raise ArgumentError.new("invalid value for \"conference_sid\", the character length must be smaller than or equal to 34.")
      end

      if _conference_sid.to_s.size < 34
        raise ArgumentError.new("invalid value for \"conference_sid\", the character length must be great than or equal to 34.")
      end

      pattern = /^CF[0-9a-fA-F]{32}$/
      if _conference_sid !~ pattern
        raise ArgumentError.new("invalid value for \"conference_sid\", must conform to the pattern #{pattern}.")
      end

      @conference_sid = conference_sid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      @date_created = date_created
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      @date_updated = date_updated
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_conference_on_exit Object to be assigned
    def end_conference_on_exit=(end_conference_on_exit : Bool?)
      if end_conference_on_exit.nil?
        return @end_conference_on_exit = nil
      end
      @end_conference_on_exit = end_conference_on_exit
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hold Object to be assigned
    def hold=(hold : Bool?)
      if hold.nil?
        return @hold = nil
      end
      @hold = hold
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label Object to be assigned
    def label=(label : String?)
      if label.nil?
        return @label = nil
      end
      @label = label
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] muted Object to be assigned
    def muted=(muted : Bool?)
      if muted.nil?
        return @muted = nil
      end
      @muted = muted
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_conference_on_enter Object to be assigned
    def start_conference_on_enter=(start_conference_on_enter : Bool?)
      if start_conference_on_enter.nil?
        return @start_conference_on_enter = nil
      end
      @start_conference_on_enter = start_conference_on_enter
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uri Object to be assigned
    def uri=(uri : String?)
      if uri.nil?
        return @uri = nil
      end
      @uri = uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @call_sid, @call_sid_present, @call_sid_to_coach, @call_sid_to_coach_present, @coaching, @coaching_present, @conference_sid, @conference_sid_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @end_conference_on_exit, @end_conference_on_exit_present, @hold, @hold_present, @label, @label_present, @muted, @muted_present, @start_conference_on_enter, @start_conference_on_enter_present, @status, @status_present, @uri, @uri_present)
  end
end
