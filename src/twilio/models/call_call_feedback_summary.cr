#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Twilio
  class CallCallFeedbackSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The unique sid that identifies this account
    @[JSON::Field(key: "account_sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_sid.nil? && !account_sid_present?)]
    getter account_sid : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_SID = 34
    MIN_LENGTH_FOR_ACCOUNT_SID = 34
    PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? account_sid_present : Bool = false

    # The total number of calls
    @[JSON::Field(key: "call_count", type: Int32?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_count.nil? && !call_count_present?)]
    getter call_count : Int32? = nil

    @[JSON::Field(ignore: true)]
    property? call_count_present : Bool = false

    # The total number of calls with a feedback entry
    @[JSON::Field(key: "call_feedback_count", type: Int32?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: call_feedback_count.nil? && !call_feedback_count_present?)]
    getter call_feedback_count : Int32? = nil

    @[JSON::Field(ignore: true)]
    property? call_feedback_count_present : Bool = false

    # The date this resource was created
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_created.nil? && !date_created_present?, converter: Time::RFC2822Converter)]
    getter date_created : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_created_present : Bool = false

    # The date this resource was last updated
    @[JSON::Field(key: "date_updated", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_updated.nil? && !date_updated_present?, converter: Time::RFC2822Converter)]
    getter date_updated : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_updated_present : Bool = false

    # The latest feedback entry date in the summary
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: end_date.nil? && !end_date_present?, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? end_date_present : Bool = false

    # Whether the feedback summary includes subaccounts
    @[JSON::Field(key: "include_subaccounts", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: include_subaccounts.nil? && !include_subaccounts_present?)]
    getter include_subaccounts : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? include_subaccounts_present : Bool = false

    # Issues experienced during the call
    @[JSON::Field(key: "issues", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: issues.nil? && !issues_present?)]
    getter issues : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? issues_present : Bool = false

    # The average QualityScore of the feedback entries
    @[JSON::Field(key: "quality_score_average", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quality_score_average.nil? && !quality_score_average_present?)]
    getter quality_score_average : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? quality_score_average_present : Bool = false

    # The median QualityScore of the feedback entries
    @[JSON::Field(key: "quality_score_median", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quality_score_median.nil? && !quality_score_median_present?)]
    getter quality_score_median : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? quality_score_median_present : Bool = false

    # The standard deviation of the quality scores
    @[JSON::Field(key: "quality_score_standard_deviation", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quality_score_standard_deviation.nil? && !quality_score_standard_deviation_present?)]
    getter quality_score_standard_deviation : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? quality_score_standard_deviation_present : Bool = false

    # A string that uniquely identifies this feedback entry
    @[JSON::Field(key: "sid", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: sid.nil? && !sid_present?)]
    getter sid : String? = nil
    MAX_LENGTH_FOR_SID = 34
    MIN_LENGTH_FOR_SID = 34
    PATTERN_FOR_SID    = /^FS[0-9a-fA-F]{32}$/

    @[JSON::Field(ignore: true)]
    property? sid_present : Bool = false

    # The earliest feedback entry date in the summary
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: start_date.nil? && !start_date_present?, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? start_date_present : Bool = false

    @[JSON::Field(key: "status", type: Twilio::CallFeedbackSummaryEnumStatus?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : Twilio::CallFeedbackSummaryEnumStatus? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_sid : String? = nil,
      @call_count : Int32? = nil,
      @call_feedback_count : Int32? = nil,
      @date_created : Time? = nil,
      @date_updated : Time? = nil,
      @end_date : Time? = nil,
      @include_subaccounts : Bool? = nil,
      @issues : Array(String)? = nil,
      @quality_score_average : Float64? = nil,
      @quality_score_median : Float64? = nil,
      @quality_score_standard_deviation : Float64? = nil,
      @sid : String? = nil,
      @start_date : Time? = nil,
      @status : Twilio::CallFeedbackSummaryEnumStatus? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_sid = @account_sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_call_count = @call_count).nil?
      end
      unless (_call_feedback_count = @call_feedback_count).nil?
      end
      unless (_date_created = @date_created).nil?
      end
      unless (_date_updated = @date_updated).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_include_subaccounts = @include_subaccounts).nil?
      end
      unless (_issues = @issues).nil?
      end
      unless (_quality_score_average = @quality_score_average).nil?
      end
      unless (_quality_score_median = @quality_score_median).nil?
      end
      unless (_quality_score_standard_deviation = @quality_score_standard_deviation).nil?
      end
      unless (_sid = @sid).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("sid", _sid.to_s.size, MAX_LENGTH_FOR_SID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("sid", _sid.to_s.size, MIN_LENGTH_FOR_SID)
          invalid_properties.push(min_length_error)
        end

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("sid", _sid, PATTERN_FOR_SID)
          invalid_properties.push(pattern_error)
        end
      end
      unless (_start_date = @start_date).nil?
      end
      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_sid = @account_sid).nil?
        return false if _account_sid.to_s.size > MAX_LENGTH_FOR_ACCOUNT_SID
        return false if _account_sid.to_s.size < MIN_LENGTH_FOR_ACCOUNT_SID
        return false if !PATTERN_FOR_ACCOUNT_SID.matches?(_account_sid)
      end

      unless (_call_count = @call_count).nil?
      end

      unless (_call_feedback_count = @call_feedback_count).nil?
      end

      unless (_date_created = @date_created).nil?
      end

      unless (_date_updated = @date_updated).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_include_subaccounts = @include_subaccounts).nil?
      end

      unless (_issues = @issues).nil?
      end

      unless (_quality_score_average = @quality_score_average).nil?
      end

      unless (_quality_score_median = @quality_score_median).nil?
      end

      unless (_quality_score_standard_deviation = @quality_score_standard_deviation).nil?
      end

      unless (_sid = @sid).nil?
        return false if _sid.to_s.size > MAX_LENGTH_FOR_SID
        return false if _sid.to_s.size < MIN_LENGTH_FOR_SID
        return false if !PATTERN_FOR_SID.matches?(_sid)
      end

      unless (_start_date = @start_date).nil?
      end

      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_sid Object to be assigned
    def account_sid=(account_sid : String?)
      if account_sid.nil?
        return @account_sid = nil
      end
      _account_sid = account_sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_sid", _account_sid.to_s.size, MAX_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_min_length("account_sid", _account_sid.to_s.size, MIN_LENGTH_FOR_ACCOUNT_SID)
      OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, PATTERN_FOR_ACCOUNT_SID)
      @account_sid = _account_sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_count Object to be assigned
    def call_count=(call_count : Int32?)
      if call_count.nil?
        return @call_count = nil
      end
      _call_count = call_count.not_nil!
      @call_count = _call_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_feedback_count Object to be assigned
    def call_feedback_count=(call_feedback_count : Int32?)
      if call_feedback_count.nil?
        return @call_feedback_count = nil
      end
      _call_feedback_count = call_feedback_count.not_nil!
      @call_feedback_count = _call_feedback_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(date_created : Time?)
      if date_created.nil?
        return @date_created = nil
      end
      _date_created = date_created.not_nil!
      @date_created = _date_created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_updated Object to be assigned
    def date_updated=(date_updated : Time?)
      if date_updated.nil?
        return @date_updated = nil
      end
      _date_updated = date_updated.not_nil!
      @date_updated = _date_updated
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(end_date : Time?)
      if end_date.nil?
        return @end_date = nil
      end
      _end_date = end_date.not_nil!
      @end_date = _end_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] include_subaccounts Object to be assigned
    def include_subaccounts=(include_subaccounts : Bool?)
      if include_subaccounts.nil?
        return @include_subaccounts = nil
      end
      _include_subaccounts = include_subaccounts.not_nil!
      @include_subaccounts = _include_subaccounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issues Object to be assigned
    def issues=(issues : Array(String)?)
      if issues.nil?
        return @issues = nil
      end
      _issues = issues.not_nil!
      @issues = _issues
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quality_score_average Object to be assigned
    def quality_score_average=(quality_score_average : Float64?)
      if quality_score_average.nil?
        return @quality_score_average = nil
      end
      _quality_score_average = quality_score_average.not_nil!
      @quality_score_average = _quality_score_average
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quality_score_median Object to be assigned
    def quality_score_median=(quality_score_median : Float64?)
      if quality_score_median.nil?
        return @quality_score_median = nil
      end
      _quality_score_median = quality_score_median.not_nil!
      @quality_score_median = _quality_score_median
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quality_score_standard_deviation Object to be assigned
    def quality_score_standard_deviation=(quality_score_standard_deviation : Float64?)
      if quality_score_standard_deviation.nil?
        return @quality_score_standard_deviation = nil
      end
      _quality_score_standard_deviation = quality_score_standard_deviation.not_nil!
      @quality_score_standard_deviation = _quality_score_standard_deviation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sid Object to be assigned
    def sid=(sid : String?)
      if sid.nil?
        return @sid = nil
      end
      _sid = sid.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("sid", _sid.to_s.size, MAX_LENGTH_FOR_SID)
      OpenApi::PrimitiveValidator.validate_min_length("sid", _sid.to_s.size, MIN_LENGTH_FOR_SID)
      OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, PATTERN_FOR_SID)
      @sid = _sid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(start_date : Time?)
      if start_date.nil?
        return @start_date = nil
      end
      _start_date = start_date.not_nil!
      @start_date = _start_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : Twilio::CallFeedbackSummaryEnumStatus?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      _status.validate
      @status = _status
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_sid, @account_sid_present, @call_count, @call_count_present, @call_feedback_count, @call_feedback_count_present, @date_created, @date_created_present, @date_updated, @date_updated_present, @end_date, @end_date_present, @include_subaccounts, @include_subaccounts_present, @issues, @issues_present, @quality_score_average, @quality_score_average_present, @quality_score_median, @quality_score_median_present, @quality_score_standard_deviation, @quality_score_standard_deviation_present, @sid, @sid_present, @start_date, @start_date_present, @status)
  end
end
