#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/address"

require "../models/list_address_response"
require "../models/list_dependent_phone_number_response"

module Twilio
  class AddressesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Twilio::Address]
    def create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = create_address_with_http_info(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def create_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_address(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#create_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return nil
    def create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_address(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary).execute(&block)
    end

    CREATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.create_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"city\" is required and cannot be null") if city.nil?

        raise ArgumentError.new("\"customer_name\" is required and cannot be null") if customer_name.nil?

        raise ArgumentError.new("\"iso_country\" is required and cannot be null") if iso_country.nil?

        raise ArgumentError.new("\"postal_code\" is required and cannot be null") if postal_code.nil?

        raise ArgumentError.new("\"region\" is required and cannot be null") if region.nil?

        raise ArgumentError.new("\"street\" is required and cannot be null") if street.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AutoCorrectAddress", auto_correct_address.to_s) if !auto_correct_address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("City", city.to_s) if !city.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CustomerName", customer_name.to_s) if !customer_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyEnabled", emergency_enabled.to_s) if !emergency_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IsoCountry", iso_country.to_s) if !iso_country.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Street", street.to_s) if !street.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StreetSecondary", street_secondary.to_s) if !street_secondary.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AddressesApi.create_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return [Nil]
    def delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_address_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_address(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#delete_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return nil
    def delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_address(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    DELETE_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    DELETE_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.delete_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "AddressesApi.delete_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return [Twilio::Address]
    def fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = fetch_address_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def fetch_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_address(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#fetch_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return nil
    def fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_address(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    FETCH_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    FETCH_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.fetch_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AddressesApi.fetch_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAddressResponse]
    def list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAddressResponse
      data, _status_code, _headers = list_address_with_http_info(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAddressResponse, Integer, Hash)] Twilio::ListAddressResponse, response status code and response headers
    def list_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAddressResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_address(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#list_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAddressResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_address(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size).execute(&block)
    end

    LIST_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_ADDRESS_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_ADDRESS_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.list_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_ADDRESS_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_ADDRESS_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["CustomerName"] = customer_name.to_s if !customer_name.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["IsoCountry"] = iso_country.to_s if !iso_country.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AddressesApi.list_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListDependentPhoneNumberResponse]
    def list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListDependentPhoneNumberResponse
      data, _status_code, _headers = list_dependent_phone_number_with_http_info(account_sid: account_sid, address_sid: address_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListDependentPhoneNumberResponse, Integer, Hash)] Twilio::ListDependentPhoneNumberResponse, response status code and response headers
    def list_dependent_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListDependentPhoneNumberResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_dependent_phone_number(account_sid: account_sid, address_sid: address_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#list_dependent_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListDependentPhoneNumberResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_dependent_phone_number(account_sid: account_sid, address_sid: address_sid, page_size: page_size).execute(&block)
    end

    LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    LIST_DEPENDENT_PHONE_NUMBER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_DEPENDENT_PHONE_NUMBER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.list_dependent_phone_number ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"address_sid\" is required and cannot be null") if address_sid.nil?
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_DEPENDENT_PHONE_NUMBER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_DEPENDENT_PHONE_NUMBER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "AddressSid" + "}", URI.encode_path(address_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "AddressesApi.list_dependent_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Twilio::Address]
    def update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = update_address_with_http_info(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def update_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_address(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: AddressesApi#update_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return nil
    def update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_address(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary).execute(&block)
    end

    UPDATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    UPDATE_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    UPDATE_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: AddressesApi.update_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AutoCorrectAddress", auto_correct_address.to_s) if !auto_correct_address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("City", city.to_s) if !city.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CustomerName", customer_name.to_s) if !customer_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyEnabled", emergency_enabled.to_s) if !emergency_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Street", street.to_s) if !street.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StreetSecondary", street_secondary.to_s) if !street_secondary.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "AddressesApi.update_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
