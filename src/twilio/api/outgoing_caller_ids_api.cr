#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/http_method"

require "../models/list_outgoing_caller_id_response"
require "../models/outgoing_caller_id"
require "../models/validation_request"

module Twilio
  class OutgoingCallerIdsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Twilio::ValidationRequest]
    def create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Twilio::ValidationRequest
      data, _status_code, _headers = create_validation_request_with_http_info(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::ValidationRequest, Integer, Hash)] Twilio::ValidationRequest, response status code and response headers
    def create_validation_request_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::ValidationRequest, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_validation_request(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: OutgoingCallerIdsApi#create_validation_request\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ValidationRequest.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return nil
    def create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_validation_request(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method).execute(&block)
    end

    CREATE_VALIDATION_REQUEST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_VALIDATION_REQUEST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_VALIDATION_REQUEST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: OutgoingCallerIdsApi.create_validation_request ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_VALIDATION_REQUEST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_VALIDATION_REQUEST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_VALIDATION_REQUEST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"phone_number\" is required and cannot be null") if phone_number.nil?

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallDelay", call_delay.to_s) if !call_delay.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Extension", extension.to_s) if !extension.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "OutgoingCallerIdsApi.create_validation_request",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return [Nil]
    def delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_outgoing_caller_id(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: OutgoingCallerIdsApi#delete_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return nil
    def delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_outgoing_caller_id(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: OutgoingCallerIdsApi.delete_outgoing_caller_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "OutgoingCallerIdsApi.delete_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return [Twilio::OutgoingCallerId]
    def fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::OutgoingCallerId
      data, _status_code, _headers = fetch_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return [Tuple(Twilio::OutgoingCallerId, Integer, Hash)] Twilio::OutgoingCallerId, response status code and response headers
    def fetch_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::OutgoingCallerId, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_outgoing_caller_id(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: OutgoingCallerIdsApi#fetch_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::OutgoingCallerId.from_json(body), status_code, headers)
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return nil
    def fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_outgoing_caller_id(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: OutgoingCallerIdsApi.fetch_outgoing_caller_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "OutgoingCallerIdsApi.fetch_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListOutgoingCallerIdResponse]
    def list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListOutgoingCallerIdResponse
      data, _status_code, _headers = list_outgoing_caller_id_with_http_info(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size)
      data
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListOutgoingCallerIdResponse, Integer, Hash)] Twilio::ListOutgoingCallerIdResponse, response status code and response headers
    def list_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListOutgoingCallerIdResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_outgoing_caller_id(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: OutgoingCallerIdsApi#list_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListOutgoingCallerIdResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_outgoing_caller_id(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size).execute(&block)
    end

    LIST_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_OUTGOING_CALLER_ID_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_OUTGOING_CALLER_ID_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: OutgoingCallerIdsApi.list_outgoing_caller_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_OUTGOING_CALLER_ID_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_OUTGOING_CALLER_ID_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "OutgoingCallerIdsApi.list_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::OutgoingCallerId]
    def update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::OutgoingCallerId
      data, _status_code, _headers = update_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::OutgoingCallerId, Integer, Hash)] Twilio::OutgoingCallerId, response status code and response headers
    def update_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::OutgoingCallerId, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_outgoing_caller_id(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: OutgoingCallerIdsApi#update_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::OutgoingCallerId.from_json(body), status_code, headers)
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_outgoing_caller_id(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: OutgoingCallerIdsApi.update_outgoing_caller_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "OutgoingCallerIdsApi.update_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
