#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/token"

module Twilio
  class TokensApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return [Twilio::Token]
    def create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Twilio::Token
      data, _status_code, _headers = create_token_with_http_info(account_sid: account_sid, ttl: ttl)
      data
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return [Tuple(Twilio::Token, Integer, Hash)] Twilio::Token, response status code and response headers
    def create_token_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Tuple(Twilio::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_token(account_sid: account_sid, ttl: ttl)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TokensApi#create_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Token.from_json(body), status_code, headers)
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return nil
    def create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_token(account_sid: account_sid, ttl: ttl).execute(&block)
    end

    CREATE_TOKEN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_TOKEN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_TOKEN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TokensApi.create_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_TOKEN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_TOKEN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_TOKEN_PATTERN_FOR_ACCOUNT_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Tokens.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Ttl", ttl.to_s) if !ttl.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TokensApi.create_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
