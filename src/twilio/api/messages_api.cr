#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/list_media_response"
require "../models/list_message_response"
require "../models/message"
require "../models/message_enum_address_retention"
require "../models/message_enum_schedule_type"
require "../models/message_enum_update_status"
require "../models/message_feedback_enum_outcome"
require "../models/message_media"
require "../models/message_message_feedback"

module Twilio
  class MessagesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return [Twilio::Message]
    def create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Twilio::Message
      data, _status_code, _headers = create_message_with_http_info(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period)
      data
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def create_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_message(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#create_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return nil
    def create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_message(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period).execute(&block)
    end

    CREATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_APPLICATION_SID       = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_APPLICATION_SID       = 34
    CREATE_MESSAGE_PATTERN_FOR_APPLICATION_SID          = /^AP[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_CONTENT_SID           = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_CONTENT_SID           = 34
    CREATE_MESSAGE_PATTERN_FOR_CONTENT_SID              = /^HX[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_MESSAGING_SERVICE_SID = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_MESSAGING_SERVICE_SID = 34
    CREATE_MESSAGE_PATTERN_FOR_MESSAGING_SERVICE_SID    = /^MG[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.create_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?

        unless (_address_retention = address_retention).nil?
          _address_retention.validate
        end
        unless (_application_sid = application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("application_sid", application_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("application_sid", application_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("application_sid", _application_sid, CREATE_MESSAGE_PATTERN_FOR_APPLICATION_SID)
        end

        unless (_content_retention = content_retention).nil?
          _content_retention.validate
        end
        unless (_content_sid = content_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("content_sid", content_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_CONTENT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("content_sid", content_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_CONTENT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("content_sid", _content_sid, CREATE_MESSAGE_PATTERN_FOR_CONTENT_SID)
        end

        unless (_messaging_service_sid = messaging_service_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("messaging_service_sid", messaging_service_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_MESSAGING_SERVICE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("messaging_service_sid", messaging_service_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_MESSAGING_SERVICE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("messaging_service_sid", _messaging_service_sid, CREATE_MESSAGE_PATTERN_FOR_MESSAGING_SERVICE_SID)
        end

        unless (_schedule_type = schedule_type).nil?
          _schedule_type.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressRetention", address_retention.to_s) if !address_retention.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApplicationSid", application_sid.to_s) if !application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Attempt", attempt.to_s) if !attempt.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Body", body.to_s) if !body.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentRetention", content_retention.to_s) if !content_retention.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentSid", content_sid.to_s) if !content_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentVariables", content_variables.to_s) if !content_variables.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ForceDelivery", force_delivery.to_s) if !force_delivery.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxPrice", max_price.to_s) if !max_price.nil?
      form_params.concat(@api_client.build_collection_param_tuples("MediaUrl", media_url, "multi")) if !media_url.nil? && !media_url.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("MessagingServiceSid", messaging_service_sid.to_s) if !messaging_service_sid.nil?
      form_params.concat(@api_client.build_collection_param_tuples("PersistentAction", persistent_action, "multi")) if !persistent_action.nil? && !persistent_action.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ProvideFeedback", provide_feedback.to_s) if !provide_feedback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ScheduleType", schedule_type.to_s) if !schedule_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendAsMms", send_as_mms.to_s) if !send_as_mms.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendAt", Time::Format::RFC_2822.format(send_at)) if !send_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ShortenUrls", shorten_urls.to_s) if !shorten_urls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmartEncoded", smart_encoded.to_s) if !smart_encoded.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ValidityPeriod", validity_period.to_s) if !validity_period.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "MessagesApi.create_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return [Twilio::MessageMessageFeedback]
    def create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Twilio::MessageMessageFeedback
      data, _status_code, _headers = create_message_feedback_with_http_info(account_sid: account_sid, message_sid: message_sid, outcome: outcome)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return [Tuple(Twilio::MessageMessageFeedback, Integer, Hash)] Twilio::MessageMessageFeedback, response status code and response headers
    def create_message_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Tuple(Twilio::MessageMessageFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_message_feedback(account_sid: account_sid, message_sid: message_sid, outcome: outcome)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#create_message_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::MessageMessageFeedback.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return nil
    def create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_message_feedback(account_sid: account_sid, message_sid: message_sid, outcome: outcome).execute(&block)
    end

    CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_MESSAGE_SID = 34
    CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_MESSAGE_SID = 34
    CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.create_message_feedback ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_MESSAGE_SID)
        end
        unless (_outcome = outcome).nil?
          _outcome.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Outcome", outcome.to_s) if !outcome.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "MessagesApi.create_message_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return [Nil]
    def delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_media_with_http_info(account_sid: account_sid, message_sid: message_sid, sid: sid)
      nil
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_media(account_sid: account_sid, message_sid: message_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#delete_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return nil
    def delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_media(account_sid: account_sid, message_sid: message_sid, sid: sid).execute(&block)
    end

    DELETE_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    DELETE_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    DELETE_MEDIA_MAX_LENGTH_FOR_SID         = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_SID         = 34
    DELETE_MEDIA_PATTERN_FOR_SID            = /^ME[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.delete_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, DELETE_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_MEDIA_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "MessagesApi.delete_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return [Nil]
    def delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_message_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_message(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#delete_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return nil
    def delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_message(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    DELETE_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    DELETE_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.delete_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_MESSAGE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "MessagesApi.delete_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return [Twilio::MessageMedia]
    def fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::MessageMedia
      data, _status_code, _headers = fetch_media_with_http_info(account_sid: account_sid, message_sid: message_sid, sid: sid)
      data
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return [Tuple(Twilio::MessageMedia, Integer, Hash)] Twilio::MessageMedia, response status code and response headers
    def fetch_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::MessageMedia, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_media(account_sid: account_sid, message_sid: message_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#fetch_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::MessageMedia.from_json(body), status_code, headers)
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return nil
    def fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_media(account_sid: account_sid, message_sid: message_sid, sid: sid).execute(&block)
    end

    FETCH_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    FETCH_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    FETCH_MEDIA_MAX_LENGTH_FOR_SID         = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_SID         = 34
    FETCH_MEDIA_PATTERN_FOR_SID            = /^ME[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.fetch_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, FETCH_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_MEDIA_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "MessagesApi.fetch_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return [Twilio::Message]
    def fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Message
      data, _status_code, _headers = fetch_message_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def fetch_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_message(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#fetch_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return nil
    def fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_message(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    FETCH_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    FETCH_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.fetch_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_MESSAGE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "MessagesApi.fetch_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMediaResponse]
    def list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMediaResponse
      data, _status_code, _headers = list_media_with_http_info(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMediaResponse, Integer, Hash)] Twilio::ListMediaResponse, response status code and response headers
    def list_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMediaResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_media(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#list_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMediaResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_media(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    LIST_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    LIST_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    LIST_MEDIA_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MEDIA_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.list_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, LIST_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, LIST_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, LIST_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MEDIA_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MEDIA_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::RFC_2822.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::RFC_2822.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::RFC_2822.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "MessagesApi.list_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMessageResponse]
    def list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMessageResponse
      data, _status_code, _headers = list_message_with_http_info(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size)
      data
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMessageResponse, Integer, Hash)] Twilio::ListMessageResponse, response status code and response headers
    def list_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMessageResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_message(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#list_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMessageResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_message(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size).execute(&block)
    end

    LIST_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MESSAGE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MESSAGE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.list_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MESSAGE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MESSAGE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["To"] = to.to_s if !to.nil?
      query_params["From"] = from.to_s if !from.nil?
      query_params["DateSent"] = Time::Format::RFC_2822.format(date_sent) if !date_sent.nil?
      query_params["DateSent<"] = Time::Format::RFC_2822.format(date_sent_before) if !date_sent_before.nil?
      query_params["DateSent>"] = Time::Format::RFC_2822.format(date_sent_after) if !date_sent_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "MessagesApi.list_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return [Twilio::Message]
    def update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Twilio::Message
      data, _status_code, _headers = update_message_with_http_info(account_sid: account_sid, sid: sid, body: body, status: status)
      data
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def update_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_message(account_sid: account_sid, sid: sid, body: body, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: MessagesApi#update_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return nil
    def update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_message(account_sid: account_sid, sid: sid, body: body, status: status).execute(&block)
    end

    UPDATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    UPDATE_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    UPDATE_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: MessagesApi.update_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_MESSAGE_PATTERN_FOR_SID)
        end

        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Body", body.to_s) if !body.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "MessagesApi.update_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
