#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/call"
require "../models/call_call_feedback"
require "../models/call_call_feedback_summary"
require "../models/call_call_notification_instance"
require "../models/call_call_recording"
require "../models/call_enum_status"
require "../models/call_enum_update_status"
require "../models/call_feedback_enum_issues"
require "../models/call_payments"
require "../models/call_recording_enum_status"
require "../models/call_siprec"
require "../models/call_stream"
require "../models/call_user_defined_message"
require "../models/call_user_defined_message_subscription"
require "../models/http_method"

require "../models/list_call_event_response"
require "../models/list_call_notification_response"
require "../models/list_call_recording_response"
require "../models/list_call_response"
require "../models/payments_enum_bank_account_type"
require "../models/payments_enum_capture"
require "../models/payments_enum_payment_method"
require "../models/payments_enum_status"
require "../models/payments_enum_token_type"
require "../models/siprec_enum_update_status"

module Twilio
  class CallsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Twilio::Call]
    def create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = create_call_with_http_info(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url)
      data
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def create_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return nil
    def create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url).execute(&block)
    end

    CREATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID     = 34
    CREATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID     = 34
    CREATE_CALL_PATTERN_FOR_ACCOUNT_SID        = /^AC[0-9a-fA-F]{32}$/
    CREATE_CALL_MAX_LENGTH_FOR_APPLICATION_SID = 34
    CREATE_CALL_MIN_LENGTH_FOR_APPLICATION_SID = 34
    CREATE_CALL_PATTERN_FOR_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/
    CREATE_CALL_MAX_LENGTH_FOR_BYOC            = 34
    CREATE_CALL_MIN_LENGTH_FOR_BYOC            = 34
    CREATE_CALL_PATTERN_FOR_BYOC               = /^BY[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_call ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"from\" is required and cannot be null") if from.nil?

        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?

        unless (_application_sid = application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("application_sid", application_sid.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("application_sid", application_sid.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("application_sid", _application_sid, CREATE_CALL_PATTERN_FOR_APPLICATION_SID)
        end

        unless (_async_amd_status_callback_method = async_amd_status_callback_method).nil?
          _async_amd_status_callback_method.validate
        end
        unless (_byoc = byoc).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc", byoc.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_min_length("byoc", byoc.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_pattern("byoc", _byoc, CREATE_CALL_PATTERN_FOR_BYOC)
        end

        unless (_fallback_method = fallback_method).nil?
          _fallback_method.validate
        end

        unless (_method = method).nil?
          _method.validate
        end

        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApplicationSid", application_sid.to_s) if !application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmd", async_amd.to_s) if !async_amd.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmdStatusCallback", async_amd_status_callback.to_s) if !async_amd_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmdStatusCallbackMethod", async_amd_status_callback_method.to_s) if !async_amd_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Byoc", byoc.to_s) if !byoc.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallReason", call_reason.to_s) if !call_reason.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallToken", call_token.to_s) if !call_token.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallerId", caller_id.to_s) if !caller_id.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackMethod", fallback_method.to_s) if !fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackUrl", fallback_url.to_s) if !fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetection", machine_detection.to_s) if !machine_detection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSilenceTimeout", machine_detection_silence_timeout.to_s) if !machine_detection_silence_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechEndThreshold", machine_detection_speech_end_threshold.to_s) if !machine_detection_speech_end_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechThreshold", machine_detection_speech_threshold.to_s) if !machine_detection_speech_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionTimeout", machine_detection_timeout.to_s) if !machine_detection_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Record", record.to_s) if !record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendDigits", send_digits.to_s) if !send_digits.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthPassword", sip_auth_password.to_s) if !sip_auth_password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthUsername", sip_auth_username.to_s) if !sip_auth_username.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("StatusCallbackEvent", status_callback_event, "multi")) if !status_callback_event.nil? && !status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Trim", trim.to_s) if !trim.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Twiml", twiml.to_s) if !twiml.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Twilio::CallCallFeedbackSummary]
    def create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Twilio::CallCallFeedbackSummary
      data, _status_code, _headers = create_call_feedback_summary_with_http_info(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method)
      data
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::CallCallFeedbackSummary, Integer, Hash)] Twilio::CallCallFeedbackSummary, response status code and response headers
    def create_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::CallCallFeedbackSummary, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call_feedback_summary(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedbackSummary.from_json(body), status_code, headers)
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return nil
    def create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call_feedback_summary(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method).execute(&block)
    end

    CREATE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_call_feedback_summary ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"end_date\" is required and cannot be null") if end_date.nil?

        raise ArgumentError.new("\"start_date\" is required and cannot be null") if start_date.nil?

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("EndDate", Time::Format::ISO_8601_DATE.format(end_date)) if !end_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IncludeSubaccounts", include_subaccounts.to_s) if !include_subaccounts.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StartDate", Time::Format::ISO_8601_DATE.format(start_date)) if !start_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return [Twilio::CallCallRecording]
    def create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = create_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim)
      data
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def create_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call_recording(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return nil
    def create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call_recording(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim).execute(&block)
    end

    CREATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_call_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end

        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Trim", trim.to_s) if !trim.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return [Twilio::CallPayments]
    def create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Twilio::CallPayments
      data, _status_code, _headers = create_payments_with_http_info(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types)
      data
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return [Tuple(Twilio::CallPayments, Integer, Hash)] Twilio::CallPayments, response status code and response headers
    def create_payments_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Tuple(Twilio::CallPayments, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_payments(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallPayments.from_json(body), status_code, headers)
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return nil
    def create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_payments(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types).execute(&block)
    end

    CREATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_PAYMENTS_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_payments ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_PAYMENTS_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if idempotency_key.nil?

        raise ArgumentError.new("\"status_callback\" is required and cannot be null") if status_callback.nil?

        unless (_bank_account_type = bank_account_type).nil?
          _bank_account_type.validate
        end

        unless (_payment_method = payment_method).nil?
          _payment_method.validate
        end

        unless (_token_type = token_type).nil?
          _token_type.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("BankAccountType", bank_account_type.to_s) if !bank_account_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ChargeAmount", charge_amount.to_s) if !charge_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Input", input.to_s) if !input.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MinPostalCodeLength", min_postal_code_length.to_s) if !min_postal_code_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Parameter", parameter.to_s) if !parameter.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PaymentConnector", payment_connector.to_s) if !payment_connector.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PaymentMethod", payment_method.to_s) if !payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SecurityCode", security_code.to_s) if !security_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TokenType", token_type.to_s) if !token_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ValidCardTypes", valid_card_types.to_s) if !valid_card_types.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return [Twilio::CallUserDefinedMessage]
    def create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Twilio::CallUserDefinedMessage
      data, _status_code, _headers = create_user_defined_message_with_http_info(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key)
      data
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return [Tuple(Twilio::CallUserDefinedMessage, Integer, Hash)] Twilio::CallUserDefinedMessage, response status code and response headers
    def create_user_defined_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Tuple(Twilio::CallUserDefinedMessage, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_user_defined_message(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_user_defined_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallUserDefinedMessage.from_json(body), status_code, headers)
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return nil
    def create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_user_defined_message(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key).execute(&block)
    end

    CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_user_defined_message ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"content\" is required and cannot be null") if content.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Content", content.to_s) if !content.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_user_defined_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Twilio::CallUserDefinedMessageSubscription]
    def create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Twilio::CallUserDefinedMessageSubscription
      data, _status_code, _headers = create_user_defined_message_subscription_with_http_info(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method)
      data
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::CallUserDefinedMessageSubscription, Integer, Hash)] Twilio::CallUserDefinedMessageSubscription, response status code and response headers
    def create_user_defined_message_subscription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::CallUserDefinedMessageSubscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#create_user_defined_message_subscription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallUserDefinedMessageSubscription.from_json(body), status_code, headers)
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return nil
    def create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method).execute(&block)
    end

    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.create_user_defined_message_subscription ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"callback\" is required and cannot be null") if callback.nil?

        unless (_method = method).nil?
          _method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Callback", callback.to_s) if !callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.create_user_defined_message_subscription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return [Nil]
    def delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_call_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#delete_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return nil
    def delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.delete_call ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CallsApi.delete_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Nil]
    def delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_call_feedback_summary_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call_feedback_summary(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#delete_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return nil
    def delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call_feedback_summary(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID            = /^FS[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.delete_call_feedback_summary ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CallsApi.delete_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Nil]
    def delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#delete_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return nil
    def delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.delete_call_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, DELETE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CallsApi.delete_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return [Nil]
    def delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_user_defined_message_subscription_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      nil
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_user_defined_message_subscription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#delete_user_defined_message_subscription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return nil
    def delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID    = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID    = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_SID         = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_SID         = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_SID            = /^ZY[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.delete_user_defined_message_subscription ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CallsApi.delete_user_defined_message_subscription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return [Twilio::Call]
    def fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = fetch_call_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def fetch_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#fetch_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return nil
    def fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.fetch_call ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.fetch_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return [Twilio::CallCallFeedback]
    def fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Twilio::CallCallFeedback
      data, _status_code, _headers = fetch_call_feedback_with_http_info(account_sid: account_sid, call_sid: call_sid)
      data
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return [Tuple(Twilio::CallCallFeedback, Integer, Hash)] Twilio::CallCallFeedback, response status code and response headers
    def fetch_call_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Tuple(Twilio::CallCallFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_feedback(account_sid: account_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#fetch_call_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedback.from_json(body), status_code, headers)
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return nil
    def fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_feedback(account_sid: account_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_FEEDBACK_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.fetch_call_feedback ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_FEEDBACK_PATTERN_FOR_CALL_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.fetch_call_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Twilio::CallCallFeedbackSummary]
    def fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::CallCallFeedbackSummary
      data, _status_code, _headers = fetch_call_feedback_summary_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Tuple(Twilio::CallCallFeedbackSummary, Integer, Hash)] Twilio::CallCallFeedbackSummary, response status code and response headers
    def fetch_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallFeedbackSummary, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_feedback_summary(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#fetch_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedbackSummary.from_json(body), status_code, headers)
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return nil
    def fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_feedback_summary(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID            = /^FS[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.fetch_call_feedback_summary ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.fetch_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return [Twilio::CallCallNotificationInstance]
    def fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::CallCallNotificationInstance
      data, _status_code, _headers = fetch_call_notification_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return [Tuple(Twilio::CallCallNotificationInstance, Integer, Hash)] Twilio::CallCallNotificationInstance, response status code and response headers
    def fetch_call_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallNotificationInstance, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_notification(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#fetch_call_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallNotificationInstance.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return nil
    def fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_notification(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_SID            = /^NO[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.fetch_call_notification ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.fetch_call_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return [Twilio::CallCallRecording]
    def fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = fetch_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      data
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def fetch_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#fetch_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return nil
    def fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.fetch_call_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.fetch_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallResponse]
    def list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallResponse
      data, _status_code, _headers = list_call_with_http_info(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size)
      data
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallResponse, Integer, Hash)] Twilio::ListCallResponse, response status code and response headers
    def list_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#list_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallResponse.from_json(body), status_code, headers)
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_MAX_LENGTH_FOR_ACCOUNT_SID     = 34
    LIST_CALL_MIN_LENGTH_FOR_ACCOUNT_SID     = 34
    LIST_CALL_PATTERN_FOR_ACCOUNT_SID        = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_MAX_LENGTH_FOR_PARENT_CALL_SID = 34
    LIST_CALL_MIN_LENGTH_FOR_PARENT_CALL_SID = 34
    LIST_CALL_PATTERN_FOR_PARENT_CALL_SID    = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_MAX_FOR_PAGE_SIZE              = Int32.new("1000")
    LIST_CALL_MIN_FOR_PAGE_SIZE              = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.list_call ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_parent_call_sid = parent_call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("parent_call_sid", parent_call_sid.to_s.size, LIST_CALL_MAX_LENGTH_FOR_PARENT_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("parent_call_sid", parent_call_sid.to_s.size, LIST_CALL_MIN_LENGTH_FOR_PARENT_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("parent_call_sid", _parent_call_sid, LIST_CALL_PATTERN_FOR_PARENT_CALL_SID)
        end
        unless (_status = status).nil?
          _status.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["To"] = to.to_s if !to.nil?
      query_params["From"] = from.to_s if !from.nil?
      query_params["ParentCallSid"] = parent_call_sid.to_s if !parent_call_sid.nil?
      query_params["Status"] = status.to_s if !status.nil?
      query_params["StartTime"] = Time::Format::RFC_2822.format(start_time) if !start_time.nil?
      query_params["StartTime<"] = Time::Format::RFC_2822.format(start_time_before) if !start_time_before.nil?
      query_params["StartTime>"] = Time::Format::RFC_2822.format(start_time_after) if !start_time_after.nil?
      query_params["EndTime"] = Time::Format::RFC_2822.format(end_time) if !end_time.nil?
      query_params["EndTime<"] = Time::Format::RFC_2822.format(end_time_before) if !end_time_before.nil?
      query_params["EndTime>"] = Time::Format::RFC_2822.format(end_time_after) if !end_time_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.list_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallEventResponse]
    def list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallEventResponse
      data, _status_code, _headers = list_call_event_with_http_info(account_sid: account_sid, call_sid: call_sid, page_size: page_size)
      data
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallEventResponse, Integer, Hash)] Twilio::ListCallEventResponse, response status code and response headers
    def list_call_event_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallEventResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_event(account_sid: account_sid, call_sid: call_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#list_call_event\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallEventResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_event(account_sid: account_sid, call_sid: call_sid, page_size: page_size).execute(&block)
    end

    LIST_CALL_EVENT_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_EVENT_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_EVENT_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_EVENT_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_EVENT_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_EVENT_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_EVENT_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_EVENT_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.list_call_event ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_EVENT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_EVENT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_EVENT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_EVENT_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_EVENT_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_EVENT_PATTERN_FOR_CALL_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_EVENT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_EVENT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.list_call_event",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallNotificationResponse]
    def list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallNotificationResponse
      data, _status_code, _headers = list_call_notification_with_http_info(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallNotificationResponse, Integer, Hash)] Twilio::ListCallNotificationResponse, response status code and response headers
    def list_call_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallNotificationResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_notification(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#list_call_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallNotificationResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_notification(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_NOTIFICATION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_NOTIFICATION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.list_call_notification ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_NOTIFICATION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_NOTIFICATION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Log"] = log.to_s if !log.nil?
      query_params["MessageDate"] = Time::Format::ISO_8601_DATE.format(message_date) if !message_date.nil?
      query_params["MessageDate<"] = Time::Format::ISO_8601_DATE.format(message_date_before) if !message_date_before.nil?
      query_params["MessageDate>"] = Time::Format::ISO_8601_DATE.format(message_date_after) if !message_date_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.list_call_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallRecordingResponse]
    def list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallRecordingResponse
      data, _status_code, _headers = list_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallRecordingResponse, Integer, Hash)] Twilio::ListCallRecordingResponse, response status code and response headers
    def list_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_recording(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#list_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_recording(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_RECORDING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_RECORDING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.list_call_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CallsApi.list_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Twilio::Call]
    def update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = update_call_with_http_info(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url)
      data
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def update_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return nil
    def update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url).execute(&block)
    end

    UPDATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CALL_MAX_LENGTH_FOR_SID         = 34
    UPDATE_CALL_MIN_LENGTH_FOR_SID         = 34
    UPDATE_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_call ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_CALL_PATTERN_FOR_SID)
        end
        unless (_fallback_method = fallback_method).nil?
          _fallback_method.validate
        end

        unless (_method = method).nil?
          _method.validate
        end
        unless (_status = status).nil?
          _status.validate
        end

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackMethod", fallback_method.to_s) if !fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackUrl", fallback_url.to_s) if !fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Twiml", twiml.to_s) if !twiml.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return [Twilio::CallCallFeedback]
    def update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Twilio::CallCallFeedback
      data, _status_code, _headers = update_call_feedback_with_http_info(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score)
      data
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return [Tuple(Twilio::CallCallFeedback, Integer, Hash)] Twilio::CallCallFeedback, response status code and response headers
    def update_call_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Tuple(Twilio::CallCallFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call_feedback(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_call_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedback.from_json(body), status_code, headers)
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return nil
    def update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call_feedback(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score).execute(&block)
    end

    UPDATE_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_call_feedback ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(@api_client.build_collection_param_tuples("Issue", issue, "multi")) if !issue.nil? && !issue.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("QualityScore", quality_score.to_s) if !quality_score.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_call_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Twilio::CallCallRecording]
    def update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = update_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior)
      data
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def update_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return nil
    def update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior).execute(&block)
    end

    UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_call_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?

        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("PauseBehavior", pause_behavior.to_s) if !pause_behavior.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return [Twilio::CallPayments]
    def update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Twilio::CallPayments
      data, _status_code, _headers = update_payments_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status)
      data
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return [Tuple(Twilio::CallPayments, Integer, Hash)] Twilio::CallPayments, response status code and response headers
    def update_payments_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Tuple(Twilio::CallPayments, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_payments(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallPayments.from_json(body), status_code, headers)
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return nil
    def update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_payments(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status).execute(&block)
    end

    UPDATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_PAYMENTS_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    UPDATE_PAYMENTS_MAX_LENGTH_FOR_SID         = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_SID         = 34
    UPDATE_PAYMENTS_PATTERN_FOR_SID            = /^PK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_payments ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_PAYMENTS_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_PAYMENTS_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if idempotency_key.nil?

        raise ArgumentError.new("\"status_callback\" is required and cannot be null") if status_callback.nil?

        unless (_capture = capture).nil?
          _capture.validate
        end
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Capture", capture.to_s) if !capture.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Stop a Siprec using either the SID of the Siprec resource or the `name` used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Twilio::CallSiprec]
    def update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Twilio::CallSiprec
      data, _status_code, _headers = update_siprec_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)
      data
    end

    # Stop a Siprec using either the SID of the Siprec resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Tuple(Twilio::CallSiprec, Integer, Hash)] Twilio::CallSiprec, response status code and response headers
    def update_siprec_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Tuple(Twilio::CallSiprec, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_siprec(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_siprec\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallSiprec.from_json(body), status_code, headers)
    end

    # Stop a Siprec using either the SID of the Siprec resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return nil
    def update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_siprec(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status).execute(&block)
    end

    UPDATE_SIPREC_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIPREC_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIPREC_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIPREC_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_SIPREC_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_SIPREC_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_siprec ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIPREC_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIPREC_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIPREC_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_SIPREC_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_SIPREC_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_SIPREC_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?

        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_siprec",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Stop a Stream using either the SID of the Stream resource or the `name` used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Twilio::CallStream]
    def update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Twilio::CallStream
      data, _status_code, _headers = update_stream_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)
      data
    end

    # Stop a Stream using either the SID of the Stream resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Tuple(Twilio::CallStream, Integer, Hash)] Twilio::CallStream, response status code and response headers
    def update_stream_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Tuple(Twilio::CallStream, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_stream(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: CallsApi#update_stream\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallStream.from_json(body), status_code, headers)
    end

    # Stop a Stream using either the SID of the Stream resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return nil
    def update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_stream(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status).execute(&block)
    end

    UPDATE_STREAM_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_STREAM_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_STREAM_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_STREAM_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_STREAM_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_STREAM_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: CallsApi.update_stream ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_STREAM_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_STREAM_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_STREAM_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_STREAM_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_STREAM_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_STREAM_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?

        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CallsApi.update_stream",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
