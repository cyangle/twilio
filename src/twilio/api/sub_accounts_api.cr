#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/account"
require "../models/account_enum_status"

module Twilio
  class SubAccountsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return [Twilio::Account]
    def fetch_account(
      *,
      sid : String? = nil
    ) : Twilio::Account
      data, _status_code, _headers = fetch_account_with_http_info(sid: sid)
      data
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return [Tuple(Twilio::Account, Integer, Hash)] Twilio::Account, response status code and response headers
    def fetch_account_with_http_info(
      *,
      sid : String? = nil
    ) : Tuple(Twilio::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_account(sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubAccountsApi#fetch_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Account.from_json(body), status_code, headers)
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return nil
    def fetch_account(
      *,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_account(sid: sid).execute(&block)
    end

    FETCH_ACCOUNT_MAX_LENGTH_FOR_SID = 34
    FETCH_ACCOUNT_MIN_LENGTH_FOR_SID = 34
    FETCH_ACCOUNT_PATTERN_FOR_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_account(
      *,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubAccountsApi.fetch_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_ACCOUNT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_ACCOUNT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_ACCOUNT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{Sid}.json".sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubAccountsApi.fetch_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return [Twilio::Account]
    def update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Twilio::Account
      data, _status_code, _headers = update_account_with_http_info(sid: sid, friendly_name: friendly_name, status: status)
      data
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return [Tuple(Twilio::Account, Integer, Hash)] Twilio::Account, response status code and response headers
    def update_account_with_http_info(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Tuple(Twilio::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_account(sid: sid, friendly_name: friendly_name, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: SubAccountsApi#update_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Account.from_json(body), status_code, headers)
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return nil
    def update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_account(sid: sid, friendly_name: friendly_name, status: status).execute(&block)
    end

    UPDATE_ACCOUNT_MAX_LENGTH_FOR_SID = 34
    UPDATE_ACCOUNT_MIN_LENGTH_FOR_SID = 34
    UPDATE_ACCOUNT_PATTERN_FOR_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: SubAccountsApi.update_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_ACCOUNT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_ACCOUNT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_ACCOUNT_PATTERN_FOR_SID)
        end

        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{Sid}.json".sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubAccountsApi.update_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
