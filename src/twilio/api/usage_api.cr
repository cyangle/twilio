#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/http_method"

require "../models/list_usage_record_all_time_response"
require "../models/list_usage_record_daily_response"
require "../models/list_usage_record_last_month_response"
require "../models/list_usage_record_monthly_response"
require "../models/list_usage_record_response"
require "../models/list_usage_record_this_month_response"
require "../models/list_usage_record_today_response"
require "../models/list_usage_record_yearly_response"
require "../models/list_usage_record_yesterday_response"
require "../models/list_usage_trigger_response"
require "../models/usage_record_enum_category"
require "../models/usage_trigger_enum_recurring"
require "../models/usage_trigger_enum_trigger_field"
require "../models/usage_usage_trigger"

module Twilio
  class UsageApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return [Twilio::UsageUsageTrigger]
    def create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = create_usage_trigger_with_http_info(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by)
      data
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def create_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_usage_trigger(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#create_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return nil
    def create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_usage_trigger(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by).execute(&block)
    end

    CREATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.create_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"callback_url\" is required and cannot be null") if callback_url.nil?

        raise ArgumentError.new("\"trigger_value\" is required and cannot be null") if trigger_value.nil?

        raise ArgumentError.new("\"usage_category\" is required and cannot be null") if usage_category.nil?
        unless (_usage_category = usage_category).nil?
          _usage_category.validate
        end
        unless (_callback_method = callback_method).nil?
          _callback_method.validate
        end

        unless (_recurring = recurring).nil?
          _recurring.validate
        end
        unless (_trigger_by = trigger_by).nil?
          _trigger_by.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackMethod", callback_method.to_s) if !callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackUrl", callback_url.to_s) if !callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Recurring", recurring.to_s) if !recurring.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TriggerBy", trigger_by.to_s) if !trigger_by.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TriggerValue", trigger_value.to_s) if !trigger_value.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("UsageCategory", usage_category.to_s) if !usage_category.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "UsageApi.create_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return [Nil]
    def delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_usage_trigger_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_usage_trigger(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#delete_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return nil
    def delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_usage_trigger(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    DELETE_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.delete_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "UsageApi.delete_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return [Twilio::UsageUsageTrigger]
    def fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = fetch_usage_trigger_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def fetch_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_usage_trigger(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#fetch_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return nil
    def fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_usage_trigger(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    FETCH_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.fetch_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.fetch_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordResponse]
    def list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordResponse
      data, _status_code, _headers = list_usage_record_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordResponse, Integer, Hash)] Twilio::ListUsageRecordResponse, response status code and response headers
    def list_usage_record_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordAllTimeResponse]
    def list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordAllTimeResponse
      data, _status_code, _headers = list_usage_record_all_time_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordAllTimeResponse, Integer, Hash)] Twilio::ListUsageRecordAllTimeResponse, response status code and response headers
    def list_usage_record_all_time_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordAllTimeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_all_time(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_all_time\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordAllTimeResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_all_time(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_ALL_TIME_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_ALL_TIME_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_ALL_TIME_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_ALL_TIME_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_ALL_TIME_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_all_time ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_ALL_TIME_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_ALL_TIME_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_ALL_TIME_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_ALL_TIME_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_ALL_TIME_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_all_time",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordDailyResponse]
    def list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordDailyResponse
      data, _status_code, _headers = list_usage_record_daily_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordDailyResponse, Integer, Hash)] Twilio::ListUsageRecordDailyResponse, response status code and response headers
    def list_usage_record_daily_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordDailyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_daily(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_daily\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordDailyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_daily(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_DAILY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_DAILY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_DAILY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_DAILY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_DAILY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_daily ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_DAILY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_DAILY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_DAILY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_DAILY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_DAILY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_daily",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordLastMonthResponse]
    def list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordLastMonthResponse
      data, _status_code, _headers = list_usage_record_last_month_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordLastMonthResponse, Integer, Hash)] Twilio::ListUsageRecordLastMonthResponse, response status code and response headers
    def list_usage_record_last_month_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordLastMonthResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_last_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_last_month\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordLastMonthResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_last_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_LAST_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_LAST_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_LAST_MONTH_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_LAST_MONTH_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_LAST_MONTH_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_last_month ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_LAST_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_LAST_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_LAST_MONTH_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_LAST_MONTH_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_LAST_MONTH_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_last_month",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordMonthlyResponse]
    def list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordMonthlyResponse
      data, _status_code, _headers = list_usage_record_monthly_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordMonthlyResponse, Integer, Hash)] Twilio::ListUsageRecordMonthlyResponse, response status code and response headers
    def list_usage_record_monthly_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordMonthlyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_monthly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_monthly\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordMonthlyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_monthly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_MONTHLY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MONTHLY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MONTHLY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_MONTHLY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_MONTHLY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_monthly ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MONTHLY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MONTHLY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_MONTHLY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_MONTHLY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_MONTHLY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_monthly",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordThisMonthResponse]
    def list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordThisMonthResponse
      data, _status_code, _headers = list_usage_record_this_month_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordThisMonthResponse, Integer, Hash)] Twilio::ListUsageRecordThisMonthResponse, response status code and response headers
    def list_usage_record_this_month_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordThisMonthResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_this_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_this_month\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordThisMonthResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_this_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_THIS_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_THIS_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_THIS_MONTH_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_THIS_MONTH_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_THIS_MONTH_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_this_month ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_THIS_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_THIS_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_THIS_MONTH_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_THIS_MONTH_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_THIS_MONTH_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_this_month",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordTodayResponse]
    def list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordTodayResponse
      data, _status_code, _headers = list_usage_record_today_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordTodayResponse, Integer, Hash)] Twilio::ListUsageRecordTodayResponse, response status code and response headers
    def list_usage_record_today_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordTodayResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_today(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_today\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordTodayResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_today(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_TODAY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_TODAY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_TODAY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_TODAY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_TODAY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_today ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_TODAY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_TODAY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_TODAY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_TODAY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_TODAY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_today",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordYearlyResponse]
    def list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordYearlyResponse
      data, _status_code, _headers = list_usage_record_yearly_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordYearlyResponse, Integer, Hash)] Twilio::ListUsageRecordYearlyResponse, response status code and response headers
    def list_usage_record_yearly_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordYearlyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_yearly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_yearly\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordYearlyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_yearly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_YEARLY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YEARLY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YEARLY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_YEARLY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_YEARLY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_yearly ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YEARLY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YEARLY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_YEARLY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_YEARLY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_YEARLY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_yearly",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordYesterdayResponse]
    def list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordYesterdayResponse
      data, _status_code, _headers = list_usage_record_yesterday_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordYesterdayResponse, Integer, Hash)] Twilio::ListUsageRecordYesterdayResponse, response status code and response headers
    def list_usage_record_yesterday_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordYesterdayResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_yesterday(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_record_yesterday\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordYesterdayResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_yesterday(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_YESTERDAY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YESTERDAY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YESTERDAY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_YESTERDAY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_YESTERDAY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_record_yesterday ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YESTERDAY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YESTERDAY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_YESTERDAY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_YESTERDAY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_YESTERDAY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_record_yesterday",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageTriggerResponse]
    def list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageTriggerResponse
      data, _status_code, _headers = list_usage_trigger_with_http_info(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size)
      data
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageTriggerResponse, Integer, Hash)] Twilio::ListUsageTriggerResponse, response status code and response headers
    def list_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageTriggerResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_trigger(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#list_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageTriggerResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_trigger(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size).execute(&block)
    end

    LIST_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_TRIGGER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_TRIGGER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.list_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_recurring = recurring).nil?
          _recurring.validate
        end
        unless (_trigger_by = trigger_by).nil?
          _trigger_by.validate
        end
        unless (_usage_category = usage_category).nil?
          _usage_category.validate
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_TRIGGER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_TRIGGER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Recurring"] = recurring.to_s if !recurring.nil?
      query_params["TriggerBy"] = trigger_by.to_s if !trigger_by.nil?
      query_params["UsageCategory"] = usage_category.to_s if !usage_category.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "UsageApi.list_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::UsageUsageTrigger]
    def update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = update_usage_trigger_with_http_info(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name)
      data
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def update_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_usage_trigger(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: UsageApi#update_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_usage_trigger(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    UPDATE_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: UsageApi.update_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
        unless (_callback_method = callback_method).nil?
          _callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackMethod", callback_method.to_s) if !callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackUrl", callback_url.to_s) if !callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "UsageApi.update_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
