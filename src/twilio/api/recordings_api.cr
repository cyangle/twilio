#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/list_recording_add_on_result_payload_response"
require "../models/list_recording_add_on_result_response"
require "../models/list_recording_response"
require "../models/list_recording_transcription_response"
require "../models/recording"
require "../models/recording_recording_add_on_result"
require "../models/recording_recording_add_on_result_recording_add_on_result_payload"
require "../models/transcription"

module Twilio
  class RecordingsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Nil]
    def delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_recording_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#delete_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return nil
    def delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_MAX_LENGTH_FOR_SID         = 34
    DELETE_RECORDING_MIN_LENGTH_FOR_SID         = 34
    DELETE_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.delete_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RecordingsApi.delete_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return [Nil]
    def delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, sid: sid)
      nil
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#delete_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return nil
    def delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID              = /^XR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.delete_recording_add_on_result ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RecordingsApi.delete_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return [Nil]
    def delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)
      nil
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#delete_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return nil
    def delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID               = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID               = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID                  = /^XH[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.delete_recording_add_on_result_payload ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RecordingsApi.delete_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Nil]
    def delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#delete_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return nil
    def delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID              = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.delete_recording_transcription ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "RecordingsApi.delete_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return [Twilio::Recording]
    def fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Twilio::Recording
      data, _status_code, _headers = fetch_recording_with_http_info(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted)
      data
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return [Tuple(Twilio::Recording, Integer, Hash)] Twilio::Recording, response status code and response headers
    def fetch_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Tuple(Twilio::Recording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#fetch_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Recording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return nil
    def fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted).execute(&block)
    end

    FETCH_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_MAX_LENGTH_FOR_SID         = 34
    FETCH_RECORDING_MIN_LENGTH_FOR_SID         = 34
    FETCH_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.fetch_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["IncludeSoftDeleted"] = include_soft_deleted.to_s if !include_soft_deleted.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.fetch_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return [Twilio::RecordingRecordingAddOnResult]
    def fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::RecordingRecordingAddOnResult
      data, _status_code, _headers = fetch_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, sid: sid)
      data
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return [Tuple(Twilio::RecordingRecordingAddOnResult, Integer, Hash)] Twilio::RecordingRecordingAddOnResult, response status code and response headers
    def fetch_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::RecordingRecordingAddOnResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#fetch_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::RecordingRecordingAddOnResult.from_json(body), status_code, headers)
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return nil
    def fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID              = /^XR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.fetch_recording_add_on_result ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.fetch_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return [Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload]
    def fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload
      data, _status_code, _headers = fetch_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)
      data
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return [Tuple(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, Integer, Hash)] Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, response status code and response headers
    def fetch_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#fetch_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload.from_json(body), status_code, headers)
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return nil
    def fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID               = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID               = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID                  = /^XH[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.fetch_recording_add_on_result_payload ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.fetch_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Twilio::Transcription]
    def fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::Transcription
      data, _status_code, _headers = fetch_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Tuple(Twilio::Transcription, Integer, Hash)] Twilio::Transcription, response status code and response headers
    def fetch_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::Transcription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#fetch_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Transcription.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return nil
    def fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID              = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.fetch_recording_transcription ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.fetch_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingResponse]
    def list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingResponse
      data, _status_code, _headers = list_recording_with_http_info(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingResponse, Integer, Hash)] Twilio::ListRecordingResponse, response status code and response headers
    def list_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#list_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_LENGTH_FOR_CALL_SID       = 34
    LIST_RECORDING_MIN_LENGTH_FOR_CALL_SID       = 34
    LIST_RECORDING_PATTERN_FOR_CALL_SID          = /^CA[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_RECORDING_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.list_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_RECORDING_PATTERN_FOR_CALL_SID)
        end
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::RFC_2822.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::RFC_2822.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::RFC_2822.format(date_created_after) if !date_created_after.nil?
      query_params["CallSid"] = call_sid.to_s if !call_sid.nil?
      query_params["ConferenceSid"] = conference_sid.to_s if !conference_sid.nil?
      query_params["IncludeSoftDeleted"] = include_soft_deleted.to_s if !include_soft_deleted.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.list_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingAddOnResultResponse]
    def list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingAddOnResultResponse
      data, _status_code, _headers = list_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size)
      data
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingAddOnResultResponse, Integer, Hash)] Twilio::ListRecordingAddOnResultResponse, response status code and response headers
    def list_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingAddOnResultResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#list_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingAddOnResultResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_MAX_FOR_PAGE_SIZE            = Int32.new("1000")
    LIST_RECORDING_ADD_ON_RESULT_MIN_FOR_PAGE_SIZE            = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.list_recording_add_on_result ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.list_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingAddOnResultPayloadResponse]
    def list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingAddOnResultPayloadResponse
      data, _status_code, _headers = list_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size)
      data
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingAddOnResultPayloadResponse, Integer, Hash)] Twilio::ListRecordingAddOnResultPayloadResponse, response status code and response headers
    def list_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingAddOnResultPayloadResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#list_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingAddOnResultPayloadResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_FOR_PAGE_SIZE                = Int32.new("1000")
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_FOR_PAGE_SIZE                = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.list_recording_add_on_result_payload ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.list_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingTranscriptionResponse]
    def list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingTranscriptionResponse
      data, _status_code, _headers = list_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingTranscriptionResponse, Integer, Hash)] Twilio::ListRecordingTranscriptionResponse, response status code and response headers
    def list_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingTranscriptionResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: RecordingsApi#list_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingTranscriptionResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_TRANSCRIPTION_MAX_FOR_PAGE_SIZE            = Int32.new("1000")
    LIST_RECORDING_TRANSCRIPTION_MIN_FOR_PAGE_SIZE            = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: RecordingsApi.list_recording_transcription ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_TRANSCRIPTION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_TRANSCRIPTION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "RecordingsApi.list_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
