#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/http_method"

require "../models/list_sip_auth_calls_credential_list_mapping_response"
require "../models/list_sip_auth_calls_ip_access_control_list_mapping_response"
require "../models/list_sip_auth_registrations_credential_list_mapping_response"
require "../models/list_sip_credential_list_mapping_response"
require "../models/list_sip_credential_list_response"
require "../models/list_sip_credential_response"
require "../models/list_sip_domain_response"
require "../models/list_sip_ip_access_control_list_mapping_response"
require "../models/list_sip_ip_access_control_list_response"
require "../models/list_sip_ip_address_response"
require "../models/sip_sip_credential_list"
require "../models/sip_sip_credential_list_sip_credential"
require "../models/sip_sip_domain"
require "../models/sip_sip_domain_sip_auth_sip_auth_calls_sip_auth_calls_credential_list_mapping"
require "../models/sip_sip_domain_sip_auth_sip_auth_calls_sip_auth_calls_ip_access_control_list_mapping"
require "../models/sip_sip_domain_sip_credential_list_mapping"
require "../models/sip_sip_domain_sip_ip_access_control_list_mapping"
require "../models/sip_sip_ip_access_control_list"
require "../models/sip_sip_ip_access_control_list_sip_ip_address"

module Twilio
  class SIPApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = create_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def create_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping]
    def create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
      data, _status_code, _headers = create_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)
      data
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, response status code and response headers
    def create_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID                    = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("IpAccessControlListSid", ip_access_control_list_sid.to_s) if !ip_access_control_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = create_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def create_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return [Twilio::SipSipCredentialListSipCredential]
    def create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = create_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username)
      data
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def create_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return nil
    def create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_credential ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"password\" is required and cannot be null") if password.nil?

        raise ArgumentError.new("\"username\" is required and cannot be null") if username.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Password", password.to_s) if !password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Username", username.to_s) if !username.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return [Twilio::SipSipCredentialList]
    def create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = create_sip_credential_list_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def create_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential_list(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return nil
    def create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential_list(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_credential_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipCredentialListMapping]
    def create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipCredentialListMapping
      data, _status_code, _headers = create_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipCredentialListMapping, response status code and response headers
    def create_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return [Twilio::SipSipDomain]
    def create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = create_sip_domain_with_http_info(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)
      data
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def create_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_domain(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return nil
    def create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_domain(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url).execute(&block)
    end

    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID             = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID          = /^BY[0-9a-fA-F]{32}$/
    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID    = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_name\" is required and cannot be null") if domain_name.nil?

        unless (_byoc_trunk_sid = byoc_trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("byoc_trunk_sid", _byoc_trunk_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID)
        end
        unless (_emergency_caller_sid = emergency_caller_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_caller_sid", emergency_caller_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_caller_sid", emergency_caller_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_caller_sid", _emergency_caller_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID)
        end

        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end

        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_status_callback_method = voice_status_callback_method).nil?
          _voice_status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ByocTrunkSid", byoc_trunk_sid.to_s) if !byoc_trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DomainName", domain_name.to_s) if !domain_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallerSid", emergency_caller_sid.to_s) if !emergency_caller_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallingEnabled", emergency_calling_enabled.to_s) if !emergency_calling_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Secure", secure.to_s) if !secure.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipRegistration", sip_registration.to_s) if !sip_registration.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackMethod", voice_status_callback_method.to_s) if !voice_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackUrl", voice_status_callback_url.to_s) if !voice_status_callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return [Twilio::SipSipIpAccessControlList]
    def create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = create_sip_ip_access_control_list_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def create_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_access_control_list(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return nil
    def create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_access_control_list(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_ip_access_control_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipIpAccessControlListMapping]
    def create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipIpAccessControlListMapping
      data, _status_code, _headers = create_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)
      data
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipIpAccessControlListMapping, response status code and response headers
    def create_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return nil
    def create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid).execute(&block)
    end

    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID                    = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("IpAccessControlListSid", ip_access_control_list_sid.to_s) if !ip_access_control_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = create_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length)
      data
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def create_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#create_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return nil
    def create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length).execute(&block)
    end

    CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.create_sip_ip_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?

        raise ArgumentError.new("\"ip_address\" is required and cannot be null") if ip_address.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CidrPrefixLength", cidr_prefix_length.to_s) if !cidr_prefix_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IpAddress", ip_address.to_s) if !ip_address.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.create_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return nil
    def delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return nil
    def delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return nil
    def delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return [Nil]
    def delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)
      nil
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return nil
    def delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_credential ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Nil]
    def delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return nil
    def delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_credential_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return [Nil]
    def delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_domain_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_domain(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return nil
    def delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_domain(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_DOMAIN_PATTERN_FOR_SID            = /^SD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_DOMAIN_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_access_control_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_access_control_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_ip_access_control_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)
      nil
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#delete_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.delete_sip_ip_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SIPApi.delete_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = fetch_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def fetch_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping]
    def fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
      data, _status_code, _headers = fetch_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, response status code and response headers
    def fetch_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = fetch_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def fetch_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return [Twilio::SipSipCredentialListSipCredential]
    def fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = fetch_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)
      data
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def fetch_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return nil
    def fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_credential ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Twilio::SipSipCredentialList]
    def fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = fetch_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def fetch_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return nil
    def fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_credential_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipDomainSipCredentialListMapping]
    def fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipCredentialListMapping
      data, _status_code, _headers = fetch_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipCredentialListMapping, response status code and response headers
    def fetch_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return [Twilio::SipSipDomain]
    def fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = fetch_sip_domain_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def fetch_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_domain(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return nil
    def fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_domain(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_DOMAIN_PATTERN_FOR_SID            = /^SD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_DOMAIN_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipIpAccessControlList]
    def fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = fetch_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def fetch_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_access_control_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_access_control_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_ip_access_control_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipDomainSipIpAccessControlListMapping]
    def fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipIpAccessControlListMapping
      data, _status_code, _headers = fetch_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipIpAccessControlListMapping, response status code and response headers
    def fetch_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = fetch_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)
      data
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def fetch_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#fetch_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return nil
    def fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.fetch_sip_ip_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.fetch_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthCallsCredentialListMappingResponse]
    def list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthCallsCredentialListMappingResponse
      data, _status_code, _headers = list_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthCallsCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipAuthCallsCredentialListMappingResponse, response status code and response headers
    def list_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthCallsCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthCallsCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthCallsIpAccessControlListMappingResponse]
    def list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthCallsIpAccessControlListMappingResponse
      data, _status_code, _headers = list_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, Integer, Hash)] Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, response status code and response headers
    def list_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthRegistrationsCredentialListMappingResponse]
    def list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthRegistrationsCredentialListMappingResponse
      data, _status_code, _headers = list_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, response status code and response headers
    def list_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialResponse]
    def list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialResponse
      data, _status_code, _headers = list_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialResponse, Integer, Hash)] Twilio::ListSipCredentialResponse, response status code and response headers
    def list_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    LIST_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_MAX_FOR_PAGE_SIZE                  = Int32.new("1000")
    LIST_SIP_CREDENTIAL_MIN_FOR_PAGE_SIZE                  = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_credential ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, LIST_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialListResponse]
    def list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialListResponse
      data, _status_code, _headers = list_sip_credential_list_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialListResponse, Integer, Hash)] Twilio::ListSipCredentialListResponse, response status code and response headers
    def list_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential_list(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialListResponse.from_json(body), status_code, headers)
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential_list(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_CREDENTIAL_LIST_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_credential_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialListMappingResponse]
    def list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialListMappingResponse
      data, _status_code, _headers = list_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipCredentialListMappingResponse, response status code and response headers
    def list_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_credential_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipDomainResponse]
    def list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipDomainResponse
      data, _status_code, _headers = list_sip_domain_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipDomainResponse, Integer, Hash)] Twilio::ListSipDomainResponse, response status code and response headers
    def list_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipDomainResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_domain(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipDomainResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_domain(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_DOMAIN_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_DOMAIN_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_DOMAIN_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_DOMAIN_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAccessControlListResponse]
    def list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAccessControlListResponse
      data, _status_code, _headers = list_sip_ip_access_control_list_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAccessControlListResponse, Integer, Hash)] Twilio::ListSipIpAccessControlListResponse, response status code and response headers
    def list_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAccessControlListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_access_control_list(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAccessControlListResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_access_control_list(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_ip_access_control_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAccessControlListMappingResponse]
    def list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAccessControlListMappingResponse
      data, _status_code, _headers = list_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAccessControlListMappingResponse, Integer, Hash)] Twilio::ListSipIpAccessControlListMappingResponse, response status code and response headers
    def list_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAccessControlListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAccessControlListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAddressResponse]
    def list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAddressResponse
      data, _status_code, _headers = list_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size)
      data
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAddressResponse, Integer, Hash)] Twilio::ListSipIpAddressResponse, response status code and response headers
    def list_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAddressResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#list_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAddressResponse.from_json(body), status_code, headers)
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    LIST_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    LIST_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ADDRESS_MAX_FOR_PAGE_SIZE                         = Int32.new("1000")
    LIST_SIP_IP_ADDRESS_MIN_FOR_PAGE_SIZE                         = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.list_sip_ip_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, LIST_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ADDRESS_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ADDRESS_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SIPApi.list_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return [Twilio::SipSipCredentialListSipCredential]
    def update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = update_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password)
      data
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def update_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#update_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return nil
    def update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password).execute(&block)
    end

    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.update_sip_credential ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Password", password.to_s) if !password.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.update_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return [Twilio::SipSipCredentialList]
    def update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = update_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def update_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_credential_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#update_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return nil
    def update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_credential_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.update_sip_credential_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.update_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return [Twilio::SipSipDomain]
    def update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = update_sip_domain_with_http_info(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)
      data
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def update_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_domain(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#update_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return nil
    def update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_domain(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url).execute(&block)
    end

    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID          = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID          = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID             = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_SID                  = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_SID                  = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_SID                     = /^SD[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID          = /^BY[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID    = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.update_sip_domain ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_SID)
        end
        unless (_byoc_trunk_sid = byoc_trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("byoc_trunk_sid", _byoc_trunk_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID)
        end

        unless (_emergency_caller_sid = emergency_caller_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_caller_sid", emergency_caller_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_caller_sid", emergency_caller_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_caller_sid", _emergency_caller_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID)
        end

        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end

        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_status_callback_method = voice_status_callback_method).nil?
          _voice_status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ByocTrunkSid", byoc_trunk_sid.to_s) if !byoc_trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DomainName", domain_name.to_s) if !domain_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallerSid", emergency_caller_sid.to_s) if !emergency_caller_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallingEnabled", emergency_calling_enabled.to_s) if !emergency_calling_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Secure", secure.to_s) if !secure.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipRegistration", sip_registration.to_s) if !sip_registration.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackMethod", voice_status_callback_method.to_s) if !voice_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackUrl", voice_status_callback_url.to_s) if !voice_status_callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.update_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return [Twilio::SipSipIpAccessControlList]
    def update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = update_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def update_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_ip_access_control_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#update_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return nil
    def update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_ip_access_control_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.update_sip_ip_access_control_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.update_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = update_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address)
      data
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def update_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SIPApi#update_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return nil
    def update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address).execute(&block)
    end

    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SIPApi.update_sip_ip_address ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CidrPrefixLength", cidr_prefix_length.to_s) if !cidr_prefix_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IpAddress", ip_address.to_s) if !ip_address.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SIPApi.update_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
