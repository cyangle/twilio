#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/application"
require "../models/http_method"

require "../models/list_application_response"

module Twilio
  class ApplicationsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Twilio::Application]
    def create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = create_application_with_http_info(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)
      data
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def create_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_application(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ApplicationsApi#create_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return nil
    def create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_application(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url).execute(&block)
    end

    CREATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ApplicationsApi.create_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end

        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end

        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end

        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MessageStatusCallback", message_status_callback.to_s) if !message_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsStatusCallback", sms_status_callback.to_s) if !sms_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ApplicationsApi.create_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return [Nil]
    def delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_application_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_application(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ApplicationsApi#delete_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return nil
    def delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_application(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    DELETE_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    DELETE_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ApplicationsApi.delete_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_APPLICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ApplicationsApi.delete_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return [Twilio::Application]
    def fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = fetch_application_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def fetch_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_application(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ApplicationsApi#fetch_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return nil
    def fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_application(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    FETCH_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    FETCH_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ApplicationsApi.fetch_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_APPLICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ApplicationsApi.fetch_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListApplicationResponse]
    def list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListApplicationResponse
      data, _status_code, _headers = list_application_with_http_info(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size)
      data
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListApplicationResponse, Integer, Hash)] Twilio::ListApplicationResponse, response status code and response headers
    def list_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListApplicationResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_application(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ApplicationsApi#list_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListApplicationResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_application(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size).execute(&block)
    end

    LIST_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_APPLICATION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_APPLICATION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ApplicationsApi.list_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_APPLICATION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_APPLICATION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ApplicationsApi.list_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the application's properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Twilio::Application]
    def update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = update_application_with_http_info(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)
      data
    end

    # Updates the application&#39;s properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def update_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_application(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ApplicationsApi#update_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Updates the application&#39;s properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return nil
    def update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_application(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url).execute(&block)
    end

    UPDATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    UPDATE_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    UPDATE_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ApplicationsApi.update_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_APPLICATION_PATTERN_FOR_SID)
        end

        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end

        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end

        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end

        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MessageStatusCallback", message_status_callback.to_s) if !message_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsStatusCallback", sms_status_callback.to_s) if !sms_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ApplicationsApi.update_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
