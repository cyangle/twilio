#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Twilio
  class DefaultApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a new Twilio Subaccount from the account making the request
    # @optional @param friendly_name [String?] A human readable description of the account to create, defaults to `SubAccount Created at {YYYY-MM-DD HH:MM meridian}`
    # @return [Twilio::Account]
    def create_account(
      *,
      friendly_name : String? = nil
    ) : Twilio::Account
      data, _status_code, _headers = create_account_with_http_info(friendly_name: friendly_name)
      data
    end

    # Create a new Twilio Subaccount from the account making the request
    # @optional @param friendly_name [String?] A human readable description of the account to create, defaults to `SubAccount Created at {YYYY-MM-DD HH:MM meridian}`
    # @return [Tuple(Twilio::Account, Integer, Hash)] Twilio::Account, response status code and response headers
    def create_account_with_http_info(
      *,
      friendly_name : String? = nil
    ) : Tuple(Twilio::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_account(friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Account.from_json(body), status_code, headers)
    end

    # Create a new Twilio Subaccount from the account making the request
    # @optional @param friendly_name [String?] A human readable description of the account to create, defaults to `SubAccount Created at {YYYY-MM-DD HH:MM meridian}`
    # @return nil
    def create_account(
      *,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_account(friendly_name: friendly_name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_create_account(
      *,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_account ..." }
      end

      if client_side_validation
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts.json"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Twilio::Address]
    def create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = create_address_with_http_info(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def create_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_address(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
    # @required @param city [String?] The city of the new address.
    # @required @param customer_name [String?] The name to associate with the new address.
    # @required @param iso_country [String?] The ISO country code of the new address.
    # @required @param postal_code [String?] The postal code of the new address.
    # @required @param region [String?] The state or region of the new address.
    # @required @param street [String?] The number and street address of the new address.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return nil
    def create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_address(account_sid: account_sid, city: city, customer_name: customer_name, iso_country: iso_country, postal_code: postal_code, region: region, street: street, auto_correct_address: auto_correct_address, emergency_enabled: emergency_enabled, friendly_name: friendly_name, street_secondary: street_secondary).execute(&block)
    end

    CREATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_address(
      *,
      account_sid : String? = @account_sid,
      city : String? = nil,
      customer_name : String? = nil,
      iso_country : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      auto_correct_address : Bool? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      street_secondary : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"city\" is required and cannot be null") if city.nil?
        unless (_city = city).nil?
        end
        raise ArgumentError.new("\"customer_name\" is required and cannot be null") if customer_name.nil?
        unless (_customer_name = customer_name).nil?
        end
        raise ArgumentError.new("\"iso_country\" is required and cannot be null") if iso_country.nil?
        unless (_iso_country = iso_country).nil?
        end
        raise ArgumentError.new("\"postal_code\" is required and cannot be null") if postal_code.nil?
        unless (_postal_code = postal_code).nil?
        end
        raise ArgumentError.new("\"region\" is required and cannot be null") if region.nil?
        unless (_region = region).nil?
        end
        raise ArgumentError.new("\"street\" is required and cannot be null") if street.nil?
        unless (_street = street).nil?
        end
        unless (_auto_correct_address = auto_correct_address).nil?
        end
        unless (_emergency_enabled = emergency_enabled).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_street_secondary = street_secondary).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AutoCorrectAddress", auto_correct_address.to_s) if !auto_correct_address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("City", city.to_s) if !city.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CustomerName", customer_name.to_s) if !customer_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyEnabled", emergency_enabled.to_s) if !emergency_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IsoCountry", iso_country.to_s) if !iso_country.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Street", street.to_s) if !street.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StreetSecondary", street_secondary.to_s) if !street_secondary.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Twilio::Application]
    def create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = create_application_with_http_info(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)
      data
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def create_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_application(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Create a new application within your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] The URL we should call using a POST method to send status information about SMS messages sent by the application.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return nil
    def create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_application(account_sid: account_sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url).execute(&block)
    end

    CREATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_application(
      *,
      account_sid : String? = @account_sid,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_message_status_callback = message_status_callback).nil?
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_status_callback = sms_status_callback).nil?
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MessageStatusCallback", message_status_callback.to_s) if !message_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsStatusCallback", sms_status_callback.to_s) if !sms_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Twilio::Call]
    def create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = create_call_with_http_info(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url)
      data
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def create_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param from [String?] The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
    # @required @param to [String?] The phone number, SIP address, or client identifier to call.
    # @optional @param application_sid [String?] The SID of the Application resource that will handle the call, if the call will be handled by an application.
    # @optional @param async_amd [String?] Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    # @optional @param async_amd_status_callback [String?] The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param async_amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_token [String?] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    # @optional @param caller_id [String?] The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param record [Bool?] Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    # @optional @param recording_channels [String?] The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    # @optional @param recording_status_callback [String?] The URL that we call when the recording is available to be accessed.
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param send_digits [String?] A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    # @optional @param sip_auth_password [String?] The password required to authenticate the user account specified in `sip_auth_username`.
    # @optional @param sip_auth_username [String?] The username used to authenticate the caller making a SIP call.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_event [Array(String)?] The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return nil
    def create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call(account_sid: account_sid, from: from, to: to, application_sid: application_sid, async_amd: async_amd, async_amd_status_callback: async_amd_status_callback, async_amd_status_callback_method: async_amd_status_callback_method, byoc: byoc, call_reason: call_reason, call_token: call_token, caller_id: caller_id, fallback_method: fallback_method, fallback_url: fallback_url, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, method: method, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, send_digits: send_digits, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, trim: trim, twiml: twiml, url: url).execute(&block)
    end

    CREATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID     = 34
    CREATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID     = 34
    CREATE_CALL_PATTERN_FOR_ACCOUNT_SID        = /^AC[0-9a-fA-F]{32}$/
    CREATE_CALL_MAX_LENGTH_FOR_APPLICATION_SID = 34
    CREATE_CALL_MIN_LENGTH_FOR_APPLICATION_SID = 34
    CREATE_CALL_PATTERN_FOR_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/
    CREATE_CALL_MAX_LENGTH_FOR_BYOC            = 34
    CREATE_CALL_MIN_LENGTH_FOR_BYOC            = 34
    CREATE_CALL_PATTERN_FOR_BYOC               = /^BY[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call(
      *,
      account_sid : String? = @account_sid,
      from : String? = nil,
      to : String? = nil,
      application_sid : String? = nil,
      async_amd : String? = nil,
      async_amd_status_callback : String? = nil,
      async_amd_status_callback_method : Twilio::HttpMethod? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_token : String? = nil,
      caller_id : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      method : Twilio::HttpMethod? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      send_digits : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      trim : String? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_call ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"from\" is required and cannot be null") if from.nil?
        unless (_from = from).nil?
        end
        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?
        unless (_to = to).nil?
        end
        unless (_application_sid = application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("application_sid", application_sid.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("application_sid", application_sid.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("application_sid", _application_sid, CREATE_CALL_PATTERN_FOR_APPLICATION_SID)
        end
        unless (_async_amd = async_amd).nil?
        end
        unless (_async_amd_status_callback = async_amd_status_callback).nil?
        end
        unless (_async_amd_status_callback_method = async_amd_status_callback_method).nil?
          _async_amd_status_callback_method.validate
        end
        unless (_byoc = byoc).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc", byoc.to_s.size, CREATE_CALL_MAX_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_min_length("byoc", byoc.to_s.size, CREATE_CALL_MIN_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_pattern("byoc", _byoc, CREATE_CALL_PATTERN_FOR_BYOC)
        end
        unless (_call_reason = call_reason).nil?
        end
        unless (_call_token = call_token).nil?
        end
        unless (_caller_id = caller_id).nil?
        end
        unless (_fallback_method = fallback_method).nil?
          _fallback_method.validate
        end
        unless (_fallback_url = fallback_url).nil?
        end
        unless (_machine_detection = machine_detection).nil?
        end
        unless (_machine_detection_silence_timeout = machine_detection_silence_timeout).nil?
        end
        unless (_machine_detection_speech_end_threshold = machine_detection_speech_end_threshold).nil?
        end
        unless (_machine_detection_speech_threshold = machine_detection_speech_threshold).nil?
        end
        unless (_machine_detection_timeout = machine_detection_timeout).nil?
        end
        unless (_method = method).nil?
          _method.validate
        end
        unless (_record = record).nil?
        end
        unless (_recording_channels = recording_channels).nil?
        end
        unless (_recording_status_callback = recording_status_callback).nil?
        end
        unless (_recording_status_callback_event = recording_status_callback_event).nil?
        end
        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end
        unless (_recording_track = recording_track).nil?
        end
        unless (_send_digits = send_digits).nil?
        end
        unless (_sip_auth_password = sip_auth_password).nil?
        end
        unless (_sip_auth_username = sip_auth_username).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_event = status_callback_event).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_time_limit = time_limit).nil?
        end
        unless (_timeout = timeout).nil?
        end
        unless (_trim = trim).nil?
        end
        unless (_twiml = twiml).nil?
        end
        unless (_url = url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApplicationSid", application_sid.to_s) if !application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmd", async_amd.to_s) if !async_amd.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmdStatusCallback", async_amd_status_callback.to_s) if !async_amd_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AsyncAmdStatusCallbackMethod", async_amd_status_callback_method.to_s) if !async_amd_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Byoc", byoc.to_s) if !byoc.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallReason", call_reason.to_s) if !call_reason.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallToken", call_token.to_s) if !call_token.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallerId", caller_id.to_s) if !caller_id.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackMethod", fallback_method.to_s) if !fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackUrl", fallback_url.to_s) if !fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetection", machine_detection.to_s) if !machine_detection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSilenceTimeout", machine_detection_silence_timeout.to_s) if !machine_detection_silence_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechEndThreshold", machine_detection_speech_end_threshold.to_s) if !machine_detection_speech_end_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechThreshold", machine_detection_speech_threshold.to_s) if !machine_detection_speech_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionTimeout", machine_detection_timeout.to_s) if !machine_detection_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Record", record.to_s) if !record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendDigits", send_digits.to_s) if !send_digits.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthPassword", sip_auth_password.to_s) if !sip_auth_password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthUsername", sip_auth_username.to_s) if !sip_auth_username.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("StatusCallbackEvent", status_callback_event, "multi")) if !status_callback_event.nil? && !status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Trim", trim.to_s) if !trim.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Twiml", twiml.to_s) if !twiml.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Twilio::CallCallFeedbackSummary]
    def create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Twilio::CallCallFeedbackSummary
      data, _status_code, _headers = create_call_feedback_summary_with_http_info(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method)
      data
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::CallCallFeedbackSummary, Integer, Hash)] Twilio::CallCallFeedbackSummary, response status code and response headers
    def create_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::CallCallFeedbackSummary, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call_feedback_summary(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedbackSummary.from_json(body), status_code, headers)
    end

    # Create a FeedbackSummary resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param end_date [Time?] Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @required @param start_date [Time?] Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    # @optional @param include_subaccounts [Bool?] Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    # @optional @param status_callback [String?] The URL that we will request when the feedback summary is complete.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return nil
    def create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call_feedback_summary(account_sid: account_sid, end_date: end_date, start_date: start_date, include_subaccounts: include_subaccounts, status_callback: status_callback, status_callback_method: status_callback_method).execute(&block)
    end

    CREATE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      end_date : Time? = nil,
      start_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_call_feedback_summary ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"end_date\" is required and cannot be null") if end_date.nil?
        unless (_end_date = end_date).nil?
        end
        raise ArgumentError.new("\"start_date\" is required and cannot be null") if start_date.nil?
        unless (_start_date = start_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("EndDate", Time::Format::ISO_8601_DATE.format(end_date)) if !end_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IncludeSubaccounts", include_subaccounts.to_s) if !include_subaccounts.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StartDate", Time::Format::ISO_8601_DATE.format(start_date)) if !start_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return [Twilio::CallCallRecording]
    def create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = create_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim)
      data
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def create_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_call_recording(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Create a recording for the call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    # @optional @param recording_channels [String?] The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    # @optional @param recording_status_callback [String?] The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    # @optional @param recording_status_callback_event [Array(String)?] The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    # @optional @param trim [String?] Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    # @return nil
    def create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_call_recording(account_sid: account_sid, call_sid: call_sid, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, trim: trim).execute(&block)
    end

    CREATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      trim : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_call_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        unless (_recording_channels = recording_channels).nil?
        end
        unless (_recording_status_callback = recording_status_callback).nil?
        end
        unless (_recording_status_callback_event = recording_status_callback_event).nil?
        end
        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end
        unless (_recording_track = recording_track).nil?
        end
        unless (_trim = trim).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Trim", trim.to_s) if !trim.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Purchase a phone-number for the account.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param area_code [String?] The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an `area_code` or a `phone_number`.** (US and Canada only).
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Twilio::IncomingPhoneNumber]
    def create_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      area_code : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      phone_number : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Twilio::IncomingPhoneNumber
      data, _status_code, _headers = create_incoming_phone_number_with_http_info(account_sid: account_sid, address_sid: address_sid, api_version: api_version, area_code: area_code, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, phone_number: phone_number, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)
      data
    end

    # Purchase a phone-number for the account.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param area_code [String?] The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an `area_code` or a `phone_number`.** (US and Canada only).
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Tuple(Twilio::IncomingPhoneNumber, Integer, Hash)] Twilio::IncomingPhoneNumber, response status code and response headers
    def create_incoming_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      area_code : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      phone_number : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumber, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_incoming_phone_number(account_sid: account_sid, address_sid: address_sid, api_version: api_version, area_code: area_code, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, phone_number: phone_number, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_incoming_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumber.from_json(body), status_code, headers)
    end

    # Purchase a phone-number for the account.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param area_code [String?] The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an `area_code` or a `phone_number`.** (US and Canada only).
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return nil
    def create_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      area_code : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      phone_number : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_incoming_phone_number(account_sid: account_sid, address_sid: address_sid, api_version: api_version, area_code: area_code, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, phone_number: phone_number, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url).execute(&block)
    end

    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID              = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_BUNDLE_SID               = /^BU[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_EMERGENCY_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_IDENTITY_SID             = /^RI[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SMS_APPLICATION_SID      = /^AP[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_TRUNK_SID                = /^TK[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_VOICE_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      area_code : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      phone_number : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_incoming_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_bundle_sid = bundle_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("bundle_sid", _bundle_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_BUNDLE_SID)
        end
        unless (_emergency_address_sid = emergency_address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_address_sid", _emergency_address_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_EMERGENCY_ADDRESS_SID)
        end
        unless (_emergency_status = emergency_status).nil?
          _emergency_status.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_identity_sid = identity_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_min_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_pattern("identity_sid", _identity_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_IDENTITY_SID)
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_sms_application_sid = sms_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sms_application_sid", _sms_application_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SMS_APPLICATION_SID)
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_trunk_sid = trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("trunk_sid", _trunk_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_TRUNK_SID)
        end
        unless (_voice_application_sid = voice_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("voice_application_sid", _voice_application_sid, CREATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_VOICE_APPLICATION_SID)
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_receive_mode = voice_receive_mode).nil?
          _voice_receive_mode.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressSid", address_sid.to_s) if !address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AreaCode", area_code.to_s) if !area_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BundleSid", bundle_sid.to_s) if !bundle_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyAddressSid", emergency_address_sid.to_s) if !emergency_address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyStatus", emergency_status.to_s) if !emergency_status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdentitySid", identity_sid.to_s) if !identity_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsApplicationSid", sms_application_sid.to_s) if !sms_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TrunkSid", trunk_sid.to_s) if !trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceApplicationSid", voice_application_sid.to_s) if !voice_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceReceiveMode", voice_receive_mode.to_s) if !voice_receive_mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_incoming_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Assign an Add-on installation to the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param resource_sid [String?] The SID of the Phone Number to assign the Add-on.
    # @required @param installed_add_on_sid [String?] The SID that identifies the Add-on installation.
    # @return [Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn]
    def create_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      installed_add_on_sid : String? = nil
    ) : Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
      data, _status_code, _headers = create_incoming_phone_number_assigned_add_on_with_http_info(account_sid: account_sid, resource_sid: resource_sid, installed_add_on_sid: installed_add_on_sid)
      data
    end

    # Assign an Add-on installation to the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param resource_sid [String?] The SID of the Phone Number to assign the Add-on.
    # @required @param installed_add_on_sid [String?] The SID that identifies the Add-on installation.
    # @return [Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, Integer, Hash)] Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, response status code and response headers
    def create_incoming_phone_number_assigned_add_on_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      installed_add_on_sid : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, installed_add_on_sid: installed_add_on_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_incoming_phone_number_assigned_add_on\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn.from_json(body), status_code, headers)
    end

    # Assign an Add-on installation to the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param resource_sid [String?] The SID of the Phone Number to assign the Add-on.
    # @required @param installed_add_on_sid [String?] The SID that identifies the Add-on installation.
    # @return nil
    def create_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      installed_add_on_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, installed_add_on_sid: installed_add_on_sid).execute(&block)
    end

    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID             = /^AC[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID         = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID         = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID            = /^PN[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_INSTALLED_ADD_ON_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_INSTALLED_ADD_ON_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_INSTALLED_ADD_ON_SID    = /^XE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      installed_add_on_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_incoming_phone_number_assigned_add_on ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID)
        end
        raise ArgumentError.new("\"installed_add_on_sid\" is required and cannot be null") if installed_add_on_sid.nil?
        unless (_installed_add_on_sid = installed_add_on_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("installed_add_on_sid", installed_add_on_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_INSTALLED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_min_length("installed_add_on_sid", installed_add_on_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_INSTALLED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_pattern("installed_add_on_sid", _installed_add_on_sid, CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_INSTALLED_ADD_ON_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("InstalledAddOnSid", installed_add_on_sid.to_s) if !installed_add_on_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_incoming_phone_number_assigned_add_on",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal]
    def create_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal
      data, _status_code, _headers = create_incoming_phone_number_local_with_http_info(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal, Integer, Hash)] Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal, response status code and response headers
    def create_incoming_phone_number_local_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_incoming_phone_number_local(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_incoming_phone_number_local\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumberIncomingPhoneNumberLocal.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return nil
    def create_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_incoming_phone_number_local(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url).execute(&block)
    end

    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ADDRESS_SID              = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_BUNDLE_SID               = /^BU[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_EMERGENCY_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_IDENTITY_SID             = /^RI[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_SMS_APPLICATION_SID      = /^AP[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_TRUNK_SID                = /^TK[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_VOICE_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_incoming_phone_number_local ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"phone_number\" is required and cannot be null") if phone_number.nil?
        unless (_phone_number = phone_number).nil?
        end
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_bundle_sid = bundle_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("bundle_sid", _bundle_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_BUNDLE_SID)
        end
        unless (_emergency_address_sid = emergency_address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_address_sid", _emergency_address_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_EMERGENCY_ADDRESS_SID)
        end
        unless (_emergency_status = emergency_status).nil?
          _emergency_status.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_identity_sid = identity_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_min_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_pattern("identity_sid", _identity_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_IDENTITY_SID)
        end
        unless (_sms_application_sid = sms_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sms_application_sid", _sms_application_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_SMS_APPLICATION_SID)
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_trunk_sid = trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("trunk_sid", _trunk_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_TRUNK_SID)
        end
        unless (_voice_application_sid = voice_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("voice_application_sid", _voice_application_sid, CREATE_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_VOICE_APPLICATION_SID)
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_receive_mode = voice_receive_mode).nil?
          _voice_receive_mode.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressSid", address_sid.to_s) if !address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BundleSid", bundle_sid.to_s) if !bundle_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyAddressSid", emergency_address_sid.to_s) if !emergency_address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyStatus", emergency_status.to_s) if !emergency_status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdentitySid", identity_sid.to_s) if !identity_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsApplicationSid", sms_application_sid.to_s) if !sms_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TrunkSid", trunk_sid.to_s) if !trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceApplicationSid", voice_application_sid.to_s) if !voice_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceReceiveMode", voice_receive_mode.to_s) if !voice_receive_mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_incoming_phone_number_local",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, the is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Twilio::IncomingPhoneNumber]
    def create_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Twilio::IncomingPhoneNumber
      data, _status_code, _headers = create_incoming_phone_number_mobile_with_http_info(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, the is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Tuple(Twilio::IncomingPhoneNumber, Integer, Hash)] Twilio::IncomingPhoneNumber, response status code and response headers
    def create_incoming_phone_number_mobile_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumber, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_incoming_phone_number_mobile(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_incoming_phone_number_mobile\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumber.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, the is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return nil
    def create_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_incoming_phone_number_mobile(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url).execute(&block)
    end

    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ADDRESS_SID              = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_BUNDLE_SID               = /^BU[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_EMERGENCY_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_IDENTITY_SID             = /^RI[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_SMS_APPLICATION_SID      = /^AP[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_TRUNK_SID                = /^TK[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_VOICE_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_incoming_phone_number_mobile ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"phone_number\" is required and cannot be null") if phone_number.nil?
        unless (_phone_number = phone_number).nil?
        end
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_bundle_sid = bundle_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("bundle_sid", _bundle_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_BUNDLE_SID)
        end
        unless (_emergency_address_sid = emergency_address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_address_sid", _emergency_address_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_EMERGENCY_ADDRESS_SID)
        end
        unless (_emergency_status = emergency_status).nil?
          _emergency_status.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_identity_sid = identity_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_min_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_pattern("identity_sid", _identity_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_IDENTITY_SID)
        end
        unless (_sms_application_sid = sms_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sms_application_sid", _sms_application_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_SMS_APPLICATION_SID)
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_trunk_sid = trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("trunk_sid", _trunk_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_TRUNK_SID)
        end
        unless (_voice_application_sid = voice_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("voice_application_sid", _voice_application_sid, CREATE_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_VOICE_APPLICATION_SID)
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_receive_mode = voice_receive_mode).nil?
          _voice_receive_mode.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressSid", address_sid.to_s) if !address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BundleSid", bundle_sid.to_s) if !bundle_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyAddressSid", emergency_address_sid.to_s) if !emergency_address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyStatus", emergency_status.to_s) if !emergency_status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdentitySid", identity_sid.to_s) if !identity_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsApplicationSid", sms_application_sid.to_s) if !sms_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TrunkSid", trunk_sid.to_s) if !trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceApplicationSid", voice_application_sid.to_s) if !voice_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceReceiveMode", voice_receive_mode.to_s) if !voice_receive_mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_incoming_phone_number_mobile",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Twilio::IncomingPhoneNumber]
    def create_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Twilio::IncomingPhoneNumber
      data, _status_code, _headers = create_incoming_phone_number_toll_free_with_http_info(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Tuple(Twilio::IncomingPhoneNumber, Integer, Hash)] Twilio::IncomingPhoneNumber, response status code and response headers
    def create_incoming_phone_number_toll_free_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumber, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_incoming_phone_number_toll_free(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_incoming_phone_number_toll_free\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumber.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param phone_number [String?] The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from the new phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the new phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return nil
    def create_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_incoming_phone_number_toll_free(account_sid: account_sid, phone_number: phone_number, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url).execute(&block)
    end

    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ADDRESS_SID           = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ADDRESS_SID              = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_BUNDLE_SID            = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_BUNDLE_SID               = /^BU[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_EMERGENCY_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_IDENTITY_SID          = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_IDENTITY_SID             = /^RI[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_SMS_APPLICATION_SID      = /^AP[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_TRUNK_SID             = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_TRUNK_SID                = /^TK[0-9a-fA-F]{32}$/
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_VOICE_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_incoming_phone_number_toll_free ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"phone_number\" is required and cannot be null") if phone_number.nil?
        unless (_phone_number = phone_number).nil?
        end
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_bundle_sid = bundle_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("bundle_sid", bundle_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("bundle_sid", _bundle_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_BUNDLE_SID)
        end
        unless (_emergency_address_sid = emergency_address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_address_sid", emergency_address_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_address_sid", _emergency_address_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_EMERGENCY_ADDRESS_SID)
        end
        unless (_emergency_status = emergency_status).nil?
          _emergency_status.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_identity_sid = identity_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_min_length("identity_sid", identity_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_pattern("identity_sid", _identity_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_IDENTITY_SID)
        end
        unless (_sms_application_sid = sms_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sms_application_sid", sms_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sms_application_sid", _sms_application_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_SMS_APPLICATION_SID)
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_trunk_sid = trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("trunk_sid", trunk_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("trunk_sid", _trunk_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_TRUNK_SID)
        end
        unless (_voice_application_sid = voice_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("voice_application_sid", voice_application_sid.to_s.size, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("voice_application_sid", _voice_application_sid, CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_VOICE_APPLICATION_SID)
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_receive_mode = voice_receive_mode).nil?
          _voice_receive_mode.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressSid", address_sid.to_s) if !address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BundleSid", bundle_sid.to_s) if !bundle_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyAddressSid", emergency_address_sid.to_s) if !emergency_address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyStatus", emergency_status.to_s) if !emergency_status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdentitySid", identity_sid.to_s) if !identity_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsApplicationSid", sms_application_sid.to_s) if !sms_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TrunkSid", trunk_sid.to_s) if !trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceApplicationSid", voice_application_sid.to_s) if !voice_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceReceiveMode", voice_receive_mode.to_s) if !voice_receive_mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_incoming_phone_number_toll_free",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return [Twilio::Message]
    def create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Twilio::Message
      data, _status_code, _headers = create_message_with_http_info(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period)
      data
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def create_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_message(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # Send a message from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param to [String?] The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
    # @optional @param address_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param application_sid [String?] The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
    # @optional @param attempt [Int32?] Total number of attempts made ( including this ) to send out the message regardless of the provider used
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters in length.
    # @optional @param content_retention [Twilio::MessageEnumAddressRetention?]
    # @optional @param content_sid [String?] The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
    # @optional @param content_variables [String?] Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
    # @optional @param force_delivery [Bool?] Reserved
    # @optional @param from [String?] A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
    # @optional @param max_price [Float64?] The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
    # @optional @param media_url [Array(String)?] The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
    # @optional @param messaging_service_sid [String?] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
    # @optional @param persistent_action [Array(String)?] Rich actions for Channels Messages.
    # @optional @param provide_feedback [Bool?] Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
    # @optional @param schedule_type [Twilio::MessageEnumScheduleType?]
    # @optional @param send_as_mms [Bool?] If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
    # @optional @param send_at [Time?] The time that Twilio will send the message. Must be in ISO 8601 format.
    # @optional @param shorten_urls [Bool?] Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
    # @optional @param smart_encoded [Bool?] Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
    # @optional @param validity_period [Int32?] How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
    # @return nil
    def create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_message(account_sid: account_sid, to: to, address_retention: address_retention, application_sid: application_sid, attempt: attempt, body: body, content_retention: content_retention, content_sid: content_sid, content_variables: content_variables, force_delivery: force_delivery, from: from, max_price: max_price, media_url: media_url, messaging_service_sid: messaging_service_sid, persistent_action: persistent_action, provide_feedback: provide_feedback, schedule_type: schedule_type, send_as_mms: send_as_mms, send_at: send_at, shorten_urls: shorten_urls, smart_encoded: smart_encoded, status_callback: status_callback, validity_period: validity_period).execute(&block)
    end

    CREATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    CREATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_APPLICATION_SID       = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_APPLICATION_SID       = 34
    CREATE_MESSAGE_PATTERN_FOR_APPLICATION_SID          = /^AP[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_CONTENT_SID           = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_CONTENT_SID           = 34
    CREATE_MESSAGE_PATTERN_FOR_CONTENT_SID              = /^HX[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_MAX_LENGTH_FOR_MESSAGING_SERVICE_SID = 34
    CREATE_MESSAGE_MIN_LENGTH_FOR_MESSAGING_SERVICE_SID = 34
    CREATE_MESSAGE_PATTERN_FOR_MESSAGING_SERVICE_SID    = /^MG[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      address_retention : Twilio::MessageEnumAddressRetention? = nil,
      application_sid : String? = nil,
      attempt : Int32? = nil,
      body : String? = nil,
      content_retention : Twilio::MessageEnumAddressRetention? = nil,
      content_sid : String? = nil,
      content_variables : String? = nil,
      force_delivery : Bool? = nil,
      from : String? = nil,
      max_price : Float64? = nil,
      media_url : Array(String)? = nil,
      messaging_service_sid : String? = nil,
      persistent_action : Array(String)? = nil,
      provide_feedback : Bool? = nil,
      schedule_type : Twilio::MessageEnumScheduleType? = nil,
      send_as_mms : Bool? = nil,
      send_at : Time? = nil,
      shorten_urls : Bool? = nil,
      smart_encoded : Bool? = nil,
      status_callback : String? = nil,
      validity_period : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?
        unless (_to = to).nil?
        end
        unless (_address_retention = address_retention).nil?
          _address_retention.validate
        end
        unless (_application_sid = application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("application_sid", application_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("application_sid", application_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("application_sid", _application_sid, CREATE_MESSAGE_PATTERN_FOR_APPLICATION_SID)
        end
        unless (_attempt = attempt).nil?
        end
        unless (_body = body).nil?
        end
        unless (_content_retention = content_retention).nil?
          _content_retention.validate
        end
        unless (_content_sid = content_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("content_sid", content_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_CONTENT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("content_sid", content_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_CONTENT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("content_sid", _content_sid, CREATE_MESSAGE_PATTERN_FOR_CONTENT_SID)
        end
        unless (_content_variables = content_variables).nil?
        end
        unless (_force_delivery = force_delivery).nil?
        end
        unless (_from = from).nil?
        end
        unless (_max_price = max_price).nil?
        end
        unless (_media_url = media_url).nil?
        end
        unless (_messaging_service_sid = messaging_service_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("messaging_service_sid", messaging_service_sid.to_s.size, CREATE_MESSAGE_MAX_LENGTH_FOR_MESSAGING_SERVICE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("messaging_service_sid", messaging_service_sid.to_s.size, CREATE_MESSAGE_MIN_LENGTH_FOR_MESSAGING_SERVICE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("messaging_service_sid", _messaging_service_sid, CREATE_MESSAGE_PATTERN_FOR_MESSAGING_SERVICE_SID)
        end
        unless (_persistent_action = persistent_action).nil?
        end
        unless (_provide_feedback = provide_feedback).nil?
        end
        unless (_schedule_type = schedule_type).nil?
          _schedule_type.validate
        end
        unless (_send_as_mms = send_as_mms).nil?
        end
        unless (_send_at = send_at).nil?
        end
        unless (_shorten_urls = shorten_urls).nil?
        end
        unless (_smart_encoded = smart_encoded).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_validity_period = validity_period).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AddressRetention", address_retention.to_s) if !address_retention.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApplicationSid", application_sid.to_s) if !application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Attempt", attempt.to_s) if !attempt.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Body", body.to_s) if !body.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentRetention", content_retention.to_s) if !content_retention.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentSid", content_sid.to_s) if !content_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ContentVariables", content_variables.to_s) if !content_variables.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ForceDelivery", force_delivery.to_s) if !force_delivery.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxPrice", max_price.to_s) if !max_price.nil?
      form_params.concat(@api_client.build_collection_param_tuples("MediaUrl", media_url, "multi")) if !media_url.nil? && !media_url.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("MessagingServiceSid", messaging_service_sid.to_s) if !messaging_service_sid.nil?
      form_params.concat(@api_client.build_collection_param_tuples("PersistentAction", persistent_action, "multi")) if !persistent_action.nil? && !persistent_action.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ProvideFeedback", provide_feedback.to_s) if !provide_feedback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ScheduleType", schedule_type.to_s) if !schedule_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendAsMms", send_as_mms.to_s) if !send_as_mms.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SendAt", Time::Format::RFC_2822.format(send_at)) if !send_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ShortenUrls", shorten_urls.to_s) if !shorten_urls.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmartEncoded", smart_encoded.to_s) if !smart_encoded.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ValidityPeriod", validity_period.to_s) if !validity_period.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return [Twilio::MessageMessageFeedback]
    def create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Twilio::MessageMessageFeedback
      data, _status_code, _headers = create_message_feedback_with_http_info(account_sid: account_sid, message_sid: message_sid, outcome: outcome)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return [Tuple(Twilio::MessageMessageFeedback, Integer, Hash)] Twilio::MessageMessageFeedback, response status code and response headers
    def create_message_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Tuple(Twilio::MessageMessageFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_message_feedback(account_sid: account_sid, message_sid: message_sid, outcome: outcome)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_message_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::MessageMessageFeedback.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param message_sid [String?] The SID of the Message resource for which the feedback was provided.
    # @optional @param outcome [Twilio::MessageFeedbackEnumOutcome?]
    # @return nil
    def create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_message_feedback(account_sid: account_sid, message_sid: message_sid, outcome: outcome).execute(&block)
    end

    CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_MESSAGE_SID = 34
    CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_MESSAGE_SID = 34
    CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_message_feedback(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      outcome : Twilio::MessageFeedbackEnumOutcome? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_message_feedback ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, CREATE_MESSAGE_FEEDBACK_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, CREATE_MESSAGE_FEEDBACK_PATTERN_FOR_MESSAGE_SID)
        end
        unless (_outcome = outcome).nil?
          _outcome.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Outcome", outcome.to_s) if !outcome.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_message_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::NewKey]
    def create_new_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::NewKey
      data, _status_code, _headers = create_new_key_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::NewKey, Integer, Hash)] Twilio::NewKey, response status code and response headers
    def create_new_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::NewKey, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_new_key(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_new_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::NewKey.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def create_new_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_new_key(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_NEW_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_NEW_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_NEW_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_new_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_new_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_NEW_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_NEW_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_NEW_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Keys.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_new_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new Signing Key for the account making the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::NewKey]
    def create_new_signing_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::NewKey
      data, _status_code, _headers = create_new_signing_key_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    # Create a new Signing Key for the account making the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::NewKey, Integer, Hash)] Twilio::NewKey, response status code and response headers
    def create_new_signing_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::NewKey, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_new_signing_key(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_new_signing_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::NewKey.from_json(body), status_code, headers)
    end

    # Create a new Signing Key for the account making the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def create_new_signing_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_new_signing_key(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_NEW_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_NEW_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_NEW_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_new_signing_key(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_new_signing_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_NEW_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_NEW_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_NEW_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_new_signing_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Twilio::ConferenceParticipant]
    def create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = create_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def create_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_participant(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return nil
    def create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_participant(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url).execute(&block)
    end

    CREATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    CREATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    CREATE_PARTICIPANT_MAX_LENGTH_FOR_BYOC              = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_BYOC              = 34
    CREATE_PARTICIPANT_PATTERN_FOR_BYOC                 = /^BY[0-9a-fA-F]{32}$/
    CREATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH = 34
    CREATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH    = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_participant ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
        end
        raise ArgumentError.new("\"from\" is required and cannot be null") if from.nil?
        unless (_from = from).nil?
        end
        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?
        unless (_to = to).nil?
        end
        unless (_amd_status_callback = amd_status_callback).nil?
        end
        unless (_amd_status_callback_method = amd_status_callback_method).nil?
          _amd_status_callback_method.validate
        end
        unless (_beep = beep).nil?
        end
        unless (_byoc = byoc).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc", byoc.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_min_length("byoc", byoc.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_pattern("byoc", _byoc, CREATE_PARTICIPANT_PATTERN_FOR_BYOC)
        end
        unless (_call_reason = call_reason).nil?
        end
        unless (_call_sid_to_coach = call_sid_to_coach).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid_to_coach", call_sid_to_coach.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid_to_coach", call_sid_to_coach.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid_to_coach", _call_sid_to_coach, CREATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH)
        end
        unless (_caller_id = caller_id).nil?
        end
        unless (_coaching = coaching).nil?
        end
        unless (_conference_record = conference_record).nil?
        end
        unless (_conference_recording_status_callback = conference_recording_status_callback).nil?
        end
        unless (_conference_recording_status_callback_event = conference_recording_status_callback_event).nil?
        end
        unless (_conference_recording_status_callback_method = conference_recording_status_callback_method).nil?
          _conference_recording_status_callback_method.validate
        end
        unless (_conference_status_callback = conference_status_callback).nil?
        end
        unless (_conference_status_callback_event = conference_status_callback_event).nil?
        end
        unless (_conference_status_callback_method = conference_status_callback_method).nil?
          _conference_status_callback_method.validate
        end
        unless (_conference_trim = conference_trim).nil?
        end
        unless (_early_media = early_media).nil?
        end
        unless (_end_conference_on_exit = end_conference_on_exit).nil?
        end
        unless (_jitter_buffer_size = jitter_buffer_size).nil?
        end
        unless (_label = label).nil?
        end
        unless (_machine_detection = machine_detection).nil?
        end
        unless (_machine_detection_silence_timeout = machine_detection_silence_timeout).nil?
        end
        unless (_machine_detection_speech_end_threshold = machine_detection_speech_end_threshold).nil?
        end
        unless (_machine_detection_speech_threshold = machine_detection_speech_threshold).nil?
        end
        unless (_machine_detection_timeout = machine_detection_timeout).nil?
        end
        unless (_max_participants = max_participants).nil?
        end
        unless (_muted = muted).nil?
        end
        unless (_record = record).nil?
        end
        unless (_recording_channels = recording_channels).nil?
        end
        unless (_recording_status_callback = recording_status_callback).nil?
        end
        unless (_recording_status_callback_event = recording_status_callback_event).nil?
        end
        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end
        unless (_recording_track = recording_track).nil?
        end
        unless (_region = region).nil?
        end
        unless (_sip_auth_password = sip_auth_password).nil?
        end
        unless (_sip_auth_username = sip_auth_username).nil?
        end
        unless (_start_conference_on_enter = start_conference_on_enter).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_event = status_callback_event).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_time_limit = time_limit).nil?
        end
        unless (_timeout = timeout).nil?
        end
        unless (_wait_method = wait_method).nil?
          _wait_method.validate
        end
        unless (_wait_url = wait_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AmdStatusCallback", amd_status_callback.to_s) if !amd_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AmdStatusCallbackMethod", amd_status_callback_method.to_s) if !amd_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Beep", beep.to_s) if !beep.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Byoc", byoc.to_s) if !byoc.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallReason", call_reason.to_s) if !call_reason.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallSidToCoach", call_sid_to_coach.to_s) if !call_sid_to_coach.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallerId", caller_id.to_s) if !caller_id.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Coaching", coaching.to_s) if !coaching.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecord", conference_record.to_s) if !conference_record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecordingStatusCallback", conference_recording_status_callback.to_s) if !conference_recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("ConferenceRecordingStatusCallbackEvent", conference_recording_status_callback_event, "multi")) if !conference_recording_status_callback_event.nil? && !conference_recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecordingStatusCallbackMethod", conference_recording_status_callback_method.to_s) if !conference_recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceStatusCallback", conference_status_callback.to_s) if !conference_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("ConferenceStatusCallbackEvent", conference_status_callback_event, "multi")) if !conference_status_callback_event.nil? && !conference_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceStatusCallbackMethod", conference_status_callback_method.to_s) if !conference_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceTrim", conference_trim.to_s) if !conference_trim.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EarlyMedia", early_media.to_s) if !early_media.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EndConferenceOnExit", end_conference_on_exit.to_s) if !end_conference_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("JitterBufferSize", jitter_buffer_size.to_s) if !jitter_buffer_size.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Label", label.to_s) if !label.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetection", machine_detection.to_s) if !machine_detection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSilenceTimeout", machine_detection_silence_timeout.to_s) if !machine_detection_silence_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechEndThreshold", machine_detection_speech_end_threshold.to_s) if !machine_detection_speech_end_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechThreshold", machine_detection_speech_threshold.to_s) if !machine_detection_speech_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionTimeout", machine_detection_timeout.to_s) if !machine_detection_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxParticipants", max_participants.to_s) if !max_participants.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Muted", muted.to_s) if !muted.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Record", record.to_s) if !record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthPassword", sip_auth_password.to_s) if !sip_auth_password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthUsername", sip_auth_username.to_s) if !sip_auth_username.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StartConferenceOnEnter", start_conference_on_enter.to_s) if !start_conference_on_enter.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("StatusCallbackEvent", status_callback_event, "multi")) if !status_callback_event.nil? && !status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitMethod", wait_method.to_s) if !wait_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitUrl", wait_url.to_s) if !wait_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return [Twilio::CallPayments]
    def create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Twilio::CallPayments
      data, _status_code, _headers = create_payments_with_http_info(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types)
      data
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return [Tuple(Twilio::CallPayments, Integer, Hash)] Twilio::CallPayments, response status code and response headers
    def create_payments_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Tuple(Twilio::CallPayments, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_payments(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallPayments.from_json(body), status_code, headers)
    end

    # create an instance of payments. This will start a new payments session
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param call_sid [String?] The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    # @optional @param bank_account_type [Twilio::PaymentsEnumBankAccountType?]
    # @optional @param charge_amount [Float64?] A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    # @optional @param currency [String?] The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    # @optional @param description [String?] The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    # @optional @param input [String?] A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    # @optional @param min_postal_code_length [Int32?] A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    # @optional @param parameter [String?] A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    # @optional @param payment_connector [String?] This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    # @optional @param payment_method [Twilio::PaymentsEnumPaymentMethod?]
    # @optional @param postal_code [Bool?] Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param security_code [Bool?] Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    # @optional @param timeout [Int32?] The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    # @optional @param token_type [Twilio::PaymentsEnumTokenType?]
    # @optional @param valid_card_types [String?] Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    # @return nil
    def create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_payments(account_sid: account_sid, call_sid: call_sid, idempotency_key: idempotency_key, status_callback: status_callback, bank_account_type: bank_account_type, charge_amount: charge_amount, currency: currency, description: description, input: input, min_postal_code_length: min_postal_code_length, parameter: parameter, payment_connector: payment_connector, payment_method: payment_method, postal_code: postal_code, security_code: security_code, timeout: timeout, token_type: token_type, valid_card_types: valid_card_types).execute(&block)
    end

    CREATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_PAYMENTS_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      bank_account_type : Twilio::PaymentsEnumBankAccountType? = nil,
      charge_amount : Float64? = nil,
      currency : String? = nil,
      description : String? = nil,
      input : String? = nil,
      min_postal_code_length : Int32? = nil,
      parameter : String? = nil,
      payment_connector : String? = nil,
      payment_method : Twilio::PaymentsEnumPaymentMethod? = nil,
      postal_code : Bool? = nil,
      security_code : Bool? = nil,
      timeout : Int32? = nil,
      token_type : Twilio::PaymentsEnumTokenType? = nil,
      valid_card_types : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_payments ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_PAYMENTS_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if idempotency_key.nil?
        unless (_idempotency_key = idempotency_key).nil?
        end
        raise ArgumentError.new("\"status_callback\" is required and cannot be null") if status_callback.nil?
        unless (_status_callback = status_callback).nil?
        end
        unless (_bank_account_type = bank_account_type).nil?
          _bank_account_type.validate
        end
        unless (_charge_amount = charge_amount).nil?
        end
        unless (_currency = currency).nil?
        end
        unless (_description = description).nil?
        end
        unless (_input = input).nil?
        end
        unless (_min_postal_code_length = min_postal_code_length).nil?
        end
        unless (_parameter = parameter).nil?
        end
        unless (_payment_connector = payment_connector).nil?
        end
        unless (_payment_method = payment_method).nil?
          _payment_method.validate
        end
        unless (_postal_code = postal_code).nil?
        end
        unless (_security_code = security_code).nil?
        end
        unless (_timeout = timeout).nil?
        end
        unless (_token_type = token_type).nil?
          _token_type.validate
        end
        unless (_valid_card_types = valid_card_types).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("BankAccountType", bank_account_type.to_s) if !bank_account_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ChargeAmount", charge_amount.to_s) if !charge_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Input", input.to_s) if !input.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MinPostalCodeLength", min_postal_code_length.to_s) if !min_postal_code_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Parameter", parameter.to_s) if !parameter.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PaymentConnector", payment_connector.to_s) if !payment_connector.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PaymentMethod", payment_method.to_s) if !payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SecurityCode", security_code.to_s) if !security_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TokenType", token_type.to_s) if !token_type.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ValidCardTypes", valid_card_types.to_s) if !valid_card_types.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Twilio::Queue]
    def create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = create_queue_with_http_info(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size)
      data
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def create_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_queue(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return nil
    def create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_queue(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size).execute(&block)
    end

    CREATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_max_size = max_size).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxSize", max_size.to_s) if !max_size.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = create_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def create_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping]
    def create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
      data, _status_code, _headers = create_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)
      data
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, response status code and response headers
    def create_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Create a new IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param ip_access_control_list_sid [String?] The SID of the IpAccessControlList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID                    = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("IpAccessControlListSid", ip_access_control_list_sid.to_s) if !ip_access_control_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = create_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def create_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a new credential list mapping resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_sid [String?] The SID of the SIP domain that will contain the new resource.
    # @required @param credential_list_sid [String?] The SID of the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return [Twilio::SipSipCredentialListSipCredential]
    def create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = create_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username)
      data
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def create_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Create a new credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list to include the created credential.
    # @required @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @required @param username [String?] The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
    # @return nil
    def create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, password: password, username: username).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      password : String? = nil,
      username : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_credential ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"password\" is required and cannot be null") if password.nil?
        unless (_password = password).nil?
        end
        raise ArgumentError.new("\"username\" is required and cannot be null") if username.nil?
        unless (_username = username).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Password", password.to_s) if !password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Username", username.to_s) if !username.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return [Twilio::SipSipCredentialList]
    def create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = create_sip_credential_list_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def create_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential_list(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Create a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the CredentialList, up to 64 characters long.
    # @return nil
    def create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential_list(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_credential_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipCredentialListMapping]
    def create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipCredentialListMapping
      data, _status_code, _headers = create_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)
      data
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipCredentialListMapping, response status code and response headers
    def create_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipCredentialListMapping.from_json(body), status_code, headers)
    end

    # Create a CredentialListMapping resource for an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    # @required @param credential_list_sid [String?] A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    # @return nil
    def create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, credential_list_sid: credential_list_sid).execute(&block)
    end

    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID          = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID             = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      credential_list_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, CREATE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, CREATE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CredentialListSid", credential_list_sid.to_s) if !credential_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return [Twilio::SipSipDomain]
    def create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = create_sip_domain_with_http_info(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)
      data
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def create_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_domain(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Create a new Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should when the domain receives a call.
    # @return nil
    def create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_domain(account_sid: account_sid, domain_name: domain_name, byoc_trunk_sid: byoc_trunk_sid, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url).execute(&block)
    end

    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID          = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID             = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID          = /^BY[0-9a-fA-F]{32}$/
    CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    CREATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID    = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_domain(
      *,
      account_sid : String? = @account_sid,
      domain_name : String? = nil,
      byoc_trunk_sid : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_domain ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_name\" is required and cannot be null") if domain_name.nil?
        unless (_domain_name = domain_name).nil?
        end
        unless (_byoc_trunk_sid = byoc_trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("byoc_trunk_sid", _byoc_trunk_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID)
        end
        unless (_emergency_caller_sid = emergency_caller_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_caller_sid", emergency_caller_sid.to_s.size, CREATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_caller_sid", emergency_caller_sid.to_s.size, CREATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_caller_sid", _emergency_caller_sid, CREATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID)
        end
        unless (_emergency_calling_enabled = emergency_calling_enabled).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_secure = secure).nil?
        end
        unless (_sip_registration = sip_registration).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_status_callback_method = voice_status_callback_method).nil?
          _voice_status_callback_method.validate
        end
        unless (_voice_status_callback_url = voice_status_callback_url).nil?
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ByocTrunkSid", byoc_trunk_sid.to_s) if !byoc_trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DomainName", domain_name.to_s) if !domain_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallerSid", emergency_caller_sid.to_s) if !emergency_caller_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallingEnabled", emergency_calling_enabled.to_s) if !emergency_calling_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Secure", secure.to_s) if !secure.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipRegistration", sip_registration.to_s) if !sip_registration.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackMethod", voice_status_callback_method.to_s) if !voice_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackUrl", voice_status_callback_url.to_s) if !voice_status_callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return [Twilio::SipSipIpAccessControlList]
    def create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = create_sip_ip_access_control_list_with_http_info(account_sid: account_sid, friendly_name: friendly_name)
      data
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def create_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_access_control_list(account_sid: account_sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Create a new IpAccessControlList resource
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param friendly_name [String?] A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    # @return nil
    def create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_access_control_list(account_sid: account_sid, friendly_name: friendly_name).execute(&block)
    end

    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_ip_access_control_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return [Twilio::SipSipDomainSipIpAccessControlListMapping]
    def create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Twilio::SipSipDomainSipIpAccessControlListMapping
      data, _status_code, _headers = create_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)
      data
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return [Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipIpAccessControlListMapping, response status code and response headers
    def create_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Create a new IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param ip_access_control_list_sid [String?] The unique id of the IP access control list to map to the SIP domain.
    # @return nil
    def create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, ip_access_control_list_sid: ip_access_control_list_sid).execute(&block)
    end

    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID                 = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID                    = /^SD[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      ip_access_control_list_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("IpAccessControlListSid", ip_access_control_list_sid.to_s) if !ip_access_control_list_sid.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = create_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length)
      data
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def create_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Create a new IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid with which to associate the created IpAddress resource.
    # @required @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @required @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @return nil
    def create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, friendly_name: friendly_name, ip_address: ip_address, cidr_prefix_length: cidr_prefix_length).execute(&block)
    end

    CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    CREATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    CREATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      cidr_prefix_length : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_sip_ip_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, CREATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, CREATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
        raise ArgumentError.new("\"ip_address\" is required and cannot be null") if ip_address.nil?
        unless (_ip_address = ip_address).nil?
        end
        unless (_cidr_prefix_length = cidr_prefix_length).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CidrPrefixLength", cidr_prefix_length.to_s) if !cidr_prefix_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IpAddress", ip_address.to_s) if !ip_address.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return [Twilio::Token]
    def create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Twilio::Token
      data, _status_code, _headers = create_token_with_http_info(account_sid: account_sid, ttl: ttl)
      data
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return [Tuple(Twilio::Token, Integer, Hash)] Twilio::Token, response status code and response headers
    def create_token_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Tuple(Twilio::Token, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_token(account_sid: account_sid, ttl: ttl)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Token.from_json(body), status_code, headers)
    end

    # Create a new token for ICE servers
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @optional @param ttl [Int32?] The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
    # @return nil
    def create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_token(account_sid: account_sid, ttl: ttl).execute(&block)
    end

    CREATE_TOKEN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_TOKEN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_TOKEN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_token(
      *,
      account_sid : String? = @account_sid,
      ttl : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_token ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_TOKEN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_TOKEN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_TOKEN_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_ttl = ttl).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Tokens.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Ttl", ttl.to_s) if !ttl.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return [Twilio::UsageUsageTrigger]
    def create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = create_usage_trigger_with_http_info(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by)
      data
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def create_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_usage_trigger(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Create a new UsageTrigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @required @param trigger_value [String?] The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    # @required @param usage_category [Twilio::UsageRecordEnumCategory?]
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?]
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?]
    # @return nil
    def create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_usage_trigger(account_sid: account_sid, callback_url: callback_url, trigger_value: trigger_value, usage_category: usage_category, callback_method: callback_method, friendly_name: friendly_name, recurring: recurring, trigger_by: trigger_by).execute(&block)
    end

    CREATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      callback_url : String? = nil,
      trigger_value : String? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      friendly_name : String? = nil,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"callback_url\" is required and cannot be null") if callback_url.nil?
        unless (_callback_url = callback_url).nil?
        end
        raise ArgumentError.new("\"trigger_value\" is required and cannot be null") if trigger_value.nil?
        unless (_trigger_value = trigger_value).nil?
        end
        raise ArgumentError.new("\"usage_category\" is required and cannot be null") if usage_category.nil?
        unless (_usage_category = usage_category).nil?
          _usage_category.validate
        end
        unless (_callback_method = callback_method).nil?
          _callback_method.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_recurring = recurring).nil?
          _recurring.validate
        end
        unless (_trigger_by = trigger_by).nil?
          _trigger_by.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackMethod", callback_method.to_s) if !callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackUrl", callback_url.to_s) if !callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Recurring", recurring.to_s) if !recurring.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TriggerBy", trigger_by.to_s) if !trigger_by.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TriggerValue", trigger_value.to_s) if !trigger_value.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("UsageCategory", usage_category.to_s) if !usage_category.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return [Twilio::CallUserDefinedMessage]
    def create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Twilio::CallUserDefinedMessage
      data, _status_code, _headers = create_user_defined_message_with_http_info(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key)
      data
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return [Tuple(Twilio::CallUserDefinedMessage, Integer, Hash)] Twilio::CallUserDefinedMessage, response status code and response headers
    def create_user_defined_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Tuple(Twilio::CallUserDefinedMessage, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_user_defined_message(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_user_defined_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallUserDefinedMessage.from_json(body), status_code, headers)
    end

    # Create a new User Defined Message for the given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    # @required @param content [String?] The User Defined Message in the form of URL-encoded JSON string.
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @return nil
    def create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_user_defined_message(account_sid: account_sid, call_sid: call_sid, content: content, idempotency_key: idempotency_key).execute(&block)
    end

    CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_user_defined_message(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      content : String? = nil,
      idempotency_key : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_user_defined_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_USER_DEFINED_MESSAGE_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"content\" is required and cannot be null") if content.nil?
        unless (_content = content).nil?
        end
        unless (_idempotency_key = idempotency_key).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Content", content.to_s) if !content.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_user_defined_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Twilio::CallUserDefinedMessageSubscription]
    def create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Twilio::CallUserDefinedMessageSubscription
      data, _status_code, _headers = create_user_defined_message_subscription_with_http_info(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method)
      data
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::CallUserDefinedMessageSubscription, Integer, Hash)] Twilio::CallUserDefinedMessageSubscription, response status code and response headers
    def create_user_defined_message_subscription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::CallUserDefinedMessageSubscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_user_defined_message_subscription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallUserDefinedMessageSubscription.from_json(body), status_code, headers)
    end

    # Subscribe to User Defined Messages for a given Call SID.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    # @required @param callback [String?] The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param idempotency_key [String?] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    # @optional @param method [Twilio::HttpMethod?]
    # @return nil
    def create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, callback: callback, idempotency_key: idempotency_key, method: method).execute(&block)
    end

    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID    = 34
    CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      callback : String? = nil,
      idempotency_key : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_user_defined_message_subscription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"callback\" is required and cannot be null") if callback.nil?
        unless (_callback = callback).nil?
        end
        unless (_idempotency_key = idempotency_key).nil?
        end
        unless (_method = method).nil?
          _method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Callback", callback.to_s) if !callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_user_defined_message_subscription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Twilio::ValidationRequest]
    def create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Twilio::ValidationRequest
      data, _status_code, _headers = create_validation_request_with_http_info(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::ValidationRequest, Integer, Hash)] Twilio::ValidationRequest, response status code and response headers
    def create_validation_request_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::ValidationRequest, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_validation_request(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#create_validation_request\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ValidationRequest.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
    # @required @param phone_number [String?] The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
    # @optional @param call_delay [Int32?] The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
    # @optional @param extension [String?] The digits to dial after connecting the verification call.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @return nil
    def create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_validation_request(account_sid: account_sid, phone_number: phone_number, call_delay: call_delay, extension: extension, friendly_name: friendly_name, status_callback: status_callback, status_callback_method: status_callback_method).execute(&block)
    end

    CREATE_VALIDATION_REQUEST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_VALIDATION_REQUEST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_VALIDATION_REQUEST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_validation_request(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      call_delay : Int32? = nil,
      extension : String? = nil,
      friendly_name : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.create_validation_request ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_VALIDATION_REQUEST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_VALIDATION_REQUEST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_VALIDATION_REQUEST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"phone_number\" is required and cannot be null") if phone_number.nil?
        unless (_phone_number = phone_number).nil?
        end
        unless (_call_delay = call_delay).nil?
        end
        unless (_extension = extension).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallDelay", call_delay.to_s) if !call_delay.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Extension", extension.to_s) if !extension.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PhoneNumber", phone_number.to_s) if !phone_number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.create_validation_request",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return [Nil]
    def delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_address_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_address(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to delete.
    # @return nil
    def delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_address(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    DELETE_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    DELETE_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return [Nil]
    def delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_application_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_application(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete the application by the specified application sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to delete.
    # @return nil
    def delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_application(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    DELETE_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    DELETE_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_APPLICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return [Nil]
    def delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_call_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
    # @required @param sid [String?] The Twilio-provided Call SID that uniquely identifies the Call resource to delete
    # @return nil
    def delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_call ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Nil]
    def delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_call_feedback_summary_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call_feedback_summary(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return nil
    def delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call_feedback_summary(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID            = /^FS[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_call_feedback_summary ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Nil]
    def delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return nil
    def delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    DELETE_CALL_RECORDING_MAX_LENGTH_FOR_SID         = 34
    DELETE_CALL_RECORDING_MIN_LENGTH_FOR_SID         = 34
    DELETE_CALL_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_call_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, DELETE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CALL_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CALL_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CALL_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return [Nil]
    def delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return nil
    def delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid).execute(&block)
    end

    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID            = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID            = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_SID               = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_conference_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return [Nil]
    def delete_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_connect_app_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_connect_app(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return nil
    def delete_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_connect_app(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_CONNECT_APP_MAX_LENGTH_FOR_SID         = 34
    DELETE_CONNECT_APP_MIN_LENGTH_FOR_SID         = 34
    DELETE_CONNECT_APP_PATTERN_FOR_SID            = /^CN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CONNECT_APP_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CONNECT_APP_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CONNECT_APP_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.
    # @return [Nil]
    def delete_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_incoming_phone_number_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_incoming_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_incoming_phone_number(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_incoming_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.
    # @return nil
    def delete_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_incoming_phone_number(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID         = 34
    DELETE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID         = 34
    DELETE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_incoming_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_incoming_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove the assignment of an Add-on installation from the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_incoming_phone_number_assigned_add_on_with_http_info(account_sid: account_sid, resource_sid: resource_sid, sid: sid)
      nil
    end

    # Remove the assignment of an Add-on installation from the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_incoming_phone_number_assigned_add_on_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_incoming_phone_number_assigned_add_on\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Remove the assignment of an Add-on installation from the Number specified.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to delete.
    # @return nil
    def delete_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, sid: sid).execute(&block)
    end

    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID  = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID  = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID     = /^AC[0-9a-fA-F]{32}$/
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID    = /^PN[0-9a-fA-F]{32}$/
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_SID          = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_SID          = 34
    DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_SID             = /^XE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_incoming_phone_number_assigned_add_on ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_incoming_phone_number_assigned_add_on",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to delete.
    # @return [Nil]
    def delete_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_key_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_key(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to delete.
    # @return nil
    def delete_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_key(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_KEY_MAX_LENGTH_FOR_SID         = 34
    DELETE_KEY_MIN_LENGTH_FOR_SID         = 34
    DELETE_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_KEY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return [Nil]
    def delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_media_with_http_info(account_sid: account_sid, message_sid: message_sid, sid: sid)
      nil
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_media(account_sid: account_sid, message_sid: message_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete media from your account. Once delete, you will no longer be billed
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to delete
    # @return nil
    def delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_media(account_sid: account_sid, message_sid: message_sid, sid: sid).execute(&block)
    end

    DELETE_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    DELETE_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    DELETE_MEDIA_MAX_LENGTH_FOR_SID         = 34
    DELETE_MEDIA_MIN_LENGTH_FOR_SID         = 34
    DELETE_MEDIA_PATTERN_FOR_SID            = /^ME[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, DELETE_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_MEDIA_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_MEDIA_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_MEDIA_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return [Nil]
    def delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_message_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_message(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Deletes a message record from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to delete.
    # @return nil
    def delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_message(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    DELETE_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    DELETE_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_MESSAGE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return [Nil]
    def delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_outgoing_caller_id(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete the caller-id specified from the account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
    # @return nil
    def delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_outgoing_caller_id(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_outgoing_caller_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Nil]
    def delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Nil
      delete_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)
      nil
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return nil
    def delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid).execute(&block)
    end

    DELETE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    DELETE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_participant ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, DELETE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, DELETE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, DELETE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return [Nil]
    def delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_queue_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_queue(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return nil
    def delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_queue(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_QUEUE_MAX_LENGTH_FOR_SID         = 34
    DELETE_QUEUE_MIN_LENGTH_FOR_SID         = 34
    DELETE_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_QUEUE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Nil]
    def delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_recording_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to delete.
    # @return nil
    def delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_MAX_LENGTH_FOR_SID         = 34
    DELETE_RECORDING_MIN_LENGTH_FOR_SID         = 34
    DELETE_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return [Nil]
    def delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, sid: sid)
      nil
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a result and purge all associated Payloads
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the result to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    # @return nil
    def delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID              = /^XR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_recording_add_on_result ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return [Nil]
    def delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)
      nil
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a payload from the result along with all associated Data
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to delete belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
    # @return nil
    def delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID               = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID               = 34
    DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID                  = /^XH[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_recording_add_on_result_payload ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Nil]
    def delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return nil
    def delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid).execute(&block)
    end

    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID           = 34
    DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID              = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_recording_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return [Nil]
    def delete_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_signing_key_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_signing_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_signing_key(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_signing_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return nil
    def delete_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_signing_key(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIGNING_KEY_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIGNING_KEY_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIGNING_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_signing_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIGNING_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIGNING_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIGNING_KEY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_signing_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return nil
    def delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IP Access Control List mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
    # @return nil
    def delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Nil]
    def delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential list mapping from the requested domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
    # @return nil
    def delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return [Nil]
    def delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)
      nil
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @required @param sid [String?] The unique id that identifies the resource to delete.
    # @return nil
    def delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    DELETE_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_credential ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Nil]
    def delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return nil
    def delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_credential_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return [Nil]
    def delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_domain_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_domain(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    # @return nil
    def delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_domain(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_DOMAIN_PATTERN_FOR_SID            = /^SD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_domain ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_DOMAIN_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_access_control_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAccessControlList from the requested account
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_access_control_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_ip_access_control_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      nil
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Nil]
    def delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)
      nil
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to delete.
    # @return nil
    def delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid).execute(&block)
    end

    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    DELETE_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_sip_ip_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a transcription from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Nil]
    def delete_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_transcription_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Delete a transcription from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_transcription(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a transcription from the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to delete.
    # @return nil
    def delete_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_transcription(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_TRANSCRIPTION_MAX_LENGTH_FOR_SID         = 34
    DELETE_TRANSCRIPTION_MIN_LENGTH_FOR_SID         = 34
    DELETE_TRANSCRIPTION_PATTERN_FOR_SID            = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return [Nil]
    def delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_usage_trigger_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_usage_trigger(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    # @return nil
    def delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_usage_trigger(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    DELETE_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return [Nil]
    def delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_user_defined_message_subscription_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      nil
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_user_defined_message_subscription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#delete_user_defined_message_subscription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a specific User Defined Message Subscription.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    # @required @param sid [String?] The SID that uniquely identifies this User Defined Message Subscription.
    # @return nil
    def delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_user_defined_message_subscription(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID    = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID    = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_SID         = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_SID         = 34
    DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_SID            = /^ZY[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_user_defined_message_subscription(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.delete_user_defined_message_subscription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_user_defined_message_subscription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return [Twilio::Account]
    def fetch_account(
      *,
      sid : String? = nil
    ) : Twilio::Account
      data, _status_code, _headers = fetch_account_with_http_info(sid: sid)
      data
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return [Tuple(Twilio::Account, Integer, Hash)] Twilio::Account, response status code and response headers
    def fetch_account_with_http_info(
      *,
      sid : String? = nil
    ) : Tuple(Twilio::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_account(sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Account.from_json(body), status_code, headers)
    end

    # Fetch the account specified by the provided Account Sid
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to fetch
    # @return nil
    def fetch_account(
      *,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_account(sid: sid).execute(&block)
    end

    FETCH_ACCOUNT_MAX_LENGTH_FOR_SID = 34
    FETCH_ACCOUNT_MIN_LENGTH_FOR_SID = 34
    FETCH_ACCOUNT_PATTERN_FOR_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_account(
      *,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_ACCOUNT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_ACCOUNT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_ACCOUNT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{Sid}.json".sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return [Twilio::Address]
    def fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = fetch_address_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def fetch_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_address(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to fetch.
    # @return nil
    def fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_address(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    FETCH_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    FETCH_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return [Twilio::Application]
    def fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = fetch_application_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def fetch_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_application(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Fetch the application specified by the provided sid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to fetch.
    # @return nil
    def fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_application(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    FETCH_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    FETCH_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_APPLICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of an authorized-connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
    # @required @param connect_app_sid [String?] The SID of the Connect App to fetch.
    # @return [Twilio::AuthorizedConnectApp]
    def fetch_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      connect_app_sid : String? = nil
    ) : Twilio::AuthorizedConnectApp
      data, _status_code, _headers = fetch_authorized_connect_app_with_http_info(account_sid: account_sid, connect_app_sid: connect_app_sid)
      data
    end

    # Fetch an instance of an authorized-connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
    # @required @param connect_app_sid [String?] The SID of the Connect App to fetch.
    # @return [Tuple(Twilio::AuthorizedConnectApp, Integer, Hash)] Twilio::AuthorizedConnectApp, response status code and response headers
    def fetch_authorized_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      connect_app_sid : String? = nil
    ) : Tuple(Twilio::AuthorizedConnectApp, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_authorized_connect_app(account_sid: account_sid, connect_app_sid: connect_app_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_authorized_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::AuthorizedConnectApp.from_json(body), status_code, headers)
    end

    # Fetch an instance of an authorized-connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
    # @required @param connect_app_sid [String?] The SID of the Connect App to fetch.
    # @return nil
    def fetch_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      connect_app_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_authorized_connect_app(account_sid: account_sid, connect_app_sid: connect_app_sid).execute(&block)
    end

    FETCH_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID     = 34
    FETCH_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID     = 34
    FETCH_AUTHORIZED_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID        = /^AC[0-9a-fA-F]{32}$/
    FETCH_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_CONNECT_APP_SID = 34
    FETCH_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_CONNECT_APP_SID = 34
    FETCH_AUTHORIZED_CONNECT_APP_PATTERN_FOR_CONNECT_APP_SID    = /^CN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      connect_app_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_authorized_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_AUTHORIZED_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"connect_app_sid\" is required and cannot be null") if connect_app_sid.nil?
        unless (_connect_app_sid = connect_app_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("connect_app_sid", connect_app_sid.to_s.size, FETCH_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_CONNECT_APP_SID)
          OpenApi::PrimitiveValidator.validate_min_length("connect_app_sid", connect_app_sid.to_s.size, FETCH_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_CONNECT_APP_SID)
          OpenApi::PrimitiveValidator.validate_pattern("connect_app_sid", _connect_app_sid, FETCH_AUTHORIZED_CONNECT_APP_PATTERN_FOR_CONNECT_APP_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConnectAppSid" + "}", URI.encode_path(connect_app_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_authorized_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.
    # @return [Twilio::AvailablePhoneNumberCountry]
    def fetch_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil
    ) : Twilio::AvailablePhoneNumberCountry
      data, _status_code, _headers = fetch_available_phone_number_country_with_http_info(account_sid: account_sid, country_code: country_code)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.
    # @return [Tuple(Twilio::AvailablePhoneNumberCountry, Integer, Hash)] Twilio::AvailablePhoneNumberCountry, response status code and response headers
    def fetch_available_phone_number_country_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil
    ) : Tuple(Twilio::AvailablePhoneNumberCountry, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_available_phone_number_country(account_sid: account_sid, country_code: country_code)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_available_phone_number_country\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::AvailablePhoneNumberCountry.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.
    # @return nil
    def fetch_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_available_phone_number_country(account_sid: account_sid, country_code: country_code).execute(&block)
    end

    FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_available_phone_number_country ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_available_phone_number_country",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @return [Twilio::Balance]
    def fetch_balance(
      *,
      account_sid : String? = @account_sid
    ) : Twilio::Balance
      data, _status_code, _headers = fetch_balance_with_http_info(account_sid: account_sid)
      data
    end

    # Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @return [Tuple(Twilio::Balance, Integer, Hash)] Twilio::Balance, response status code and response headers
    def fetch_balance_with_http_info(
      *,
      account_sid : String? = @account_sid
    ) : Tuple(Twilio::Balance, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_balance(account_sid: account_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_balance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Balance.from_json(body), status_code, headers)
    end

    # Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @return nil
    def fetch_balance(
      *,
      account_sid : String? = @account_sid,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_balance(account_sid: account_sid).execute(&block)
    end

    FETCH_BALANCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_BALANCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_BALANCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_balance(
      *,
      account_sid : String? = @account_sid
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_balance ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_BALANCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_BALANCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_BALANCE_PATTERN_FOR_ACCOUNT_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Balance.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return [Twilio::Call]
    def fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = fetch_call_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def fetch_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Fetch the call specified by the provided Call SID
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
    # @required @param sid [String?] The SID of the Call resource to fetch.
    # @return nil
    def fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_call ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return [Twilio::CallCallFeedback]
    def fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Twilio::CallCallFeedback
      data, _status_code, _headers = fetch_call_feedback_with_http_info(account_sid: account_sid, call_sid: call_sid)
      data
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return [Tuple(Twilio::CallCallFeedback, Integer, Hash)] Twilio::CallCallFeedback, response status code and response headers
    def fetch_call_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Tuple(Twilio::CallCallFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_feedback(account_sid: account_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_call_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedback.from_json(body), status_code, headers)
    end

    # Fetch a Feedback resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @return nil
    def fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_feedback(account_sid: account_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_FEEDBACK_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_call_feedback ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_FEEDBACK_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_FEEDBACK_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_FEEDBACK_PATTERN_FOR_CALL_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_call_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Twilio::CallCallFeedbackSummary]
    def fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::CallCallFeedbackSummary
      data, _status_code, _headers = fetch_call_feedback_summary_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return [Tuple(Twilio::CallCallFeedbackSummary, Integer, Hash)] Twilio::CallCallFeedbackSummary, response status code and response headers
    def fetch_call_feedback_summary_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallFeedbackSummary, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_feedback_summary(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_call_feedback_summary\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedbackSummary.from_json(body), status_code, headers)
    end

    # Fetch a FeedbackSummary resource from a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies this resource.
    # @return nil
    def fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_feedback_summary(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID            = /^FS[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_feedback_summary(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_call_feedback_summary ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_FEEDBACK_SUMMARY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_FEEDBACK_SUMMARY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_call_feedback_summary",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return [Twilio::CallCallNotificationInstance]
    def fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::CallCallNotificationInstance
      data, _status_code, _headers = fetch_call_notification_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return [Tuple(Twilio::CallCallNotificationInstance, Integer, Hash)] Twilio::CallCallNotificationInstance, response status code and response headers
    def fetch_call_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallNotificationInstance, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_notification(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_call_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallNotificationInstance.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
    # @return nil
    def fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_notification(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_NOTIFICATION_PATTERN_FOR_SID            = /^NO[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_call_notification ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_NOTIFICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_NOTIFICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_NOTIFICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_call_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return [Twilio::CallCallRecording]
    def fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = fetch_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid)
      data
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def fetch_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @return nil
    def fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid).execute(&block)
    end

    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    FETCH_CALL_RECORDING_MAX_LENGTH_FOR_SID         = 34
    FETCH_CALL_RECORDING_MIN_LENGTH_FOR_SID         = 34
    FETCH_CALL_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_call_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, FETCH_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CALL_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CALL_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CALL_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return [Twilio::Conference]
    def fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Conference
      data, _status_code, _headers = fetch_conference_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return [Tuple(Twilio::Conference, Integer, Hash)] Twilio::Conference, response status code and response headers
    def fetch_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Conference, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_conference(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Conference.from_json(body), status_code, headers)
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return nil
    def fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_conference(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_MAX_LENGTH_FOR_SID         = 34
    FETCH_CONFERENCE_MIN_LENGTH_FOR_SID         = 34
    FETCH_CONFERENCE_PATTERN_FOR_SID            = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_conference ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CONFERENCE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CONFERENCE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CONFERENCE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return [Twilio::ConferenceConferenceRecording]
    def fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::ConferenceConferenceRecording
      data, _status_code, _headers = fetch_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid)
      data
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return [Tuple(Twilio::ConferenceConferenceRecording, Integer, Hash)] Twilio::ConferenceConferenceRecording, response status code and response headers
    def fetch_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::ConferenceConferenceRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceConferenceRecording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return nil
    def fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid).execute(&block)
    end

    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID            = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID            = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_SID               = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_conference_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return [Twilio::ConnectApp]
    def fetch_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::ConnectApp
      data, _status_code, _headers = fetch_connect_app_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return [Tuple(Twilio::ConnectApp, Integer, Hash)] Twilio::ConnectApp, response status code and response headers
    def fetch_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::ConnectApp, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_connect_app(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConnectApp.from_json(body), status_code, headers)
    end

    # Fetch an instance of a connect-app
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
    # @return nil
    def fetch_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_connect_app(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CONNECT_APP_MAX_LENGTH_FOR_SID         = 34
    FETCH_CONNECT_APP_MIN_LENGTH_FOR_SID         = 34
    FETCH_CONNECT_APP_PATTERN_FOR_SID            = /^CN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CONNECT_APP_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CONNECT_APP_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CONNECT_APP_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an incoming-phone-number belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.
    # @return [Twilio::IncomingPhoneNumber]
    def fetch_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::IncomingPhoneNumber
      data, _status_code, _headers = fetch_incoming_phone_number_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an incoming-phone-number belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.
    # @return [Tuple(Twilio::IncomingPhoneNumber, Integer, Hash)] Twilio::IncomingPhoneNumber, response status code and response headers
    def fetch_incoming_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumber, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_incoming_phone_number(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_incoming_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumber.from_json(body), status_code, headers)
    end

    # Fetch an incoming-phone-number belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.
    # @return nil
    def fetch_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_incoming_phone_number(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID         = 34
    FETCH_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID         = 34
    FETCH_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_incoming_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_incoming_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of an Add-on installation currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return [Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn]
    def fetch_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
      data, _status_code, _headers = fetch_incoming_phone_number_assigned_add_on_with_http_info(account_sid: account_sid, resource_sid: resource_sid, sid: sid)
      data
    end

    # Fetch an instance of an Add-on installation currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, Integer, Hash)] Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, response status code and response headers
    def fetch_incoming_phone_number_assigned_add_on_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_incoming_phone_number_assigned_add_on\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOn.from_json(body), status_code, headers)
    end

    # Fetch an instance of an Add-on installation currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, sid: sid).execute(&block)
    end

    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID  = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID  = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID     = /^AC[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID    = /^PN[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_SID          = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_SID          = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_SID             = /^XE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_incoming_phone_number_assigned_add_on ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_incoming_phone_number_assigned_add_on",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of an Extension for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return [Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension]
    def fetch_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
      data, _status_code, _headers = fetch_incoming_phone_number_assigned_add_on_extension_with_http_info(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, sid: sid)
      data
    end

    # Fetch an instance of an Extension for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension, Integer, Hash)] Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension, response status code and response headers
    def fetch_incoming_phone_number_assigned_add_on_extension_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_incoming_phone_number_assigned_add_on_extension(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_incoming_phone_number_assigned_add_on_extension\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension.from_json(body), status_code, headers)
    end

    # Fetch an instance of an Extension for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_incoming_phone_number_assigned_add_on_extension(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, sid: sid).execute(&block)
    end

    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_RESOURCE_SID        = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_RESOURCE_SID        = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_RESOURCE_SID           = /^PN[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ASSIGNED_ADD_ON_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ASSIGNED_ADD_ON_SID = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ASSIGNED_ADD_ON_SID    = /^XE[0-9a-fA-F]{32}$/
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_SID                 = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_SID                 = 34
    FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_SID                    = /^XF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_incoming_phone_number_assigned_add_on_extension ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_RESOURCE_SID)
        end
        raise ArgumentError.new("\"assigned_add_on_sid\" is required and cannot be null") if assigned_add_on_sid.nil?
        unless (_assigned_add_on_sid = assigned_add_on_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("assigned_add_on_sid", assigned_add_on_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ASSIGNED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_min_length("assigned_add_on_sid", assigned_add_on_sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ASSIGNED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_pattern("assigned_add_on_sid", _assigned_add_on_sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ASSIGNED_ADD_ON_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s)).sub("{" + "AssignedAddOnSid" + "}", URI.encode_path(assigned_add_on_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_incoming_phone_number_assigned_add_on_extension",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to fetch.
    # @return [Twilio::Key]
    def fetch_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Key
      data, _status_code, _headers = fetch_key_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to fetch.
    # @return [Tuple(Twilio::Key, Integer, Hash)] Twilio::Key, response status code and response headers
    def fetch_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Key, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_key(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Key.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to fetch.
    # @return nil
    def fetch_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_key(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_KEY_MAX_LENGTH_FOR_SID         = 34
    FETCH_KEY_MIN_LENGTH_FOR_SID         = 34
    FETCH_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_KEY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return [Twilio::MessageMedia]
    def fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::MessageMedia
      data, _status_code, _headers = fetch_media_with_http_info(account_sid: account_sid, message_sid: message_sid, sid: sid)
      data
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return [Tuple(Twilio::MessageMedia, Integer, Hash)] Twilio::MessageMedia, response status code and response headers
    def fetch_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::MessageMedia, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_media(account_sid: account_sid, message_sid: message_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::MessageMedia.from_json(body), status_code, headers)
    end

    # Fetch a single media instance belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Media resource to fetch
    # @return nil
    def fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_media(account_sid: account_sid, message_sid: message_sid, sid: sid).execute(&block)
    end

    FETCH_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    FETCH_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    FETCH_MEDIA_MAX_LENGTH_FOR_SID         = 34
    FETCH_MEDIA_MIN_LENGTH_FOR_SID         = 34
    FETCH_MEDIA_PATTERN_FOR_SID            = /^ME[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, FETCH_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_MEDIA_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_MEDIA_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_MEDIA_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return [Twilio::QueueMember]
    def fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Twilio::QueueMember
      data, _status_code, _headers = fetch_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid)
      data
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return [Tuple(Twilio::QueueMember, Integer, Hash)] Twilio::QueueMember, response status code and response headers
    def fetch_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Twilio::QueueMember, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::QueueMember.from_json(body), status_code, headers)
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return nil
    def fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    FETCH_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    FETCH_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, FETCH_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, FETCH_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, FETCH_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return [Twilio::Message]
    def fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Message
      data, _status_code, _headers = fetch_message_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def fetch_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_message(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # Fetch a message belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to fetch.
    # @return nil
    def fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_message(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    FETCH_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    FETCH_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_MESSAGE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a notification belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Notification resource to fetch.
    # @return [Twilio::NotificationInstance]
    def fetch_notification(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::NotificationInstance
      data, _status_code, _headers = fetch_notification_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a notification belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Notification resource to fetch.
    # @return [Tuple(Twilio::NotificationInstance, Integer, Hash)] Twilio::NotificationInstance, response status code and response headers
    def fetch_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::NotificationInstance, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_notification(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::NotificationInstance.from_json(body), status_code, headers)
    end

    # Fetch a notification belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Notification resource to fetch.
    # @return nil
    def fetch_notification(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_notification(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_NOTIFICATION_MAX_LENGTH_FOR_SID         = 34
    FETCH_NOTIFICATION_MIN_LENGTH_FOR_SID         = 34
    FETCH_NOTIFICATION_PATTERN_FOR_SID            = /^NO[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_notification(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_notification ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_NOTIFICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_NOTIFICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_NOTIFICATION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return [Twilio::OutgoingCallerId]
    def fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::OutgoingCallerId
      data, _status_code, _headers = fetch_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return [Tuple(Twilio::OutgoingCallerId, Integer, Hash)] Twilio::OutgoingCallerId, response status code and response headers
    def fetch_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::OutgoingCallerId, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_outgoing_caller_id(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::OutgoingCallerId.from_json(body), status_code, headers)
    end

    # Fetch an outgoing-caller-id belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
    # @return nil
    def fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_outgoing_caller_id(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_outgoing_caller_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Twilio::ConferenceParticipant]
    def fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = fetch_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)
      data
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def fetch_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return nil
    def fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    FETCH_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_participant ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, FETCH_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, FETCH_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, FETCH_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return [Twilio::Queue]
    def fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = fetch_queue_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def fetch_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_queue(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return nil
    def fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_queue(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_QUEUE_MAX_LENGTH_FOR_SID         = 34
    FETCH_QUEUE_MIN_LENGTH_FOR_SID         = 34
    FETCH_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_QUEUE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return [Twilio::Recording]
    def fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Twilio::Recording
      data, _status_code, _headers = fetch_recording_with_http_info(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted)
      data
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return [Tuple(Twilio::Recording, Integer, Hash)] Twilio::Recording, response status code and response headers
    def fetch_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Tuple(Twilio::Recording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Recording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @return nil
    def fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording(account_sid: account_sid, sid: sid, include_soft_deleted: include_soft_deleted).execute(&block)
    end

    FETCH_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_MAX_LENGTH_FOR_SID         = 34
    FETCH_RECORDING_MIN_LENGTH_FOR_SID         = 34
    FETCH_RECORDING_PATTERN_FOR_SID            = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      include_soft_deleted : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_PATTERN_FOR_SID)
        end
        unless (_include_soft_deleted = include_soft_deleted).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["IncludeSoftDeleted"] = include_soft_deleted.to_s if !include_soft_deleted.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return [Twilio::RecordingRecordingAddOnResult]
    def fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::RecordingRecordingAddOnResult
      data, _status_code, _headers = fetch_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, sid: sid)
      data
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return [Tuple(Twilio::RecordingRecordingAddOnResult, Integer, Hash)] Twilio::RecordingRecordingAddOnResult, response status code and response headers
    def fetch_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::RecordingRecordingAddOnResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::RecordingRecordingAddOnResult.from_json(body), status_code, headers)
    end

    # Fetch an instance of an AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the result to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    # @return nil
    def fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID              = /^XR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_recording_add_on_result ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_ADD_ON_RESULT_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return [Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload]
    def fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload
      data, _status_code, _headers = fetch_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)
      data
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return [Tuple(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, Integer, Hash)] Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, response status code and response headers
    def fetch_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::RecordingRecordingAddOnResultRecordingAddOnResultPayload.from_json(body), status_code, headers)
    end

    # Fetch an instance of a result payload
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payload to fetch belongs.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    # @return nil
    def fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID               = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID               = 34
    FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID                  = /^XH[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_recording_add_on_result_payload ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Twilio::Transcription]
    def fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::Transcription
      data, _status_code, _headers = fetch_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Tuple(Twilio::Transcription, Integer, Hash)] Twilio::Transcription, response status code and response headers
    def fetch_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::Transcription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Transcription.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return nil
    def fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, sid: sid).execute(&block)
    end

    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID           = 34
    FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID              = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_recording_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_RECORDING_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a short code
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
    # @return [Twilio::ShortCode]
    def fetch_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::ShortCode
      data, _status_code, _headers = fetch_short_code_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a short code
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
    # @return [Tuple(Twilio::ShortCode, Integer, Hash)] Twilio::ShortCode, response status code and response headers
    def fetch_short_code_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::ShortCode, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_short_code(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_short_code\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ShortCode.from_json(body), status_code, headers)
    end

    # Fetch an instance of a short code
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
    # @return nil
    def fetch_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_short_code(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SHORT_CODE_MAX_LENGTH_FOR_SID         = 34
    FETCH_SHORT_CODE_MIN_LENGTH_FOR_SID         = 34
    FETCH_SHORT_CODE_PATTERN_FOR_SID            = /^SC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_short_code ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SHORT_CODE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SHORT_CODE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SHORT_CODE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_short_code",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return [Twilio::SigningKey]
    def fetch_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SigningKey
      data, _status_code, _headers = fetch_signing_key_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return [Tuple(Twilio::SigningKey, Integer, Hash)] Twilio::SigningKey, response status code and response headers
    def fetch_signing_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SigningKey, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_signing_key(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_signing_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SigningKey.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @return nil
    def fetch_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_signing_key(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIGNING_KEY_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIGNING_KEY_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIGNING_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_signing_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIGNING_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIGNING_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIGNING_KEY_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_signing_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = fetch_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def fetch_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping]
    def fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
      data, _status_code, _headers = fetch_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, response status code and response headers
    def fetch_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of an IP Access Control List mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping]
    def fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
      data, _status_code, _headers = fetch_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, response status code and response headers
    def fetch_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of a credential list mapping
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
    # @return nil
    def fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return [Twilio::SipSipCredentialListSipCredential]
    def fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = fetch_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)
      data
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def fetch_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Fetch a single credential.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credential.
    # @required @param sid [String?] The unique id that identifies the resource to fetch.
    # @return nil
    def fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    FETCH_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_credential ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Twilio::SipSipCredentialList]
    def fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = fetch_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def fetch_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Get a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @return nil
    def fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_credential_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipDomainSipCredentialListMapping]
    def fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipCredentialListMapping
      data, _status_code, _headers = fetch_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipCredentialListMapping, Integer, Hash)] Twilio::SipSipDomainSipCredentialListMapping, response status code and response headers
    def fetch_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipCredentialListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipCredentialListMapping.from_json(body), status_code, headers)
    end

    # Fetch a single CredentialListMapping resource from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return [Twilio::SipSipDomain]
    def fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = fetch_sip_domain_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def fetch_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_domain(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Fetch an instance of a Domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    # @return nil
    def fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_domain(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_DOMAIN_PATTERN_FOR_SID            = /^SD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_domain ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_DOMAIN_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipIpAccessControlList]
    def fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = fetch_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def fetch_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_access_control_list(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Fetch a specific instance of an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_access_control_list(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_ip_access_control_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Twilio::SipSipDomainSipIpAccessControlListMapping]
    def fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipDomainSipIpAccessControlListMapping
      data, _status_code, _headers = fetch_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, sid: sid)
      data
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return [Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Integer, Hash)] Twilio::SipSipDomainSipIpAccessControlListMapping, response status code and response headers
    def fetch_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipDomainSipIpAccessControlListMapping, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomainSipIpAccessControlListMapping.from_json(body), status_code, headers)
    end

    # Fetch an IpAccessControlListMapping resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to fetch.
    # @return nil
    def fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID         = 34
    FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = fetch_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)
      data
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def fetch_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Read one IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    # @required @param sid [String?] A 34 character string that uniquely identifies the IpAddress resource to fetch.
    # @return nil
    def fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid).execute(&block)
    end

    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    FETCH_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_sip_ip_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a Transcription
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Twilio::Transcription]
    def fetch_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Transcription
      data, _status_code, _headers = fetch_transcription_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a Transcription
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return [Tuple(Twilio::Transcription, Integer, Hash)] Twilio::Transcription, response status code and response headers
    def fetch_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Transcription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_transcription(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Transcription.from_json(body), status_code, headers)
    end

    # Fetch an instance of a Transcription
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
    # @return nil
    def fetch_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_transcription(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_TRANSCRIPTION_MAX_LENGTH_FOR_SID         = 34
    FETCH_TRANSCRIPTION_MIN_LENGTH_FOR_SID         = 34
    FETCH_TRANSCRIPTION_PATTERN_FOR_SID            = /^TR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_transcription(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_TRANSCRIPTION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_TRANSCRIPTION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_TRANSCRIPTION_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return [Twilio::UsageUsageTrigger]
    def fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = fetch_usage_trigger_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def fetch_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_usage_trigger(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#fetch_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Fetch and instance of a usage-trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    # @return nil
    def fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_usage_trigger(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    FETCH_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.fetch_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.fetch_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a collection of Accounts belonging to the account used to make the request
    # @optional @param friendly_name [String?] Only return the Account resources with friendly names that exactly match this name.
    # @optional @param status [Twilio::AccountEnumStatus?] Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAccountResponse]
    def list_account(
      *,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAccountResponse
      data, _status_code, _headers = list_account_with_http_info(friendly_name: friendly_name, status: status, page_size: page_size)
      data
    end

    # Retrieves a collection of Accounts belonging to the account used to make the request
    # @optional @param friendly_name [String?] Only return the Account resources with friendly names that exactly match this name.
    # @optional @param status [Twilio::AccountEnumStatus?] Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAccountResponse, Integer, Hash)] Twilio::ListAccountResponse, response status code and response headers
    def list_account_with_http_info(
      *,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAccountResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_account(friendly_name: friendly_name, status: status, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAccountResponse.from_json(body), status_code, headers)
    end

    # Retrieves a collection of Accounts belonging to the account used to make the request
    # @optional @param friendly_name [String?] Only return the Account resources with friendly names that exactly match this name.
    # @optional @param status [Twilio::AccountEnumStatus?] Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_account(
      *,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_account(friendly_name: friendly_name, status: status, page_size: page_size).execute(&block)
    end

    LIST_ACCOUNT_MAX_FOR_PAGE_SIZE = Int32.new("1000")
    LIST_ACCOUNT_MIN_FOR_PAGE_SIZE = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_account(
      *,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_account ..." }
      end

      if client_side_validation
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_status = status).nil?
          _status.validate
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_ACCOUNT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_ACCOUNT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts.json"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["Status"] = status.to_s if !status.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAddressResponse]
    def list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAddressResponse
      data, _status_code, _headers = list_address_with_http_info(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAddressResponse, Integer, Hash)] Twilio::ListAddressResponse, response status code and response headers
    def list_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAddressResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_address(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAddressResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
    # @optional @param customer_name [String?] The `customer_name` of the Address resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Address resources to read.
    # @optional @param iso_country [String?] The ISO country code of the Address resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_address(account_sid: account_sid, customer_name: customer_name, friendly_name: friendly_name, iso_country: iso_country, page_size: page_size).execute(&block)
    end

    LIST_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_ADDRESS_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_ADDRESS_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_address(
      *,
      account_sid : String? = @account_sid,
      customer_name : String? = nil,
      friendly_name : String? = nil,
      iso_country : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_customer_name = customer_name).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_iso_country = iso_country).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_ADDRESS_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_ADDRESS_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["CustomerName"] = customer_name.to_s if !customer_name.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["IsoCountry"] = iso_country.to_s if !iso_country.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListApplicationResponse]
    def list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListApplicationResponse
      data, _status_code, _headers = list_application_with_http_info(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size)
      data
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListApplicationResponse, Integer, Hash)] Twilio::ListApplicationResponse, response status code and response headers
    def list_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListApplicationResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_application(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListApplicationResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of applications representing an application within the requesting account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    # @optional @param friendly_name [String?] The string that identifies the Application resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_application(account_sid: account_sid, friendly_name: friendly_name, page_size: page_size).execute(&block)
    end

    LIST_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_APPLICATION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_APPLICATION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_application(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_APPLICATION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_APPLICATION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of authorized-connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAuthorizedConnectAppResponse]
    def list_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListAuthorizedConnectAppResponse
      data, _status_code, _headers = list_authorized_connect_app_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of authorized-connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAuthorizedConnectAppResponse, Integer, Hash)] Twilio::ListAuthorizedConnectAppResponse, response status code and response headers
    def list_authorized_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAuthorizedConnectAppResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_authorized_connect_app(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_authorized_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAuthorizedConnectAppResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of authorized-connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_authorized_connect_app(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AUTHORIZED_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AUTHORIZED_CONNECT_APP_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AUTHORIZED_CONNECT_APP_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_authorized_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_authorized_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AUTHORIZED_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AUTHORIZED_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AUTHORIZED_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AUTHORIZED_CONNECT_APP_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AUTHORIZED_CONNECT_APP_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_authorized_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberCountryResponse]
    def list_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberCountryResponse
      data, _status_code, _headers = list_available_phone_number_country_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberCountryResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberCountryResponse, response status code and response headers
    def list_available_phone_number_country_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberCountryResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_country(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_country\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberCountryResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_country(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_country(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_country ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_country",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberLocalResponse]
    def list_available_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberLocalResponse
      data, _status_code, _headers = list_available_phone_number_local_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberLocalResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberLocalResponse, response status code and response headers
    def list_available_phone_number_local_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberLocalResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_local(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_local\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberLocalResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_local(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_local ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_LOCAL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_local",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberMachineToMachineResponse]
    def list_available_phone_number_machine_to_machine(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberMachineToMachineResponse
      data, _status_code, _headers = list_available_phone_number_machine_to_machine_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberMachineToMachineResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberMachineToMachineResponse, response status code and response headers
    def list_available_phone_number_machine_to_machine_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberMachineToMachineResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_machine_to_machine(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_machine_to_machine\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberMachineToMachineResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_machine_to_machine(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_machine_to_machine(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_machine_to_machine(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_machine_to_machine ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_machine_to_machine",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberMobileResponse]
    def list_available_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberMobileResponse
      data, _status_code, _headers = list_available_phone_number_mobile_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberMobileResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberMobileResponse, response status code and response headers
    def list_available_phone_number_mobile_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberMobileResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_mobile(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_mobile\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberMobileResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_mobile(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_mobile ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_MOBILE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_mobile",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberNationalResponse]
    def list_available_phone_number_national(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberNationalResponse
      data, _status_code, _headers = list_available_phone_number_national_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberNationalResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberNationalResponse, response status code and response headers
    def list_available_phone_number_national_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberNationalResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_national(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_national\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberNationalResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_national(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_national(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_national(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_national ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_national",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberSharedCostResponse]
    def list_available_phone_number_shared_cost(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberSharedCostResponse
      data, _status_code, _headers = list_available_phone_number_shared_cost_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberSharedCostResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberSharedCostResponse, response status code and response headers
    def list_available_phone_number_shared_cost_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberSharedCostResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_shared_cost(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_shared_cost\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberSharedCostResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_shared_cost(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_shared_cost(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_shared_cost(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_shared_cost ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_shared_cost",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberTollFreeResponse]
    def list_available_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberTollFreeResponse
      data, _status_code, _headers = list_available_phone_number_toll_free_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberTollFreeResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberTollFreeResponse, response status code and response headers
    def list_available_phone_number_toll_free_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberTollFreeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_toll_free(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_toll_free\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberTollFreeResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_toll_free(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_toll_free ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_toll_free",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListAvailablePhoneNumberVoipResponse]
    def list_available_phone_number_voip(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListAvailablePhoneNumberVoipResponse
      data, _status_code, _headers = list_available_phone_number_voip_with_http_info(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListAvailablePhoneNumberVoipResponse, Integer, Hash)] Twilio::ListAvailablePhoneNumberVoipResponse, response status code and response headers
    def list_available_phone_number_voip_with_http_info(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListAvailablePhoneNumberVoipResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_available_phone_number_voip(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_available_phone_number_voip\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListAvailablePhoneNumberVoipResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    # @required @param country_code [String?] The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    # @optional @param area_code [Int32?] The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    # @optional @param contains [String?] The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    # @optional @param sms_enabled [Bool?] Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    # @optional @param mms_enabled [Bool?] Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    # @optional @param voice_enabled [Bool?] Whether the phone numbers can receive calls. Can be: `true` or `false`.
    # @optional @param exclude_all_address_required [Bool?] Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_local_address_required [Bool?] Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param exclude_foreign_address_required [Bool?] Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    # @optional @param beta [Bool?] Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param near_number [String?] Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    # @optional @param near_lat_long [String?] Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    # @optional @param distance [Int32?] The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    # @optional @param in_postal_code [String?] Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_region [String?] Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_rate_center [String?] Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    # @optional @param in_lata [String?] Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    # @optional @param in_locality [String?] Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    # @optional @param fax_enabled [Bool?] Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_available_phone_number_voip(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_available_phone_number_voip(account_sid: account_sid, country_code: country_code, area_code: area_code, contains: contains, sms_enabled: sms_enabled, mms_enabled: mms_enabled, voice_enabled: voice_enabled, exclude_all_address_required: exclude_all_address_required, exclude_local_address_required: exclude_local_address_required, exclude_foreign_address_required: exclude_foreign_address_required, beta: beta, near_number: near_number, near_lat_long: near_lat_long, distance: distance, in_postal_code: in_postal_code, in_region: in_region, in_rate_center: in_rate_center, in_lata: in_lata, in_locality: in_locality, fax_enabled: fax_enabled, page_size: page_size).execute(&block)
    end

    LIST_AVAILABLE_PHONE_NUMBER_VOIP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_VOIP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_AVAILABLE_PHONE_NUMBER_VOIP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_AVAILABLE_PHONE_NUMBER_VOIP_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_AVAILABLE_PHONE_NUMBER_VOIP_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_available_phone_number_voip(
      *,
      account_sid : String? = @account_sid,
      country_code : String? = nil,
      area_code : Int32? = nil,
      contains : String? = nil,
      sms_enabled : Bool? = nil,
      mms_enabled : Bool? = nil,
      voice_enabled : Bool? = nil,
      exclude_all_address_required : Bool? = nil,
      exclude_local_address_required : Bool? = nil,
      exclude_foreign_address_required : Bool? = nil,
      beta : Bool? = nil,
      near_number : String? = nil,
      near_lat_long : String? = nil,
      distance : Int32? = nil,
      in_postal_code : String? = nil,
      in_region : String? = nil,
      in_rate_center : String? = nil,
      in_lata : String? = nil,
      in_locality : String? = nil,
      fax_enabled : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_available_phone_number_voip ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_VOIP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_AVAILABLE_PHONE_NUMBER_VOIP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_AVAILABLE_PHONE_NUMBER_VOIP_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"country_code\" is required and cannot be null") if country_code.nil?
        unless (_country_code = country_code).nil?
        end
        unless (_area_code = area_code).nil?
        end
        unless (_contains = contains).nil?
        end
        unless (_sms_enabled = sms_enabled).nil?
        end
        unless (_mms_enabled = mms_enabled).nil?
        end
        unless (_voice_enabled = voice_enabled).nil?
        end
        unless (_exclude_all_address_required = exclude_all_address_required).nil?
        end
        unless (_exclude_local_address_required = exclude_local_address_required).nil?
        end
        unless (_exclude_foreign_address_required = exclude_foreign_address_required).nil?
        end
        unless (_beta = beta).nil?
        end
        unless (_near_number = near_number).nil?
        end
        unless (_near_lat_long = near_lat_long).nil?
        end
        unless (_distance = distance).nil?
        end
        unless (_in_postal_code = in_postal_code).nil?
        end
        unless (_in_region = in_region).nil?
        end
        unless (_in_rate_center = in_rate_center).nil?
        end
        unless (_in_lata = in_lata).nil?
        end
        unless (_in_locality = in_locality).nil?
        end
        unless (_fax_enabled = fax_enabled).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_VOIP_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_AVAILABLE_PHONE_NUMBER_VOIP_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CountryCode" + "}", URI.encode_path(country_code.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["AreaCode"] = area_code.to_s if !area_code.nil?
      query_params["Contains"] = contains.to_s if !contains.nil?
      query_params["SmsEnabled"] = sms_enabled.to_s if !sms_enabled.nil?
      query_params["MmsEnabled"] = mms_enabled.to_s if !mms_enabled.nil?
      query_params["VoiceEnabled"] = voice_enabled.to_s if !voice_enabled.nil?
      query_params["ExcludeAllAddressRequired"] = exclude_all_address_required.to_s if !exclude_all_address_required.nil?
      query_params["ExcludeLocalAddressRequired"] = exclude_local_address_required.to_s if !exclude_local_address_required.nil?
      query_params["ExcludeForeignAddressRequired"] = exclude_foreign_address_required.to_s if !exclude_foreign_address_required.nil?
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["NearNumber"] = near_number.to_s if !near_number.nil?
      query_params["NearLatLong"] = near_lat_long.to_s if !near_lat_long.nil?
      query_params["Distance"] = distance.to_s if !distance.nil?
      query_params["InPostalCode"] = in_postal_code.to_s if !in_postal_code.nil?
      query_params["InRegion"] = in_region.to_s if !in_region.nil?
      query_params["InRateCenter"] = in_rate_center.to_s if !in_rate_center.nil?
      query_params["InLata"] = in_lata.to_s if !in_lata.nil?
      query_params["InLocality"] = in_locality.to_s if !in_locality.nil?
      query_params["FaxEnabled"] = fax_enabled.to_s if !fax_enabled.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_available_phone_number_voip",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallResponse]
    def list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallResponse
      data, _status_code, _headers = list_call_with_http_info(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size)
      data
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallResponse, Integer, Hash)] Twilio::ListCallResponse, response status code and response headers
    def list_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallResponse.from_json(body), status_code, headers)
    end

    # Retrieves a collection of calls made to and from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
    # @optional @param to [String?] Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param from [String?] Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    # @optional @param parent_call_sid [String?] Only include calls spawned by calls with this SID.
    # @optional @param status [Twilio::CallEnumStatus?] The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    # @optional @param start_time [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_before [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param start_time_after [Time?] Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    # @optional @param end_time [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_before [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param end_time_after [Time?] Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call(account_sid: account_sid, to: to, from: from, parent_call_sid: parent_call_sid, status: status, start_time: start_time, start_time_before: start_time_before, start_time_after: start_time_after, end_time: end_time, end_time_before: end_time_before, end_time_after: end_time_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_MAX_LENGTH_FOR_ACCOUNT_SID     = 34
    LIST_CALL_MIN_LENGTH_FOR_ACCOUNT_SID     = 34
    LIST_CALL_PATTERN_FOR_ACCOUNT_SID        = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_MAX_LENGTH_FOR_PARENT_CALL_SID = 34
    LIST_CALL_MIN_LENGTH_FOR_PARENT_CALL_SID = 34
    LIST_CALL_PATTERN_FOR_PARENT_CALL_SID    = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_MAX_FOR_PAGE_SIZE              = Int32.new("1000")
    LIST_CALL_MIN_FOR_PAGE_SIZE              = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      parent_call_sid : String? = nil,
      status : Twilio::CallEnumStatus? = nil,
      start_time : Time? = nil,
      start_time_before : Time? = nil,
      start_time_after : Time? = nil,
      end_time : Time? = nil,
      end_time_before : Time? = nil,
      end_time_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_call ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_to = to).nil?
        end
        unless (_from = from).nil?
        end
        unless (_parent_call_sid = parent_call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("parent_call_sid", parent_call_sid.to_s.size, LIST_CALL_MAX_LENGTH_FOR_PARENT_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("parent_call_sid", parent_call_sid.to_s.size, LIST_CALL_MIN_LENGTH_FOR_PARENT_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("parent_call_sid", _parent_call_sid, LIST_CALL_PATTERN_FOR_PARENT_CALL_SID)
        end
        unless (_status = status).nil?
          _status.validate
        end
        unless (_start_time = start_time).nil?
        end
        unless (_start_time_before = start_time_before).nil?
        end
        unless (_start_time_after = start_time_after).nil?
        end
        unless (_end_time = end_time).nil?
        end
        unless (_end_time_before = end_time_before).nil?
        end
        unless (_end_time_after = end_time_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["To"] = to.to_s if !to.nil?
      query_params["From"] = from.to_s if !from.nil?
      query_params["ParentCallSid"] = parent_call_sid.to_s if !parent_call_sid.nil?
      query_params["Status"] = status.to_s if !status.nil?
      query_params["StartTime"] = Time::Format::RFC_2822.format(start_time) if !start_time.nil?
      query_params["StartTime<"] = Time::Format::RFC_2822.format(start_time_before) if !start_time_before.nil?
      query_params["StartTime>"] = Time::Format::RFC_2822.format(start_time_after) if !start_time_after.nil?
      query_params["EndTime"] = Time::Format::RFC_2822.format(end_time) if !end_time.nil?
      query_params["EndTime<"] = Time::Format::RFC_2822.format(end_time_before) if !end_time_before.nil?
      query_params["EndTime>"] = Time::Format::RFC_2822.format(end_time_after) if !end_time_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallEventResponse]
    def list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallEventResponse
      data, _status_code, _headers = list_call_event_with_http_info(account_sid: account_sid, call_sid: call_sid, page_size: page_size)
      data
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallEventResponse, Integer, Hash)] Twilio::ListCallEventResponse, response status code and response headers
    def list_call_event_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallEventResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_event(account_sid: account_sid, call_sid: call_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_call_event\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallEventResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of all events for a call.
    # @required @param account_sid [String?] The unique SID identifier of the Account.
    # @required @param call_sid [String?] The unique SID identifier of the Call.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_event(account_sid: account_sid, call_sid: call_sid, page_size: page_size).execute(&block)
    end

    LIST_CALL_EVENT_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_EVENT_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_EVENT_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_EVENT_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_EVENT_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_EVENT_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_EVENT_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_EVENT_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_event(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_call_event ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_EVENT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_EVENT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_EVENT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_EVENT_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_EVENT_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_EVENT_PATTERN_FOR_CALL_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_EVENT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_EVENT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_call_event",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallNotificationResponse]
    def list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallNotificationResponse
      data, _status_code, _headers = list_call_notification_with_http_info(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallNotificationResponse, Integer, Hash)] Twilio::ListCallNotificationResponse, response status code and response headers
    def list_call_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallNotificationResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_notification(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_call_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallNotificationResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_notification(account_sid: account_sid, call_sid: call_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_NOTIFICATION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_NOTIFICATION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_notification(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_call_notification ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_NOTIFICATION_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_NOTIFICATION_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_NOTIFICATION_PATTERN_FOR_CALL_SID)
        end
        unless (_log = log).nil?
        end
        unless (_message_date = message_date).nil?
        end
        unless (_message_date_before = message_date_before).nil?
        end
        unless (_message_date_after = message_date_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_NOTIFICATION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_NOTIFICATION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Log"] = log.to_s if !log.nil?
      query_params["MessageDate"] = Time::Format::ISO_8601_DATE.format(message_date) if !message_date.nil?
      query_params["MessageDate<"] = Time::Format::ISO_8601_DATE.format(message_date_before) if !message_date_before.nil?
      query_params["MessageDate>"] = Time::Format::ISO_8601_DATE.format(message_date_after) if !message_date_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_call_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListCallRecordingResponse]
    def list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListCallRecordingResponse
      data, _status_code, _headers = list_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListCallRecordingResponse, Integer, Hash)] Twilio::ListCallRecordingResponse, response status code and response headers
    def list_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListCallRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_call_recording(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListCallRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_call_recording(account_sid: account_sid, call_sid: call_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    LIST_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    LIST_CALL_RECORDING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CALL_RECORDING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_call_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        unless (_date_created = date_created).nil?
        end
        unless (_date_created_before = date_created_before).nil?
        end
        unless (_date_created_after = date_created_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CALL_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CALL_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListConferenceResponse]
    def list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListConferenceResponse
      data, _status_code, _headers = list_conference_with_http_info(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size)
      data
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListConferenceResponse, Integer, Hash)] Twilio::ListConferenceResponse, response status code and response headers
    def list_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListConferenceResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_conference(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListConferenceResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_conference(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size).execute(&block)
    end

    LIST_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CONFERENCE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_conference ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_date_created = date_created).nil?
        end
        unless (_date_created_before = date_created_before).nil?
        end
        unless (_date_created_after = date_created_after).nil?
        end
        unless (_date_updated = date_updated).nil?
        end
        unless (_date_updated_before = date_updated_before).nil?
        end
        unless (_date_updated_after = date_updated_after).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_status = status).nil?
          _status.validate
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CONFERENCE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CONFERENCE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["DateUpdated"] = Time::Format::ISO_8601_DATE.format(date_updated) if !date_updated.nil?
      query_params["DateUpdated<"] = Time::Format::ISO_8601_DATE.format(date_updated_before) if !date_updated_before.nil?
      query_params["DateUpdated>"] = Time::Format::ISO_8601_DATE.format(date_updated_after) if !date_updated_after.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["Status"] = status.to_s if !status.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListConferenceRecordingResponse]
    def list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListConferenceRecordingResponse
      data, _status_code, _headers = list_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListConferenceRecordingResponse, Integer, Hash)] Twilio::ListConferenceRecordingResponse, response status code and response headers
    def list_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListConferenceRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_conference_recording(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListConferenceRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_conference_recording(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_RECORDING_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_CONFERENCE_RECORDING_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_conference_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        unless (_date_created = date_created).nil?
        end
        unless (_date_created_before = date_created_before).nil?
        end
        unless (_date_created_after = date_created_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CONFERENCE_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CONFERENCE_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListConnectAppResponse]
    def list_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListConnectAppResponse
      data, _status_code, _headers = list_connect_app_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListConnectAppResponse, Integer, Hash)] Twilio::ListConnectAppResponse, response status code and response headers
    def list_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListConnectAppResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_connect_app(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListConnectAppResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of connect-apps belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_connect_app(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CONNECT_APP_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CONNECT_APP_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_connect_app(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CONNECT_APP_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CONNECT_APP_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/ConnectApps.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListDependentPhoneNumberResponse]
    def list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListDependentPhoneNumberResponse
      data, _status_code, _headers = list_dependent_phone_number_with_http_info(account_sid: account_sid, address_sid: address_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListDependentPhoneNumberResponse, Integer, Hash)] Twilio::ListDependentPhoneNumberResponse, response status code and response headers
    def list_dependent_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListDependentPhoneNumberResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_dependent_phone_number(account_sid: account_sid, address_sid: address_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_dependent_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListDependentPhoneNumberResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
    # @required @param address_sid [String?] The SID of the Address resource associated with the phone number.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_dependent_phone_number(account_sid: account_sid, address_sid: address_sid, page_size: page_size).execute(&block)
    end

    LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID = 34
    LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    LIST_DEPENDENT_PHONE_NUMBER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_DEPENDENT_PHONE_NUMBER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_dependent_phone_number(
      *,
      account_sid : String? = @account_sid,
      address_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_dependent_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"address_sid\" is required and cannot be null") if address_sid.nil?
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, LIST_DEPENDENT_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, LIST_DEPENDENT_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_DEPENDENT_PHONE_NUMBER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_DEPENDENT_PHONE_NUMBER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "AddressSid" + "}", URI.encode_path(address_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_dependent_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the IncomingPhoneNumber resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberResponse]
    def list_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberResponse
      data, _status_code, _headers = list_incoming_phone_number_with_http_info(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)
      data
    end

    # Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the IncomingPhoneNumber resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberResponse, response status code and response headers
    def list_incoming_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the IncomingPhoneNumber resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_beta = beta).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_origin = origin).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["Origin"] = origin.to_s if !origin.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of Add-on installations currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberAssignedAddOnResponse]
    def list_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberAssignedAddOnResponse
      data, _status_code, _headers = list_incoming_phone_number_assigned_add_on_with_http_info(account_sid: account_sid, resource_sid: resource_sid, page_size: page_size)
      data
    end

    # Retrieve a list of Add-on installations currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberAssignedAddOnResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberAssignedAddOnResponse, response status code and response headers
    def list_incoming_phone_number_assigned_add_on_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberAssignedAddOnResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number_assigned_add_on\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberAssignedAddOnResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of Add-on installations currently assigned to this Number.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number_assigned_add_on(account_sid: account_sid, resource_sid: resource_sid, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID  = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID  = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID     = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID    = /^PN[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_FOR_PAGE_SIZE           = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_FOR_PAGE_SIZE           = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number_assigned_add_on(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number_assigned_add_on ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_PATTERN_FOR_RESOURCE_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number_assigned_add_on",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of Extensions for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse]
    def list_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse
      data, _status_code, _headers = list_incoming_phone_number_assigned_add_on_extension_with_http_info(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, page_size: page_size)
      data
    end

    # Retrieve a list of Extensions for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse, response status code and response headers
    def list_incoming_phone_number_assigned_add_on_extension_with_http_info(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number_assigned_add_on_extension(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number_assigned_add_on_extension\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberAssignedAddOnExtensionResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of Extensions for the Assigned Add-on.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @required @param resource_sid [String?] The SID of the Phone Number to which the Add-on is assigned.
    # @required @param assigned_add_on_sid [String?] The SID that uniquely identifies the assigned Add-on installation.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number_assigned_add_on_extension(account_sid: account_sid, resource_sid: resource_sid, assigned_add_on_sid: assigned_add_on_sid, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_RESOURCE_SID        = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_RESOURCE_SID        = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_RESOURCE_SID           = /^PN[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ASSIGNED_ADD_ON_SID = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ASSIGNED_ADD_ON_SID = 34
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ASSIGNED_ADD_ON_SID    = /^XE[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_FOR_PAGE_SIZE                  = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_FOR_PAGE_SIZE                  = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number_assigned_add_on_extension(
      *,
      account_sid : String? = @account_sid,
      resource_sid : String? = nil,
      assigned_add_on_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number_assigned_add_on_extension ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"resource_sid\" is required and cannot be null") if resource_sid.nil?
        unless (_resource_sid = resource_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("resource_sid", resource_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("resource_sid", resource_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_RESOURCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("resource_sid", _resource_sid, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_RESOURCE_SID)
        end
        raise ArgumentError.new("\"assigned_add_on_sid\" is required and cannot be null") if assigned_add_on_sid.nil?
        unless (_assigned_add_on_sid = assigned_add_on_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("assigned_add_on_sid", assigned_add_on_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_LENGTH_FOR_ASSIGNED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_min_length("assigned_add_on_sid", assigned_add_on_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_LENGTH_FOR_ASSIGNED_ADD_ON_SID)
          OpenApi::PrimitiveValidator.validate_pattern("assigned_add_on_sid", _assigned_add_on_sid, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_PATTERN_FOR_ASSIGNED_ADD_ON_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ResourceSid" + "}", URI.encode_path(resource_sid.to_s)).sub("{" + "AssignedAddOnSid" + "}", URI.encode_path(assigned_add_on_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number_assigned_add_on_extension",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberLocalResponse]
    def list_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberLocalResponse
      data, _status_code, _headers = list_incoming_phone_number_local_with_http_info(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberLocalResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberLocalResponse, response status code and response headers
    def list_incoming_phone_number_local_with_http_info(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberLocalResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number_local(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number_local\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberLocalResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number_local(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_LOCAL_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_LOCAL_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number_local(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number_local ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_LOCAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_LOCAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_LOCAL_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_beta = beta).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_origin = origin).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_LOCAL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_LOCAL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["Origin"] = origin.to_s if !origin.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number_local",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberMobileResponse]
    def list_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberMobileResponse
      data, _status_code, _headers = list_incoming_phone_number_mobile_with_http_info(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberMobileResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberMobileResponse, response status code and response headers
    def list_incoming_phone_number_mobile_with_http_info(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberMobileResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number_mobile(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number_mobile\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberMobileResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number_mobile(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_MOBILE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_MOBILE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number_mobile(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number_mobile ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_MOBILE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_MOBILE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_MOBILE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_beta = beta).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_origin = origin).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_MOBILE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_MOBILE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["Origin"] = origin.to_s if !origin.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number_mobile",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListIncomingPhoneNumberTollFreeResponse]
    def list_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListIncomingPhoneNumberTollFreeResponse
      data, _status_code, _headers = list_incoming_phone_number_toll_free_with_http_info(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListIncomingPhoneNumberTollFreeResponse, Integer, Hash)] Twilio::ListIncomingPhoneNumberTollFreeResponse, response status code and response headers
    def list_incoming_phone_number_toll_free_with_http_info(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListIncomingPhoneNumberTollFreeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_incoming_phone_number_toll_free(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_incoming_phone_number_toll_free\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListIncomingPhoneNumberTollFreeResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    # @optional @param beta [Bool?] Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    # @optional @param friendly_name [String?] A string that identifies the resources to read.
    # @optional @param phone_number [String?] The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param origin [String?] Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_incoming_phone_number_toll_free(account_sid: account_sid, beta: beta, friendly_name: friendly_name, phone_number: phone_number, origin: origin, page_size: page_size).execute(&block)
    end

    LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_incoming_phone_number_toll_free(
      *,
      account_sid : String? = @account_sid,
      beta : Bool? = nil,
      friendly_name : String? = nil,
      phone_number : String? = nil,
      origin : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_incoming_phone_number_toll_free ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_beta = beta).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_origin = origin).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Beta"] = beta.to_s if !beta.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["Origin"] = origin.to_s if !origin.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_incoming_phone_number_toll_free",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListKeyResponse]
    def list_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListKeyResponse
      data, _status_code, _headers = list_key_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListKeyResponse, Integer, Hash)] Twilio::ListKeyResponse, response status code and response headers
    def list_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListKeyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_key(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListKeyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_key(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_KEY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_KEY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_KEY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_KEY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Keys.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMediaResponse]
    def list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMediaResponse
      data, _status_code, _headers = list_media_with_http_info(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMediaResponse, Integer, Hash)] Twilio::ListMediaResponse, response status code and response headers
    def list_media_with_http_info(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMediaResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_media(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_media\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMediaResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of Media resources belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
    # @required @param message_sid [String?] The SID of the Message resource that this Media resource belongs to.
    # @optional @param date_created [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_media(account_sid: account_sid, message_sid: message_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEDIA_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID = 34
    LIST_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID = 34
    LIST_MEDIA_PATTERN_FOR_MESSAGE_SID    = /^(SM|MM)[0-9a-fA-F]{32}$/
    LIST_MEDIA_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MEDIA_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_media(
      *,
      account_sid : String? = @account_sid,
      message_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_media ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MEDIA_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MEDIA_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MEDIA_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"message_sid\" is required and cannot be null") if message_sid.nil?
        unless (_message_sid = message_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("message_sid", message_sid.to_s.size, LIST_MEDIA_MAX_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("message_sid", message_sid.to_s.size, LIST_MEDIA_MIN_LENGTH_FOR_MESSAGE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("message_sid", _message_sid, LIST_MEDIA_PATTERN_FOR_MESSAGE_SID)
        end
        unless (_date_created = date_created).nil?
        end
        unless (_date_created_before = date_created_before).nil?
        end
        unless (_date_created_after = date_created_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MEDIA_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MEDIA_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "MessageSid" + "}", URI.encode_path(message_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::RFC_2822.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::RFC_2822.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::RFC_2822.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_media",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMemberResponse]
    def list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMemberResponse
      data, _status_code, _headers = list_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size)
      data
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMemberResponse, Integer, Hash)] Twilio::ListMemberResponse, response status code and response headers
    def list_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMemberResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_member(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMemberResponse.from_json(body), status_code, headers)
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_member(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size).execute(&block)
    end

    LIST_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    LIST_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    LIST_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/
    LIST_MEMBER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MEMBER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, LIST_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, LIST_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, LIST_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MEMBER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MEMBER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMessageResponse]
    def list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMessageResponse
      data, _status_code, _headers = list_message_with_http_info(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size)
      data
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMessageResponse, Integer, Hash)] Twilio::ListMessageResponse, response status code and response headers
    def list_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMessageResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_message(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMessageResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of messages belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
    # @optional @param to [String?] Read messages sent to only this phone number.
    # @optional @param from [String?] Read messages sent from only this phone number or alphanumeric sender ID.
    # @optional @param date_sent [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_before [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param date_sent_after [Time?] The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_message(account_sid: account_sid, to: to, from: from, date_sent: date_sent, date_sent_before: date_sent_before, date_sent_after: date_sent_after, page_size: page_size).execute(&block)
    end

    LIST_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MESSAGE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MESSAGE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_message(
      *,
      account_sid : String? = @account_sid,
      to : String? = nil,
      from : String? = nil,
      date_sent : Time? = nil,
      date_sent_before : Time? = nil,
      date_sent_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_to = to).nil?
        end
        unless (_from = from).nil?
        end
        unless (_date_sent = date_sent).nil?
        end
        unless (_date_sent_before = date_sent_before).nil?
        end
        unless (_date_sent_after = date_sent_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MESSAGE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MESSAGE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["To"] = to.to_s if !to.nil?
      query_params["From"] = from.to_s if !from.nil?
      query_params["DateSent"] = Time::Format::RFC_2822.format(date_sent) if !date_sent.nil?
      query_params["DateSent<"] = Time::Format::RFC_2822.format(date_sent_before) if !date_sent_before.nil?
      query_params["DateSent>"] = Time::Format::RFC_2822.format(date_sent_after) if !date_sent_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of notifications belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListNotificationResponse]
    def list_notification(
      *,
      account_sid : String? = @account_sid,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListNotificationResponse
      data, _status_code, _headers = list_notification_with_http_info(account_sid: account_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)
      data
    end

    # Retrieve a list of notifications belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListNotificationResponse, Integer, Hash)] Twilio::ListNotificationResponse, response status code and response headers
    def list_notification_with_http_info(
      *,
      account_sid : String? = @account_sid,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListNotificationResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_notification(account_sid: account_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_notification\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListNotificationResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of notifications belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.
    # @optional @param log [Int32?] Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
    # @optional @param message_date [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_before [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param message_date_after [Time?] Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_notification(
      *,
      account_sid : String? = @account_sid,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_notification(account_sid: account_sid, log: log, message_date: message_date, message_date_before: message_date_before, message_date_after: message_date_after, page_size: page_size).execute(&block)
    end

    LIST_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_NOTIFICATION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_NOTIFICATION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_notification(
      *,
      account_sid : String? = @account_sid,
      log : Int32? = nil,
      message_date : Time? = nil,
      message_date_before : Time? = nil,
      message_date_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_notification ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_NOTIFICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_NOTIFICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_NOTIFICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_log = log).nil?
        end
        unless (_message_date = message_date).nil?
        end
        unless (_message_date_before = message_date_before).nil?
        end
        unless (_message_date_after = message_date_after).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_NOTIFICATION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_NOTIFICATION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Notifications.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Log"] = log.to_s if !log.nil?
      query_params["MessageDate"] = Time::Format::ISO_8601_DATE.format(message_date) if !message_date.nil?
      query_params["MessageDate<"] = Time::Format::ISO_8601_DATE.format(message_date_before) if !message_date_before.nil?
      query_params["MessageDate>"] = Time::Format::ISO_8601_DATE.format(message_date_after) if !message_date_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListOutgoingCallerIdResponse]
    def list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListOutgoingCallerIdResponse
      data, _status_code, _headers = list_outgoing_caller_id_with_http_info(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size)
      data
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListOutgoingCallerIdResponse, Integer, Hash)] Twilio::ListOutgoingCallerIdResponse, response status code and response headers
    def list_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListOutgoingCallerIdResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_outgoing_caller_id(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListOutgoingCallerIdResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
    # @optional @param phone_number [String?] The phone number of the OutgoingCallerId resources to read.
    # @optional @param friendly_name [String?] The string that identifies the OutgoingCallerId resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_outgoing_caller_id(account_sid: account_sid, phone_number: phone_number, friendly_name: friendly_name, page_size: page_size).execute(&block)
    end

    LIST_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_OUTGOING_CALLER_ID_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_OUTGOING_CALLER_ID_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      phone_number : String? = nil,
      friendly_name : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_outgoing_caller_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_phone_number = phone_number).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_OUTGOING_CALLER_ID_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_OUTGOING_CALLER_ID_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PhoneNumber"] = phone_number.to_s if !phone_number.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListParticipantResponse]
    def list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListParticipantResponse
      data, _status_code, _headers = list_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size)
      data
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListParticipantResponse, Integer, Hash)] Twilio::ListParticipantResponse, response status code and response headers
    def list_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListParticipantResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_participant(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListParticipantResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_participant(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size).execute(&block)
    end

    LIST_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_PARTICIPANT_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_PARTICIPANT_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_participant ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        unless (_muted = muted).nil?
        end
        unless (_hold = hold).nil?
        end
        unless (_coaching = coaching).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_PARTICIPANT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_PARTICIPANT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Muted"] = muted.to_s if !muted.nil?
      query_params["Hold"] = hold.to_s if !hold.nil?
      query_params["Coaching"] = coaching.to_s if !coaching.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListQueueResponse]
    def list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListQueueResponse
      data, _status_code, _headers = list_queue_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListQueueResponse, Integer, Hash)] Twilio::ListQueueResponse, response status code and response headers
    def list_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListQueueResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_queue(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListQueueResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_queue(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_QUEUE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_QUEUE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_QUEUE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_QUEUE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingResponse]
    def list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingResponse
      data, _status_code, _headers = list_recording_with_http_info(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingResponse, Integer, Hash)] Twilio::ListRecordingResponse, response status code and response headers
    def list_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    # @optional @param date_created [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_before [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param date_created_after [Time?] Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    # @optional @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    # @optional @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param include_soft_deleted [Bool?] A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, call_sid: call_sid, conference_sid: conference_sid, include_soft_deleted: include_soft_deleted, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_LENGTH_FOR_CALL_SID       = 34
    LIST_RECORDING_MIN_LENGTH_FOR_CALL_SID       = 34
    LIST_RECORDING_PATTERN_FOR_CALL_SID          = /^CA[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_RECORDING_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_RECORDING_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      call_sid : String? = nil,
      conference_sid : String? = nil,
      include_soft_deleted : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_date_created = date_created).nil?
        end
        unless (_date_created_before = date_created_before).nil?
        end
        unless (_date_created_after = date_created_after).nil?
        end
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, LIST_RECORDING_PATTERN_FOR_CALL_SID)
        end
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        unless (_include_soft_deleted = include_soft_deleted).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::RFC_2822.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::RFC_2822.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::RFC_2822.format(date_created_after) if !date_created_after.nil?
      query_params["CallSid"] = call_sid.to_s if !call_sid.nil?
      query_params["ConferenceSid"] = conference_sid.to_s if !conference_sid.nil?
      query_params["IncludeSoftDeleted"] = include_soft_deleted.to_s if !include_soft_deleted.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingAddOnResultResponse]
    def list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingAddOnResultResponse
      data, _status_code, _headers = list_recording_add_on_result_with_http_info(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size)
      data
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingAddOnResultResponse, Integer, Hash)] Twilio::ListRecordingAddOnResultResponse, response status code and response headers
    def list_recording_add_on_result_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingAddOnResultResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_recording_add_on_result\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingAddOnResultResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of results belonging to the recording
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the result to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_add_on_result(account_sid: account_sid, reference_sid: reference_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID    = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_MAX_FOR_PAGE_SIZE            = Int32.new("1000")
    LIST_RECORDING_ADD_ON_RESULT_MIN_FOR_PAGE_SIZE            = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_add_on_result(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_recording_add_on_result ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, LIST_RECORDING_ADD_ON_RESULT_PATTERN_FOR_REFERENCE_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_recording_add_on_result",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingAddOnResultPayloadResponse]
    def list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingAddOnResultPayloadResponse
      data, _status_code, _headers = list_recording_add_on_result_payload_with_http_info(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size)
      data
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingAddOnResultPayloadResponse, Integer, Hash)] Twilio::ListRecordingAddOnResultPayloadResponse, response status code and response headers
    def list_recording_add_on_result_payload_with_http_info(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingAddOnResultPayloadResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_recording_add_on_result_payload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingAddOnResultPayloadResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of payloads belonging to the AddOnResult
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
    # @required @param reference_sid [String?] The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
    # @required @param add_on_result_sid [String?] The SID of the AddOnResult to which the payloads to read belongs.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_add_on_result_payload(account_sid: account_sid, reference_sid: reference_sid, add_on_result_sid: add_on_result_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID     = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID     = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID        = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID = 34
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID    = /^XR[0-9a-fA-F]{32}$/
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_FOR_PAGE_SIZE                = Int32.new("1000")
    LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_FOR_PAGE_SIZE                = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_add_on_result_payload(
      *,
      account_sid : String? = @account_sid,
      reference_sid : String? = nil,
      add_on_result_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_recording_add_on_result_payload ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"reference_sid\" is required and cannot be null") if reference_sid.nil?
        unless (_reference_sid = reference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("reference_sid", reference_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_REFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("reference_sid", _reference_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_REFERENCE_SID)
        end
        raise ArgumentError.new("\"add_on_result_sid\" is required and cannot be null") if add_on_result_sid.nil?
        unless (_add_on_result_sid = add_on_result_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("add_on_result_sid", add_on_result_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("add_on_result_sid", add_on_result_sid.to_s.size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_LENGTH_FOR_ADD_ON_RESULT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("add_on_result_sid", _add_on_result_sid, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_PATTERN_FOR_ADD_ON_RESULT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ReferenceSid" + "}", URI.encode_path(reference_sid.to_s)).sub("{" + "AddOnResultSid" + "}", URI.encode_path(add_on_result_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_recording_add_on_result_payload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListRecordingTranscriptionResponse]
    def list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListRecordingTranscriptionResponse
      data, _status_code, _headers = list_recording_transcription_with_http_info(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListRecordingTranscriptionResponse, Integer, Hash)] Twilio::ListRecordingTranscriptionResponse, response status code and response headers
    def list_recording_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListRecordingTranscriptionResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_recording_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListRecordingTranscriptionResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @required @param recording_sid [String?] The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_recording_transcription(account_sid: account_sid, recording_sid: recording_sid, page_size: page_size).execute(&block)
    end

    LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID   = 34
    LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID      = /^AC[0-9a-fA-F]{32}$/
    LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID = 34
    LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID = 34
    LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID    = /^RE[0-9a-fA-F]{32}$/
    LIST_RECORDING_TRANSCRIPTION_MAX_FOR_PAGE_SIZE            = Int32.new("1000")
    LIST_RECORDING_TRANSCRIPTION_MIN_FOR_PAGE_SIZE            = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_recording_transcription(
      *,
      account_sid : String? = @account_sid,
      recording_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_recording_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"recording_sid\" is required and cannot be null") if recording_sid.nil?
        unless (_recording_sid = recording_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("recording_sid", recording_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MAX_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_min_length("recording_sid", recording_sid.to_s.size, LIST_RECORDING_TRANSCRIPTION_MIN_LENGTH_FOR_RECORDING_SID)
          OpenApi::PrimitiveValidator.validate_pattern("recording_sid", _recording_sid, LIST_RECORDING_TRANSCRIPTION_PATTERN_FOR_RECORDING_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_RECORDING_TRANSCRIPTION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_RECORDING_TRANSCRIPTION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "RecordingSid" + "}", URI.encode_path(recording_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_recording_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of short-codes belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
    # @optional @param friendly_name [String?] The string that identifies the ShortCode resources to read.
    # @optional @param short_code [String?] Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListShortCodeResponse]
    def list_short_code(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      short_code : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListShortCodeResponse
      data, _status_code, _headers = list_short_code_with_http_info(account_sid: account_sid, friendly_name: friendly_name, short_code: short_code, page_size: page_size)
      data
    end

    # Retrieve a list of short-codes belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
    # @optional @param friendly_name [String?] The string that identifies the ShortCode resources to read.
    # @optional @param short_code [String?] Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListShortCodeResponse, Integer, Hash)] Twilio::ListShortCodeResponse, response status code and response headers
    def list_short_code_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      short_code : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListShortCodeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_short_code(account_sid: account_sid, friendly_name: friendly_name, short_code: short_code, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_short_code\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListShortCodeResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of short-codes belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
    # @optional @param friendly_name [String?] The string that identifies the ShortCode resources to read.
    # @optional @param short_code [String?] Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_short_code(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      short_code : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_short_code(account_sid: account_sid, friendly_name: friendly_name, short_code: short_code, page_size: page_size).execute(&block)
    end

    LIST_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SHORT_CODE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SHORT_CODE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_short_code(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      short_code : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_short_code ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_short_code = short_code).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SHORT_CODE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SHORT_CODE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["ShortCode"] = short_code.to_s if !short_code.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_short_code",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?]
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSigningKeyResponse]
    def list_signing_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSigningKeyResponse
      data, _status_code, _headers = list_signing_key_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?]
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSigningKeyResponse, Integer, Hash)] Twilio::ListSigningKeyResponse, response status code and response headers
    def list_signing_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSigningKeyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_signing_key(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_signing_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSigningKeyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?]
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_signing_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_signing_key(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIGNING_KEY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIGNING_KEY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_signing_key(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_signing_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIGNING_KEY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIGNING_KEY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_signing_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthCallsCredentialListMappingResponse]
    def list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthCallsCredentialListMappingResponse
      data, _status_code, _headers = list_sip_auth_calls_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthCallsCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipAuthCallsCredentialListMappingResponse, response status code and response headers
    def list_sip_auth_calls_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthCallsCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_auth_calls_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthCallsCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_calls_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_calls_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_auth_calls_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_auth_calls_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthCallsIpAccessControlListMappingResponse]
    def list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthCallsIpAccessControlListMappingResponse
      data, _status_code, _headers = list_sip_auth_calls_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, Integer, Hash)] Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, response status code and response headers
    def list_sip_auth_calls_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_auth_calls_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthCallsIpAccessControlListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_calls_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_auth_calls_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_auth_calls_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipAuthRegistrationsCredentialListMappingResponse]
    def list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipAuthRegistrationsCredentialListMappingResponse
      data, _status_code, _headers = list_sip_auth_registrations_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, response status code and response headers
    def list_sip_auth_registrations_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_auth_registrations_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipAuthRegistrationsCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credential list mappings belonging to the domain used in the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
    # @required @param domain_sid [String?] The SID of the SIP domain that contains the resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_auth_registrations_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_auth_registrations_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_auth_registrations_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_auth_registrations_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialResponse]
    def list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialResponse
      data, _status_code, _headers = list_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size)
      data
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialResponse, Integer, Hash)] Twilio::ListSipCredentialResponse, response status code and response headers
    def list_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of credentials.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that contains the desired credentials.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    LIST_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    LIST_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_MAX_FOR_PAGE_SIZE                  = Int32.new("1000")
    LIST_SIP_CREDENTIAL_MIN_FOR_PAGE_SIZE                  = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_credential ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, LIST_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, LIST_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, LIST_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialListResponse]
    def list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialListResponse
      data, _status_code, _headers = list_sip_credential_list_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialListResponse, Integer, Hash)] Twilio::ListSipCredentialListResponse, response status code and response headers
    def list_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential_list(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialListResponse.from_json(body), status_code, headers)
    end

    # Get All Credential Lists
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential_list(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_CREDENTIAL_LIST_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_credential_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipCredentialListMappingResponse]
    def list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipCredentialListMappingResponse
      data, _status_code, _headers = list_sip_credential_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipCredentialListMappingResponse, Integer, Hash)] Twilio::ListSipCredentialListMappingResponse, response status code and response headers
    def list_sip_credential_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipCredentialListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_credential_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipCredentialListMappingResponse.from_json(body), status_code, headers)
    end

    # Read multiple CredentialListMapping resources from an account.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_credential_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_credential_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_credential_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_CREDENTIAL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_CREDENTIAL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_credential_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipDomainResponse]
    def list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipDomainResponse
      data, _status_code, _headers = list_sip_domain_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipDomainResponse, Integer, Hash)] Twilio::ListSipDomainResponse, response status code and response headers
    def list_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipDomainResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_domain(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipDomainResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of domains belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_domain(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_DOMAIN_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_DOMAIN_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_domain(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_domain ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_DOMAIN_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_DOMAIN_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAccessControlListResponse]
    def list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAccessControlListResponse
      data, _status_code, _headers = list_sip_ip_access_control_list_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAccessControlListResponse, Integer, Hash)] Twilio::ListSipIpAccessControlListResponse, response status code and response headers
    def list_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAccessControlListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_access_control_list(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAccessControlListResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IpAccessControlLists that belong to the account used to make the request
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_access_control_list(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_ip_access_control_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAccessControlListMappingResponse]
    def list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAccessControlListMappingResponse
      data, _status_code, _headers = list_sip_ip_access_control_list_mapping_with_http_info(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)
      data
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAccessControlListMappingResponse, Integer, Hash)] Twilio::ListSipIpAccessControlListMappingResponse, response status code and response headers
    def list_sip_ip_access_control_list_mapping_with_http_info(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAccessControlListMappingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_ip_access_control_list_mapping\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAccessControlListMappingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of IpAccessControlListMapping resources.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param domain_sid [String?] A 34 character string that uniquely identifies the SIP domain.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_access_control_list_mapping(account_sid: account_sid, domain_sid: domain_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID  = 34
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID     = /^SD[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_access_control_list_mapping(
      *,
      account_sid : String? = @account_sid,
      domain_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_ip_access_control_list_mapping ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"domain_sid\" is required and cannot be null") if domain_sid.nil?
        unless (_domain_sid = domain_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("domain_sid", domain_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_min_length("domain_sid", domain_sid.to_s.size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_LENGTH_FOR_DOMAIN_SID)
          OpenApi::PrimitiveValidator.validate_pattern("domain_sid", _domain_sid, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_PATTERN_FOR_DOMAIN_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "DomainSid" + "}", URI.encode_path(domain_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_ip_access_control_list_mapping",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListSipIpAddressResponse]
    def list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListSipIpAddressResponse
      data, _status_code, _headers = list_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size)
      data
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListSipIpAddressResponse, Integer, Hash)] Twilio::ListSipIpAddressResponse, response status code and response headers
    def list_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListSipIpAddressResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListSipIpAddressResponse.from_json(body), status_code, headers)
    end

    # Read multiple IpAddress resources.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, page_size: page_size).execute(&block)
    end

    LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    LIST_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    LIST_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    LIST_SIP_IP_ADDRESS_MAX_FOR_PAGE_SIZE                         = Int32.new("1000")
    LIST_SIP_IP_ADDRESS_MIN_FOR_PAGE_SIZE                         = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_sip_ip_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, LIST_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, LIST_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, LIST_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_SIP_IP_ADDRESS_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_SIP_IP_ADDRESS_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of transcriptions belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListTranscriptionResponse]
    def list_transcription(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListTranscriptionResponse
      data, _status_code, _headers = list_transcription_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of transcriptions belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListTranscriptionResponse, Integer, Hash)] Twilio::ListTranscriptionResponse, response status code and response headers
    def list_transcription_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListTranscriptionResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_transcription(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_transcription\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListTranscriptionResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of transcriptions belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_transcription(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_transcription(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_TRANSCRIPTION_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_TRANSCRIPTION_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_transcription(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_transcription ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_TRANSCRIPTION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_TRANSCRIPTION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_TRANSCRIPTION_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_TRANSCRIPTION_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_TRANSCRIPTION_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Transcriptions.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_transcription",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordResponse]
    def list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordResponse
      data, _status_code, _headers = list_usage_record_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordResponse, Integer, Hash)] Twilio::ListUsageRecordResponse, response status code and response headers
    def list_usage_record_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of usage-records belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordAllTimeResponse]
    def list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordAllTimeResponse
      data, _status_code, _headers = list_usage_record_all_time_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordAllTimeResponse, Integer, Hash)] Twilio::ListUsageRecordAllTimeResponse, response status code and response headers
    def list_usage_record_all_time_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordAllTimeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_all_time(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_all_time\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordAllTimeResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_all_time(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_ALL_TIME_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_ALL_TIME_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_ALL_TIME_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_ALL_TIME_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_ALL_TIME_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_all_time(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_all_time ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_ALL_TIME_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_ALL_TIME_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_ALL_TIME_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_ALL_TIME_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_ALL_TIME_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_all_time",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordDailyResponse]
    def list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordDailyResponse
      data, _status_code, _headers = list_usage_record_daily_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordDailyResponse, Integer, Hash)] Twilio::ListUsageRecordDailyResponse, response status code and response headers
    def list_usage_record_daily_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordDailyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_daily(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_daily\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordDailyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_daily(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_DAILY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_DAILY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_DAILY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_DAILY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_DAILY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_daily(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_daily ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_DAILY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_DAILY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_DAILY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_DAILY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_DAILY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_daily",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordLastMonthResponse]
    def list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordLastMonthResponse
      data, _status_code, _headers = list_usage_record_last_month_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordLastMonthResponse, Integer, Hash)] Twilio::ListUsageRecordLastMonthResponse, response status code and response headers
    def list_usage_record_last_month_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordLastMonthResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_last_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_last_month\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordLastMonthResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_last_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_LAST_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_LAST_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_LAST_MONTH_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_LAST_MONTH_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_LAST_MONTH_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_last_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_last_month ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_LAST_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_LAST_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_LAST_MONTH_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_LAST_MONTH_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_LAST_MONTH_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_last_month",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordMonthlyResponse]
    def list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordMonthlyResponse
      data, _status_code, _headers = list_usage_record_monthly_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordMonthlyResponse, Integer, Hash)] Twilio::ListUsageRecordMonthlyResponse, response status code and response headers
    def list_usage_record_monthly_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordMonthlyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_monthly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_monthly\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordMonthlyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_monthly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_MONTHLY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MONTHLY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_MONTHLY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_MONTHLY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_MONTHLY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_monthly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_monthly ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MONTHLY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_MONTHLY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_MONTHLY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_MONTHLY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_MONTHLY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_monthly",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordThisMonthResponse]
    def list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordThisMonthResponse
      data, _status_code, _headers = list_usage_record_this_month_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordThisMonthResponse, Integer, Hash)] Twilio::ListUsageRecordThisMonthResponse, response status code and response headers
    def list_usage_record_this_month_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordThisMonthResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_this_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_this_month\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordThisMonthResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_this_month(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_THIS_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_THIS_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_THIS_MONTH_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_THIS_MONTH_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_THIS_MONTH_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_this_month(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_this_month ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_THIS_MONTH_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_THIS_MONTH_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_THIS_MONTH_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_THIS_MONTH_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_THIS_MONTH_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_this_month",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordTodayResponse]
    def list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordTodayResponse
      data, _status_code, _headers = list_usage_record_today_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordTodayResponse, Integer, Hash)] Twilio::ListUsageRecordTodayResponse, response status code and response headers
    def list_usage_record_today_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordTodayResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_today(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_today\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordTodayResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_today(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_TODAY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_TODAY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_TODAY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_TODAY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_TODAY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_today(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_today ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_TODAY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_TODAY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_TODAY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_TODAY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_TODAY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_today",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordYearlyResponse]
    def list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordYearlyResponse
      data, _status_code, _headers = list_usage_record_yearly_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordYearlyResponse, Integer, Hash)] Twilio::ListUsageRecordYearlyResponse, response status code and response headers
    def list_usage_record_yearly_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordYearlyResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_yearly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_yearly\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordYearlyResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_yearly(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_YEARLY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YEARLY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YEARLY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_YEARLY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_YEARLY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_yearly(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_yearly ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YEARLY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YEARLY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_YEARLY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_YEARLY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_YEARLY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_yearly",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageRecordYesterdayResponse]
    def list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageRecordYesterdayResponse
      data, _status_code, _headers = list_usage_record_yesterday_with_http_info(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageRecordYesterdayResponse, Integer, Hash)] Twilio::ListUsageRecordYesterdayResponse, response status code and response headers
    def list_usage_record_yesterday_with_http_info(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageRecordYesterdayResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_record_yesterday(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_record_yesterday\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageRecordYesterdayResponse.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
    # @optional @param category [Twilio::UsageRecordEnumCategory?] The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
    # @optional @param start_date [Time?] Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
    # @optional @param end_date [Time?] Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
    # @optional @param include_subaccounts [Bool?] Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_record_yesterday(account_sid: account_sid, category: category, start_date: start_date, end_date: end_date, include_subaccounts: include_subaccounts, page_size: page_size).execute(&block)
    end

    LIST_USAGE_RECORD_YESTERDAY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YESTERDAY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_RECORD_YESTERDAY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_RECORD_YESTERDAY_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_RECORD_YESTERDAY_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_record_yesterday(
      *,
      account_sid : String? = @account_sid,
      category : Twilio::UsageRecordEnumCategory? = nil,
      start_date : Time? = nil,
      end_date : Time? = nil,
      include_subaccounts : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_record_yesterday ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YESTERDAY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_RECORD_YESTERDAY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_RECORD_YESTERDAY_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_category = category).nil?
          _category.validate
        end
        unless (_start_date = start_date).nil?
        end
        unless (_end_date = end_date).nil?
        end
        unless (_include_subaccounts = include_subaccounts).nil?
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_RECORD_YESTERDAY_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_RECORD_YESTERDAY_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Category"] = category.to_s if !category.nil?
      query_params["StartDate"] = Time::Format::ISO_8601_DATE.format(start_date) if !start_date.nil?
      query_params["EndDate"] = Time::Format::ISO_8601_DATE.format(end_date) if !end_date.nil?
      query_params["IncludeSubaccounts"] = include_subaccounts.to_s if !include_subaccounts.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_record_yesterday",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListUsageTriggerResponse]
    def list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListUsageTriggerResponse
      data, _status_code, _headers = list_usage_trigger_with_http_info(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size)
      data
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListUsageTriggerResponse, Integer, Hash)] Twilio::ListUsageTriggerResponse, response status code and response headers
    def list_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListUsageTriggerResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_usage_trigger(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#list_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListUsageTriggerResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of usage-triggers belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    # @optional @param recurring [Twilio::UsageTriggerEnumRecurring?] The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    # @optional @param trigger_by [Twilio::UsageTriggerEnumTriggerField?] The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    # @optional @param usage_category [Twilio::UsageRecordEnumCategory?] The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_usage_trigger(account_sid: account_sid, recurring: recurring, trigger_by: trigger_by, usage_category: usage_category, page_size: page_size).execute(&block)
    end

    LIST_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_USAGE_TRIGGER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_USAGE_TRIGGER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      recurring : Twilio::UsageTriggerEnumRecurring? = nil,
      trigger_by : Twilio::UsageTriggerEnumTriggerField? = nil,
      usage_category : Twilio::UsageRecordEnumCategory? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.list_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_recurring = recurring).nil?
          _recurring.validate
        end
        unless (_trigger_by = trigger_by).nil?
          _trigger_by.validate
        end
        unless (_usage_category = usage_category).nil?
          _usage_category.validate
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_USAGE_TRIGGER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_USAGE_TRIGGER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Recurring"] = recurring.to_s if !recurring.nil?
      query_params["TriggerBy"] = trigger_by.to_s if !trigger_by.nil?
      query_params["UsageCategory"] = usage_category.to_s if !usage_category.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.list_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return [Twilio::Account]
    def update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Twilio::Account
      data, _status_code, _headers = update_account_with_http_info(sid: sid, friendly_name: friendly_name, status: status)
      data
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return [Tuple(Twilio::Account, Integer, Hash)] Twilio::Account, response status code and response headers
    def update_account_with_http_info(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Tuple(Twilio::Account, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_account(sid: sid, friendly_name: friendly_name, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Account.from_json(body), status_code, headers)
    end

    # Modify the properties of a given Account
    # @required @param sid [String?] The Account Sid that uniquely identifies the account to update
    # @optional @param friendly_name [String?] Update the human-readable description of this Account
    # @optional @param status [Twilio::AccountEnumStatus?]
    # @return nil
    def update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_account(sid: sid, friendly_name: friendly_name, status: status).execute(&block)
    end

    UPDATE_ACCOUNT_MAX_LENGTH_FOR_SID = 34
    UPDATE_ACCOUNT_MIN_LENGTH_FOR_SID = 34
    UPDATE_ACCOUNT_PATTERN_FOR_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_account(
      *,
      sid : String? = nil,
      friendly_name : String? = nil,
      status : Twilio::AccountEnumStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_account ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_ACCOUNT_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_ACCOUNT_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_ACCOUNT_PATTERN_FOR_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{Sid}.json".sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Twilio::Address]
    def update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Twilio::Address
      data, _status_code, _headers = update_address_with_http_info(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return [Tuple(Twilio::Address, Integer, Hash)] Twilio::Address, response status code and response headers
    def update_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Tuple(Twilio::Address, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_address(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Address.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Address resource to update.
    # @optional @param auto_correct_address [Bool?] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    # @optional @param city [String?] The city of the address.
    # @optional @param customer_name [String?] The name to associate with the address.
    # @optional @param emergency_enabled [Bool?] Whether to enable emergency calling on the address. Can be: `true` or `false`.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the address. It can be up to 64 characters long.
    # @optional @param postal_code [String?] The postal code of the address.
    # @optional @param region [String?] The state or region of the address.
    # @optional @param street [String?] The number and street address of the address.
    # @optional @param street_secondary [String?] The additional number and street address of the address.
    # @return nil
    def update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_address(account_sid: account_sid, sid: sid, auto_correct_address: auto_correct_address, city: city, customer_name: customer_name, emergency_enabled: emergency_enabled, friendly_name: friendly_name, postal_code: postal_code, region: region, street: street, street_secondary: street_secondary).execute(&block)
    end

    UPDATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_ADDRESS_MAX_LENGTH_FOR_SID         = 34
    UPDATE_ADDRESS_MIN_LENGTH_FOR_SID         = 34
    UPDATE_ADDRESS_PATTERN_FOR_SID            = /^AD[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_address(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      auto_correct_address : Bool? = nil,
      city : String? = nil,
      customer_name : String? = nil,
      emergency_enabled : Bool? = nil,
      friendly_name : String? = nil,
      postal_code : String? = nil,
      region : String? = nil,
      street : String? = nil,
      street_secondary : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_ADDRESS_PATTERN_FOR_SID)
        end
        unless (_auto_correct_address = auto_correct_address).nil?
        end
        unless (_city = city).nil?
        end
        unless (_customer_name = customer_name).nil?
        end
        unless (_emergency_enabled = emergency_enabled).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_postal_code = postal_code).nil?
        end
        unless (_region = region).nil?
        end
        unless (_street = street).nil?
        end
        unless (_street_secondary = street_secondary).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AutoCorrectAddress", auto_correct_address.to_s) if !auto_correct_address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("City", city.to_s) if !city.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CustomerName", customer_name.to_s) if !customer_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyEnabled", emergency_enabled.to_s) if !emergency_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("PostalCode", postal_code.to_s) if !postal_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Street", street.to_s) if !street.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StreetSecondary", street_secondary.to_s) if !street_secondary.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the application's properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Twilio::Application]
    def update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Twilio::Application
      data, _status_code, _headers = update_application_with_http_info(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)
      data
    end

    # Updates the application&#39;s properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return [Tuple(Twilio::Application, Integer, Hash)] Twilio::Application, response status code and response headers
    def update_application_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::Application, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_application(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_application\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Application.from_json(body), status_code, headers)
    end

    # Updates the application&#39;s properties
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Application resource to update.
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param message_status_callback [String?] The URL we should call using a POST method to send message status information to your application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_status_callback [String?] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_caller_id_lookup [Bool?] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_url [String?] The URL we should call when the phone number assigned to this application receives a call.
    # @return nil
    def update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_application(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, message_status_callback: message_status_callback, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_status_callback: sms_status_callback, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_url: voice_url).execute(&block)
    end

    UPDATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_APPLICATION_MAX_LENGTH_FOR_SID         = 34
    UPDATE_APPLICATION_MIN_LENGTH_FOR_SID         = 34
    UPDATE_APPLICATION_PATTERN_FOR_SID            = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_application(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      message_status_callback : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_status_callback : String? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_application ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_APPLICATION_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_APPLICATION_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_APPLICATION_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_APPLICATION_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_APPLICATION_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_APPLICATION_PATTERN_FOR_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_message_status_callback = message_status_callback).nil?
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_status_callback = sms_status_callback).nil?
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MessageStatusCallback", message_status_callback.to_s) if !message_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsStatusCallback", sms_status_callback.to_s) if !sms_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_application",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Twilio::Call]
    def update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Twilio::Call
      data, _status_code, _headers = update_call_with_http_info(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url)
      data
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return [Tuple(Twilio::Call, Integer, Hash)] Twilio::Call, response status code and response headers
    def update_call_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Tuple(Twilio::Call, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_call\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Call.from_json(body), status_code, headers)
    end

    # Initiates a call redirect or terminates a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Call resource to update
    # @optional @param fallback_method [Twilio::HttpMethod?]
    # @optional @param fallback_url [String?] The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    # @optional @param method [Twilio::HttpMethod?]
    # @optional @param status [Twilio::CallEnumUpdateStatus?]
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param twiml [String?] TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    # @optional @param url [String?] The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    # @return nil
    def update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call(account_sid: account_sid, sid: sid, fallback_method: fallback_method, fallback_url: fallback_url, method: method, status: status, status_callback: status_callback, status_callback_method: status_callback_method, time_limit: time_limit, twiml: twiml, url: url).execute(&block)
    end

    UPDATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CALL_MAX_LENGTH_FOR_SID         = 34
    UPDATE_CALL_MIN_LENGTH_FOR_SID         = 34
    UPDATE_CALL_PATTERN_FOR_SID            = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      fallback_method : Twilio::HttpMethod? = nil,
      fallback_url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      status : Twilio::CallEnumUpdateStatus? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      twiml : String? = nil,
      url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_call ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_CALL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_CALL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_CALL_PATTERN_FOR_SID)
        end
        unless (_fallback_method = fallback_method).nil?
          _fallback_method.validate
        end
        unless (_fallback_url = fallback_url).nil?
        end
        unless (_method = method).nil?
          _method.validate
        end
        unless (_status = status).nil?
          _status.validate
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_time_limit = time_limit).nil?
        end
        unless (_twiml = twiml).nil?
        end
        unless (_url = url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackMethod", fallback_method.to_s) if !fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FallbackUrl", fallback_url.to_s) if !fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Twiml", twiml.to_s) if !twiml.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_call",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return [Twilio::CallCallFeedback]
    def update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Twilio::CallCallFeedback
      data, _status_code, _headers = update_call_feedback_with_http_info(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score)
      data
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return [Tuple(Twilio::CallCallFeedback, Integer, Hash)] Twilio::CallCallFeedback, response status code and response headers
    def update_call_feedback_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Tuple(Twilio::CallCallFeedback, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call_feedback(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_call_feedback\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallFeedback.from_json(body), status_code, headers)
    end

    # Update a Feedback resource for a call
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param call_sid [String?] The call sid that uniquely identifies the call
    # @optional @param issue [Array(CallFeedbackEnumIssues)?] One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
    # @optional @param quality_score [Int32?] The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
    # @return nil
    def update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call_feedback(account_sid: account_sid, call_sid: call_sid, issue: issue, quality_score: quality_score).execute(&block)
    end

    UPDATE_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call_feedback(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      issue : Array(CallFeedbackEnumIssues)? = nil,
      quality_score : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_call_feedback ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_FEEDBACK_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_FEEDBACK_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_FEEDBACK_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
        unless (_issue = issue).nil?
        end
        unless (_quality_score = quality_score).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(@api_client.build_collection_param_tuples("Issue", issue, "multi")) if !issue.nil? && !issue.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("QualityScore", quality_score.to_s) if !quality_score.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_call_feedback",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Twilio::CallCallRecording]
    def update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Twilio::CallCallRecording
      data, _status_code, _headers = update_call_recording_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior)
      data
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Tuple(Twilio::CallCallRecording, Integer, Hash)] Twilio::CallCallRecording, response status code and response headers
    def update_call_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Tuple(Twilio::CallCallRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_call_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallCallRecording.from_json(body), status_code, headers)
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Recording resource to update.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return nil
    def update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_call_recording(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status, pause_behavior: pause_behavior).execute(&block)
    end

    UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_CALL_RECORDING_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_call_recording(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_call_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CALL_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_CALL_RECORDING_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_CALL_RECORDING_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_CALL_RECORDING_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
        end
        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
        unless (_pause_behavior = pause_behavior).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("PauseBehavior", pause_behavior.to_s) if !pause_behavior.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_call_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return [Twilio::Conference]
    def update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Twilio::Conference
      data, _status_code, _headers = update_conference_with_http_info(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return [Tuple(Twilio::Conference, Integer, Hash)] Twilio::Conference, response status code and response headers
    def update_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Tuple(Twilio::Conference, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_conference(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Conference.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return nil
    def update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_conference(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status).execute(&block)
    end

    UPDATE_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_conference ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
        end
        unless (_announce_method = announce_method).nil?
          _announce_method.validate
        end
        unless (_announce_url = announce_url).nil?
        end
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceMethod", announce_method.to_s) if !announce_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceUrl", announce_url.to_s) if !announce_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Twilio::ConferenceConferenceRecording]
    def update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Twilio::ConferenceConferenceRecording
      data, _status_code, _headers = update_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior)
      data
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Tuple(Twilio::ConferenceConferenceRecording, Integer, Hash)] Twilio::ConferenceConferenceRecording, response status code and response headers
    def update_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Tuple(Twilio::ConferenceConferenceRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceConferenceRecording.from_json(body), status_code, headers)
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return nil
    def update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior).execute(&block)
    end

    UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_conference_recording ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
        end
        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
        unless (_pause_behavior = pause_behavior).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("PauseBehavior", pause_behavior.to_s) if !pause_behavior.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a connect-app with the specified parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
    # @optional @param authorize_redirect_url [String?] The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
    # @optional @param company_name [String?] The company name to set for the Connect App.
    # @optional @param deauthorize_callback_method [Twilio::HttpMethod?]
    # @optional @param deauthorize_callback_url [String?] The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.
    # @optional @param description [String?] A description of the Connect App.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param homepage_url [String?] A public URL where users can obtain more information about this Connect App.
    # @optional @param permissions [Array(ConnectAppEnumPermission)?] A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.
    # @return [Twilio::ConnectApp]
    def update_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      authorize_redirect_url : String? = nil,
      company_name : String? = nil,
      deauthorize_callback_method : Twilio::HttpMethod? = nil,
      deauthorize_callback_url : String? = nil,
      description : String? = nil,
      friendly_name : String? = nil,
      homepage_url : String? = nil,
      permissions : Array(ConnectAppEnumPermission)? = nil
    ) : Twilio::ConnectApp
      data, _status_code, _headers = update_connect_app_with_http_info(account_sid: account_sid, sid: sid, authorize_redirect_url: authorize_redirect_url, company_name: company_name, deauthorize_callback_method: deauthorize_callback_method, deauthorize_callback_url: deauthorize_callback_url, description: description, friendly_name: friendly_name, homepage_url: homepage_url, permissions: permissions)
      data
    end

    # Update a connect-app with the specified parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
    # @optional @param authorize_redirect_url [String?] The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
    # @optional @param company_name [String?] The company name to set for the Connect App.
    # @optional @param deauthorize_callback_method [Twilio::HttpMethod?]
    # @optional @param deauthorize_callback_url [String?] The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.
    # @optional @param description [String?] A description of the Connect App.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param homepage_url [String?] A public URL where users can obtain more information about this Connect App.
    # @optional @param permissions [Array(ConnectAppEnumPermission)?] A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.
    # @return [Tuple(Twilio::ConnectApp, Integer, Hash)] Twilio::ConnectApp, response status code and response headers
    def update_connect_app_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      authorize_redirect_url : String? = nil,
      company_name : String? = nil,
      deauthorize_callback_method : Twilio::HttpMethod? = nil,
      deauthorize_callback_url : String? = nil,
      description : String? = nil,
      friendly_name : String? = nil,
      homepage_url : String? = nil,
      permissions : Array(ConnectAppEnumPermission)? = nil
    ) : Tuple(Twilio::ConnectApp, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_connect_app(account_sid: account_sid, sid: sid, authorize_redirect_url: authorize_redirect_url, company_name: company_name, deauthorize_callback_method: deauthorize_callback_method, deauthorize_callback_url: deauthorize_callback_url, description: description, friendly_name: friendly_name, homepage_url: homepage_url, permissions: permissions)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_connect_app\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConnectApp.from_json(body), status_code, headers)
    end

    # Update a connect-app with the specified parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
    # @optional @param authorize_redirect_url [String?] The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
    # @optional @param company_name [String?] The company name to set for the Connect App.
    # @optional @param deauthorize_callback_method [Twilio::HttpMethod?]
    # @optional @param deauthorize_callback_url [String?] The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.
    # @optional @param description [String?] A description of the Connect App.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @optional @param homepage_url [String?] A public URL where users can obtain more information about this Connect App.
    # @optional @param permissions [Array(ConnectAppEnumPermission)?] A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.
    # @return nil
    def update_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      authorize_redirect_url : String? = nil,
      company_name : String? = nil,
      deauthorize_callback_method : Twilio::HttpMethod? = nil,
      deauthorize_callback_url : String? = nil,
      description : String? = nil,
      friendly_name : String? = nil,
      homepage_url : String? = nil,
      permissions : Array(ConnectAppEnumPermission)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_connect_app(account_sid: account_sid, sid: sid, authorize_redirect_url: authorize_redirect_url, company_name: company_name, deauthorize_callback_method: deauthorize_callback_method, deauthorize_callback_url: deauthorize_callback_url, description: description, friendly_name: friendly_name, homepage_url: homepage_url, permissions: permissions).execute(&block)
    end

    UPDATE_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CONNECT_APP_MAX_LENGTH_FOR_SID         = 34
    UPDATE_CONNECT_APP_MIN_LENGTH_FOR_SID         = 34
    UPDATE_CONNECT_APP_PATTERN_FOR_SID            = /^CN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_connect_app(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      authorize_redirect_url : String? = nil,
      company_name : String? = nil,
      deauthorize_callback_method : Twilio::HttpMethod? = nil,
      deauthorize_callback_url : String? = nil,
      description : String? = nil,
      friendly_name : String? = nil,
      homepage_url : String? = nil,
      permissions : Array(ConnectAppEnumPermission)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_connect_app ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CONNECT_APP_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CONNECT_APP_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CONNECT_APP_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_CONNECT_APP_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_CONNECT_APP_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_CONNECT_APP_PATTERN_FOR_SID)
        end
        unless (_authorize_redirect_url = authorize_redirect_url).nil?
        end
        unless (_company_name = company_name).nil?
        end
        unless (_deauthorize_callback_method = deauthorize_callback_method).nil?
          _deauthorize_callback_method.validate
        end
        unless (_deauthorize_callback_url = deauthorize_callback_url).nil?
        end
        unless (_description = description).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_homepage_url = homepage_url).nil?
        end
        unless (_permissions = permissions).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AuthorizeRedirectUrl", authorize_redirect_url.to_s) if !authorize_redirect_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CompanyName", company_name.to_s) if !company_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DeauthorizeCallbackMethod", deauthorize_callback_method.to_s) if !deauthorize_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DeauthorizeCallbackUrl", deauthorize_callback_url.to_s) if !deauthorize_callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("HomepageUrl", homepage_url.to_s) if !homepage_url.nil?
      form_params.concat(@api_client.build_collection_param_tuples("Permissions", permissions, "multi")) if !permissions.nil? && !permissions.empty?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_connect_app",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an incoming-phone-number instance.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.
    # @optional @param account_sid2 [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from this phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle phone calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle phone calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Twilio::IncomingPhoneNumber]
    def update_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      account_sid2 : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Twilio::IncomingPhoneNumber
      data, _status_code, _headers = update_incoming_phone_number_with_http_info(account_sid: account_sid, sid: sid, account_sid2: account_sid2, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)
      data
    end

    # Update an incoming-phone-number instance.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.
    # @optional @param account_sid2 [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from this phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle phone calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle phone calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return [Tuple(Twilio::IncomingPhoneNumber, Integer, Hash)] Twilio::IncomingPhoneNumber, response status code and response headers
    def update_incoming_phone_number_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      account_sid2 : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::IncomingPhoneNumber, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_incoming_phone_number(account_sid: account_sid, sid: sid, account_sid2: account_sid2, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_incoming_phone_number\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::IncomingPhoneNumber.from_json(body), status_code, headers)
    end

    # Update an incoming-phone-number instance.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.
    # @optional @param account_sid2 [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
    # @optional @param address_sid [String?] The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations.
    # @optional @param api_version [String?] The API version to use for incoming calls made to the phone number. The default is `2010-04-01`.
    # @optional @param bundle_sid [String?] The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    # @optional @param emergency_address_sid [String?] The SID of the emergency address configuration to use for emergency calling from this phone number.
    # @optional @param emergency_status [Twilio::IncomingPhoneNumberEnumEmergencyStatus?]
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    # @optional @param identity_sid [String?] The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations.
    # @optional @param sms_application_sid [String?] The SID of the application that should handle SMS messages sent to the number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when the phone number receives an incoming SMS message.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param trunk_sid [String?] The SID of the Trunk we should use to handle phone calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    # @optional @param voice_application_sid [String?] The SID of the application we should use to handle phone calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    # @optional @param voice_caller_id_lookup [Bool?] Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_receive_mode [Twilio::IncomingPhoneNumberEnumVoiceReceiveMode?]
    # @optional @param voice_url [String?] The URL that we should call to answer a call to the phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    # @return nil
    def update_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      account_sid2 : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_incoming_phone_number(account_sid: account_sid, sid: sid, account_sid2: account_sid2, address_sid: address_sid, api_version: api_version, bundle_sid: bundle_sid, emergency_address_sid: emergency_address_sid, emergency_status: emergency_status, friendly_name: friendly_name, identity_sid: identity_sid, sms_application_sid: sms_application_sid, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url, status_callback: status_callback, status_callback_method: status_callback_method, trunk_sid: trunk_sid, voice_application_sid: voice_application_sid, voice_caller_id_lookup: voice_caller_id_lookup, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_receive_mode: voice_receive_mode, voice_url: voice_url).execute(&block)
    end

    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID           = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID           = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID              = /^AC[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID                   = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID                   = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID                      = /^PN[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID2          = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID2          = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID2             = /^AC[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID           = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID           = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID              = /^AD[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_BUNDLE_SID            = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_BUNDLE_SID            = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_BUNDLE_SID               = /^BU[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_EMERGENCY_ADDRESS_SID    = /^AD[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_IDENTITY_SID          = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_IDENTITY_SID          = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_IDENTITY_SID             = /^RI[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SMS_APPLICATION_SID   = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SMS_APPLICATION_SID      = /^AP[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_TRUNK_SID             = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_TRUNK_SID             = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_TRUNK_SID                = /^TK[0-9a-fA-F]{32}$/
    UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_VOICE_APPLICATION_SID = 34
    UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_VOICE_APPLICATION_SID    = /^AP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_incoming_phone_number(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      account_sid2 : String? = @account_sid,
      address_sid : String? = nil,
      api_version : String? = nil,
      bundle_sid : String? = nil,
      emergency_address_sid : String? = nil,
      emergency_status : Twilio::IncomingPhoneNumberEnumEmergencyStatus? = nil,
      friendly_name : String? = nil,
      identity_sid : String? = nil,
      sms_application_sid : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      status_callback : String? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      trunk_sid : String? = nil,
      voice_application_sid : String? = nil,
      voice_caller_id_lookup : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_receive_mode : Twilio::IncomingPhoneNumberEnumVoiceReceiveMode? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_incoming_phone_number ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SID)
        end
        unless (_account_sid2 = account_sid2).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid2", account_sid2.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ACCOUNT_SID2)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid2", account_sid2.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ACCOUNT_SID2)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid2", _account_sid2, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ACCOUNT_SID2)
        end
        unless (_address_sid = address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("address_sid", address_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("address_sid", address_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("address_sid", _address_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_ADDRESS_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_bundle_sid = bundle_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("bundle_sid", bundle_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("bundle_sid", bundle_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_BUNDLE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("bundle_sid", _bundle_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_BUNDLE_SID)
        end
        unless (_emergency_address_sid = emergency_address_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_address_sid", emergency_address_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_address_sid", emergency_address_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_EMERGENCY_ADDRESS_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_address_sid", _emergency_address_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_EMERGENCY_ADDRESS_SID)
        end
        unless (_emergency_status = emergency_status).nil?
          _emergency_status.validate
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_identity_sid = identity_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("identity_sid", identity_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_min_length("identity_sid", identity_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_IDENTITY_SID)
          OpenApi::PrimitiveValidator.validate_pattern("identity_sid", _identity_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_IDENTITY_SID)
        end
        unless (_sms_application_sid = sms_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sms_application_sid", sms_application_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sms_application_sid", sms_application_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_SMS_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sms_application_sid", _sms_application_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_SMS_APPLICATION_SID)
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
        unless (_status_callback = status_callback).nil?
        end
        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end
        unless (_trunk_sid = trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("trunk_sid", trunk_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("trunk_sid", trunk_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("trunk_sid", _trunk_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_TRUNK_SID)
        end
        unless (_voice_application_sid = voice_application_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("voice_application_sid", voice_application_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MAX_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_min_length("voice_application_sid", voice_application_sid.to_s.size, UPDATE_INCOMING_PHONE_NUMBER_MIN_LENGTH_FOR_VOICE_APPLICATION_SID)
          OpenApi::PrimitiveValidator.validate_pattern("voice_application_sid", _voice_application_sid, UPDATE_INCOMING_PHONE_NUMBER_PATTERN_FOR_VOICE_APPLICATION_SID)
        end
        unless (_voice_caller_id_lookup = voice_caller_id_lookup).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_receive_mode = voice_receive_mode).nil?
          _voice_receive_mode.validate
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AccountSid", account_sid2.to_s) if !account_sid2.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AddressSid", address_sid.to_s) if !address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BundleSid", bundle_sid.to_s) if !bundle_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyAddressSid", emergency_address_sid.to_s) if !emergency_address_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyStatus", emergency_status.to_s) if !emergency_status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdentitySid", identity_sid.to_s) if !identity_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsApplicationSid", sms_application_sid.to_s) if !sms_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TrunkSid", trunk_sid.to_s) if !trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceApplicationSid", voice_application_sid.to_s) if !voice_application_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceCallerIdLookup", voice_caller_id_lookup.to_s) if !voice_caller_id_lookup.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceReceiveMode", voice_receive_mode.to_s) if !voice_receive_mode.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_incoming_phone_number",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::Key]
    def update_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::Key
      data, _status_code, _headers = update_key_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::Key, Integer, Hash)] Twilio::Key, response status code and response headers
    def update_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::Key, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_key(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Key.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Key resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def update_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_key(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_KEY_MAX_LENGTH_FOR_SID         = 34
    UPDATE_KEY_MIN_LENGTH_FOR_SID         = 34
    UPDATE_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_KEY_PATTERN_FOR_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Twilio::QueueMember]
    def update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Twilio::QueueMember
      data, _status_code, _headers = update_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method)
      data
    end

    # Dequeue a member from a queue and have the member&#39;s call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::QueueMember, Integer, Hash)] Twilio::QueueMember, response status code and response headers
    def update_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::QueueMember, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::QueueMember.from_json(body), status_code, headers)
    end

    # Dequeue a member from a queue and have the member&#39;s call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return nil
    def update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method).execute(&block)
    end

    UPDATE_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    UPDATE_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    UPDATE_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, UPDATE_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, UPDATE_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, UPDATE_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
        raise ArgumentError.new("\"url\" is required and cannot be null") if url.nil?
        unless (_url = url).nil?
        end
        unless (_method = method).nil?
          _method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return [Twilio::Message]
    def update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Twilio::Message
      data, _status_code, _headers = update_message_with_http_info(account_sid: account_sid, sid: sid, body: body, status: status)
      data
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return [Tuple(Twilio::Message, Integer, Hash)] Twilio::Message, response status code and response headers
    def update_message_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Tuple(Twilio::Message, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_message(account_sid: account_sid, sid: sid, body: body, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_message\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Message.from_json(body), status_code, headers)
    end

    # To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Message resource to update.
    # @optional @param body [String?] The text of the message you want to send. Can be up to 1,600 characters long.
    # @optional @param status [Twilio::MessageEnumUpdateStatus?]
    # @return nil
    def update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_message(account_sid: account_sid, sid: sid, body: body, status: status).execute(&block)
    end

    UPDATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_MESSAGE_MAX_LENGTH_FOR_SID         = 34
    UPDATE_MESSAGE_MIN_LENGTH_FOR_SID         = 34
    UPDATE_MESSAGE_PATTERN_FOR_SID            = /^(SM|MM)[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_message(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      body : String? = nil,
      status : Twilio::MessageEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_message ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_MESSAGE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_MESSAGE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_MESSAGE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_MESSAGE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_MESSAGE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_MESSAGE_PATTERN_FOR_SID)
        end
        unless (_body = body).nil?
        end
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Body", body.to_s) if !body.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_message",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::OutgoingCallerId]
    def update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::OutgoingCallerId
      data, _status_code, _headers = update_outgoing_caller_id_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::OutgoingCallerId, Integer, Hash)] Twilio::OutgoingCallerId, response status code and response headers
    def update_outgoing_caller_id_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::OutgoingCallerId, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_outgoing_caller_id(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_outgoing_caller_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::OutgoingCallerId.from_json(body), status_code, headers)
    end

    # Updates the caller-id
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_outgoing_caller_id(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID         = 34
    UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID         = 34
    UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_SID            = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_outgoing_caller_id(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_outgoing_caller_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_OUTGOING_CALLER_ID_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_OUTGOING_CALLER_ID_PATTERN_FOR_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_outgoing_caller_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Twilio::ConferenceParticipant]
    def update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = update_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url)
      data
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def update_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return nil
    def update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url).execute(&block)
    end

    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID    = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID    = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID       = /^CF[0-9a-fA-F]{32}$/
    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH    = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_participant ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, UPDATE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
        end
        unless (_announce_method = announce_method).nil?
          _announce_method.validate
        end
        unless (_announce_url = announce_url).nil?
        end
        unless (_beep_on_exit = beep_on_exit).nil?
        end
        unless (_call_sid_to_coach = call_sid_to_coach).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid_to_coach", call_sid_to_coach.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid_to_coach", call_sid_to_coach.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid_to_coach", _call_sid_to_coach, UPDATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH)
        end
        unless (_coaching = coaching).nil?
        end
        unless (_end_conference_on_exit = end_conference_on_exit).nil?
        end
        unless (_hold = hold).nil?
        end
        unless (_hold_method = hold_method).nil?
          _hold_method.validate
        end
        unless (_hold_url = hold_url).nil?
        end
        unless (_muted = muted).nil?
        end
        unless (_wait_method = wait_method).nil?
          _wait_method.validate
        end
        unless (_wait_url = wait_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceMethod", announce_method.to_s) if !announce_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceUrl", announce_url.to_s) if !announce_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BeepOnExit", beep_on_exit.to_s) if !beep_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallSidToCoach", call_sid_to_coach.to_s) if !call_sid_to_coach.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Coaching", coaching.to_s) if !coaching.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EndConferenceOnExit", end_conference_on_exit.to_s) if !end_conference_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Hold", hold.to_s) if !hold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("HoldMethod", hold_method.to_s) if !hold_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("HoldUrl", hold_url.to_s) if !hold_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Muted", muted.to_s) if !muted.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitMethod", wait_method.to_s) if !wait_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitUrl", wait_url.to_s) if !wait_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return [Twilio::CallPayments]
    def update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Twilio::CallPayments
      data, _status_code, _headers = update_payments_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status)
      data
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return [Tuple(Twilio::CallPayments, Integer, Hash)] Twilio::CallPayments, response status code and response headers
    def update_payments_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Tuple(Twilio::CallPayments, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_payments(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_payments\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallPayments.from_json(body), status_code, headers)
    end

    # update an instance of payments with different phases of payment flows.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    # @required @param call_sid [String?] The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    # @required @param sid [String?] The SID of Payments session that needs to be updated.
    # @required @param idempotency_key [String?] A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    # @required @param status_callback [String?] Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    # @optional @param capture [Twilio::PaymentsEnumCapture?]
    # @optional @param status [Twilio::PaymentsEnumStatus?]
    # @return nil
    def update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_payments(account_sid: account_sid, call_sid: call_sid, sid: sid, idempotency_key: idempotency_key, status_callback: status_callback, capture: capture, status: status).execute(&block)
    end

    UPDATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_PAYMENTS_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/
    UPDATE_PAYMENTS_MAX_LENGTH_FOR_SID         = 34
    UPDATE_PAYMENTS_MIN_LENGTH_FOR_SID         = 34
    UPDATE_PAYMENTS_PATTERN_FOR_SID            = /^PK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_payments(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      idempotency_key : String? = nil,
      status_callback : String? = nil,
      capture : Twilio::PaymentsEnumCapture? = nil,
      status : Twilio::PaymentsEnumStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_payments ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_PAYMENTS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_PAYMENTS_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_PAYMENTS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_PAYMENTS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_PAYMENTS_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if idempotency_key.nil?
        unless (_idempotency_key = idempotency_key).nil?
        end
        raise ArgumentError.new("\"status_callback\" is required and cannot be null") if status_callback.nil?
        unless (_status_callback = status_callback).nil?
        end
        unless (_capture = capture).nil?
          _capture.validate
        end
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Capture", capture.to_s) if !capture.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IdempotencyKey", idempotency_key.to_s) if !idempotency_key.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Twilio::Queue]
    def update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = update_queue_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size)
      data
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def update_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_queue(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return nil
    def update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_queue(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size).execute(&block)
    end

    UPDATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_QUEUE_MAX_LENGTH_FOR_SID         = 34
    UPDATE_QUEUE_MIN_LENGTH_FOR_SID         = 34
    UPDATE_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_QUEUE_PATTERN_FOR_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_max_size = max_size).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxSize", max_size.to_s) if !max_size.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a short code with the following parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to update
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when receiving an incoming SMS message to this short code.
    # @return [Twilio::ShortCode]
    def update_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil
    ) : Twilio::ShortCode
      data, _status_code, _headers = update_short_code_with_http_info(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url)
      data
    end

    # Update a short code with the following parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to update
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when receiving an incoming SMS message to this short code.
    # @return [Tuple(Twilio::ShortCode, Integer, Hash)] Twilio::ShortCode, response status code and response headers
    def update_short_code_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil
    ) : Tuple(Twilio::ShortCode, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_short_code(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_short_code\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ShortCode.from_json(body), status_code, headers)
    end

    # Update a short code with the following parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the ShortCode resource to update
    # @optional @param api_version [String?] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.
    # @optional @param sms_fallback_method [Twilio::HttpMethod?]
    # @optional @param sms_fallback_url [String?] The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.
    # @optional @param sms_method [Twilio::HttpMethod?]
    # @optional @param sms_url [String?] The URL we should call when receiving an incoming SMS message to this short code.
    # @return nil
    def update_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_short_code(account_sid: account_sid, sid: sid, api_version: api_version, friendly_name: friendly_name, sms_fallback_method: sms_fallback_method, sms_fallback_url: sms_fallback_url, sms_method: sms_method, sms_url: sms_url).execute(&block)
    end

    UPDATE_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SHORT_CODE_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SHORT_CODE_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SHORT_CODE_PATTERN_FOR_SID            = /^SC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_short_code(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      api_version : String? = nil,
      friendly_name : String? = nil,
      sms_fallback_method : Twilio::HttpMethod? = nil,
      sms_fallback_url : String? = nil,
      sms_method : Twilio::HttpMethod? = nil,
      sms_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_short_code ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SHORT_CODE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SHORT_CODE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SHORT_CODE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SHORT_CODE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SHORT_CODE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SHORT_CODE_PATTERN_FOR_SID)
        end
        unless (_api_version = api_version).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_sms_fallback_method = sms_fallback_method).nil?
          _sms_fallback_method.validate
        end
        unless (_sms_fallback_url = sms_fallback_url).nil?
        end
        unless (_sms_method = sms_method).nil?
          _sms_method.validate
        end
        unless (_sms_url = sms_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ApiVersion", api_version.to_s) if !api_version.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackMethod", sms_fallback_method.to_s) if !sms_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsFallbackUrl", sms_fallback_url.to_s) if !sms_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsMethod", sms_method.to_s) if !sms_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SmsUrl", sms_url.to_s) if !sms_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_short_code",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @optional @param friendly_name [String?]
    # @return [Twilio::SigningKey]
    def update_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::SigningKey
      data, _status_code, _headers = update_signing_key_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @optional @param friendly_name [String?]
    # @return [Tuple(Twilio::SigningKey, Integer, Hash)] Twilio::SigningKey, response status code and response headers
    def update_signing_key_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SigningKey, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_signing_key(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_signing_key\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SigningKey.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?]
    # @required @param sid [String?]
    # @optional @param friendly_name [String?]
    # @return nil
    def update_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_signing_key(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIGNING_KEY_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SIGNING_KEY_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SIGNING_KEY_PATTERN_FOR_SID            = /^SK[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_signing_key(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_signing_key ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIGNING_KEY_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIGNING_KEY_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIGNING_KEY_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIGNING_KEY_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIGNING_KEY_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIGNING_KEY_PATTERN_FOR_SID)
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_signing_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return [Twilio::SipSipCredentialListSipCredential]
    def update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Twilio::SipSipCredentialListSipCredential
      data, _status_code, _headers = update_sip_credential_with_http_info(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password)
      data
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return [Tuple(Twilio::SipSipCredentialListSipCredential, Integer, Hash)] Twilio::SipSipCredentialListSipCredential, response status code and response headers
    def update_sip_credential_with_http_info(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Tuple(Twilio::SipSipCredentialListSipCredential, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_sip_credential\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialListSipCredential.from_json(body), status_code, headers)
    end

    # Update a credential resource.
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param credential_list_sid [String?] The unique id that identifies the credential list that includes this credential.
    # @required @param sid [String?] The unique id that identifies the resource to update.
    # @optional @param password [String?] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
    # @return nil
    def update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_credential(account_sid: account_sid, credential_list_sid: credential_list_sid, sid: sid, password: password).execute(&block)
    end

    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID         = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID         = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID            = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID    = /^CL[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID                 = 34
    UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID                 = 34
    UPDATE_SIP_CREDENTIAL_PATTERN_FOR_SID                    = /^CR[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_credential(
      *,
      account_sid : String? = @account_sid,
      credential_list_sid : String? = nil,
      sid : String? = nil,
      password : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_sip_credential ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"credential_list_sid\" is required and cannot be null") if credential_list_sid.nil?
        unless (_credential_list_sid = credential_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("credential_list_sid", credential_list_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("credential_list_sid", credential_list_sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_CREDENTIAL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("credential_list_sid", _credential_list_sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_CREDENTIAL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_CREDENTIAL_PATTERN_FOR_SID)
        end
        unless (_password = password).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CredentialListSid" + "}", URI.encode_path(credential_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Password", password.to_s) if !password.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_sip_credential",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return [Twilio::SipSipCredentialList]
    def update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::SipSipCredentialList
      data, _status_code, _headers = update_sip_credential_list_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return [Tuple(Twilio::SipSipCredentialList, Integer, Hash)] Twilio::SipSipCredentialList, response status code and response headers
    def update_sip_credential_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipCredentialList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_credential_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_sip_credential_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipCredentialList.from_json(body), status_code, headers)
    end

    # Update a Credential List
    # @required @param account_sid [String?] The unique id of the Account that is responsible for this resource.
    # @required @param sid [String?] The credential list Sid that uniquely identifies this resource
    # @required @param friendly_name [String?] A human readable descriptive text for a CredentialList, up to 64 characters long.
    # @return nil
    def update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_credential_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID            = /^CL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_credential_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_sip_credential_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_CREDENTIAL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_CREDENTIAL_LIST_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_sip_credential_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return [Twilio::SipSipDomain]
    def update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Twilio::SipSipDomain
      data, _status_code, _headers = update_sip_domain_with_http_info(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)
      data
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return [Tuple(Twilio::SipSipDomain, Integer, Hash)] Twilio::SipSipDomain, response status code and response headers
    def update_sip_domain_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Tuple(Twilio::SipSipDomain, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_domain(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_sip_domain\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipDomain.from_json(body), status_code, headers)
    end

    # Update the attributes of a domain
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    # @optional @param byoc_trunk_sid [String?] The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    # @optional @param domain_name [String?] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    # @optional @param emergency_caller_sid [String?] Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    # @optional @param emergency_calling_enabled [Bool?] Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    # @optional @param friendly_name [String?] A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    # @optional @param secure [Bool?] Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    # @optional @param sip_registration [Bool?] Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    # @optional @param voice_fallback_method [Twilio::HttpMethod?]
    # @optional @param voice_fallback_url [String?] The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    # @optional @param voice_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_method [Twilio::HttpMethod?]
    # @optional @param voice_status_callback_url [String?] The URL that we should call to pass status parameters (such as call ended) to your application.
    # @optional @param voice_url [String?] The URL we should call when the domain receives a call.
    # @return nil
    def update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_domain(account_sid: account_sid, sid: sid, byoc_trunk_sid: byoc_trunk_sid, domain_name: domain_name, emergency_caller_sid: emergency_caller_sid, emergency_calling_enabled: emergency_calling_enabled, friendly_name: friendly_name, secure: secure, sip_registration: sip_registration, voice_fallback_method: voice_fallback_method, voice_fallback_url: voice_fallback_url, voice_method: voice_method, voice_status_callback_method: voice_status_callback_method, voice_status_callback_url: voice_status_callback_url, voice_url: voice_url).execute(&block)
    end

    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID          = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID          = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID             = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_SID                  = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_SID                  = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_SID                     = /^SD[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID       = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID          = /^BY[0-9a-fA-F]{32}$/
    UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID = 34
    UPDATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID    = /^PN[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_domain(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      byoc_trunk_sid : String? = nil,
      domain_name : String? = nil,
      emergency_caller_sid : String? = nil,
      emergency_calling_enabled : Bool? = nil,
      friendly_name : String? = nil,
      secure : Bool? = nil,
      sip_registration : Bool? = nil,
      voice_fallback_method : Twilio::HttpMethod? = nil,
      voice_fallback_url : String? = nil,
      voice_method : Twilio::HttpMethod? = nil,
      voice_status_callback_method : Twilio::HttpMethod? = nil,
      voice_status_callback_url : String? = nil,
      voice_url : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_sip_domain ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_SID)
        end
        unless (_byoc_trunk_sid = byoc_trunk_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_min_length("byoc_trunk_sid", byoc_trunk_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_BYOC_TRUNK_SID)
          OpenApi::PrimitiveValidator.validate_pattern("byoc_trunk_sid", _byoc_trunk_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_BYOC_TRUNK_SID)
        end
        unless (_domain_name = domain_name).nil?
        end
        unless (_emergency_caller_sid = emergency_caller_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("emergency_caller_sid", emergency_caller_sid.to_s.size, UPDATE_SIP_DOMAIN_MAX_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_min_length("emergency_caller_sid", emergency_caller_sid.to_s.size, UPDATE_SIP_DOMAIN_MIN_LENGTH_FOR_EMERGENCY_CALLER_SID)
          OpenApi::PrimitiveValidator.validate_pattern("emergency_caller_sid", _emergency_caller_sid, UPDATE_SIP_DOMAIN_PATTERN_FOR_EMERGENCY_CALLER_SID)
        end
        unless (_emergency_calling_enabled = emergency_calling_enabled).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_secure = secure).nil?
        end
        unless (_sip_registration = sip_registration).nil?
        end
        unless (_voice_fallback_method = voice_fallback_method).nil?
          _voice_fallback_method.validate
        end
        unless (_voice_fallback_url = voice_fallback_url).nil?
        end
        unless (_voice_method = voice_method).nil?
          _voice_method.validate
        end
        unless (_voice_status_callback_method = voice_status_callback_method).nil?
          _voice_status_callback_method.validate
        end
        unless (_voice_status_callback_url = voice_status_callback_url).nil?
        end
        unless (_voice_url = voice_url).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("ByocTrunkSid", byoc_trunk_sid.to_s) if !byoc_trunk_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("DomainName", domain_name.to_s) if !domain_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallerSid", emergency_caller_sid.to_s) if !emergency_caller_sid.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EmergencyCallingEnabled", emergency_calling_enabled.to_s) if !emergency_calling_enabled.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Secure", secure.to_s) if !secure.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipRegistration", sip_registration.to_s) if !sip_registration.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackMethod", voice_fallback_method.to_s) if !voice_fallback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceFallbackUrl", voice_fallback_url.to_s) if !voice_fallback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceMethod", voice_method.to_s) if !voice_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackMethod", voice_status_callback_method.to_s) if !voice_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceStatusCallbackUrl", voice_status_callback_url.to_s) if !voice_status_callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("VoiceUrl", voice_url.to_s) if !voice_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_sip_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return [Twilio::SipSipIpAccessControlList]
    def update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::SipSipIpAccessControlList
      data, _status_code, _headers = update_sip_ip_access_control_list_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name)
      data
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return [Tuple(Twilio::SipSipIpAccessControlList, Integer, Hash)] Twilio::SipSipIpAccessControlList, response status code and response headers
    def update_sip_ip_access_control_list_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_ip_access_control_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_sip_ip_access_control_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlList.from_json(body), status_code, headers)
    end

    # Rename an IpAccessControlList
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param sid [String?] A 34 character string that uniquely identifies the resource to udpate.
    # @required @param friendly_name [String?] A human readable descriptive text, up to 255 characters long.
    # @return nil
    def update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_ip_access_control_list(account_sid: account_sid, sid: sid, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID         = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID         = 34
    UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID            = /^AL[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_ip_access_control_list(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_sip_ip_access_control_list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_IP_ACCESS_CONTROL_LIST_PATTERN_FOR_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_sip_ip_access_control_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return [Twilio::SipSipIpAccessControlListSipIpAddress]
    def update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Twilio::SipSipIpAccessControlListSipIpAddress
      data, _status_code, _headers = update_sip_ip_address_with_http_info(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address)
      data
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return [Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Integer, Hash)] Twilio::SipSipIpAccessControlListSipIpAddress, response status code and response headers
    def update_sip_ip_address_with_http_info(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Tuple(Twilio::SipSipIpAccessControlListSipIpAddress, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_sip_ip_address\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::SipSipIpAccessControlListSipIpAddress.from_json(body), status_code, headers)
    end

    # Update an IpAddress resource.
    # @required @param account_sid [String?] The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    # @required @param ip_access_control_list_sid [String?] The IpAccessControlList Sid that identifies the IpAddress resources to update.
    # @required @param sid [String?] A 34 character string that identifies the IpAddress resource to update.
    # @optional @param cidr_prefix_length [Int32?] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    # @optional @param friendly_name [String?] A human readable descriptive text for this resource, up to 255 characters long.
    # @optional @param ip_address [String?] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    # @return nil
    def update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_sip_ip_address(account_sid: account_sid, ip_access_control_list_sid: ip_access_control_list_sid, sid: sid, cidr_prefix_length: cidr_prefix_length, friendly_name: friendly_name, ip_address: ip_address).execute(&block)
    end

    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID                = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID                = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID                   = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID    = /^AL[0-9a-fA-F]{32}$/
    UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID                        = 34
    UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID                        = 34
    UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_SID                           = /^IP[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_sip_ip_address(
      *,
      account_sid : String? = @account_sid,
      ip_access_control_list_sid : String? = nil,
      sid : String? = nil,
      cidr_prefix_length : Int32? = nil,
      friendly_name : String? = nil,
      ip_address : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_sip_ip_address ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"ip_access_control_list_sid\" is required and cannot be null") if ip_access_control_list_sid.nil?
        unless (_ip_access_control_list_sid = ip_access_control_list_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_min_length("ip_access_control_list_sid", ip_access_control_list_sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_IP_ACCESS_CONTROL_LIST_SID)
          OpenApi::PrimitiveValidator.validate_pattern("ip_access_control_list_sid", _ip_access_control_list_sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_IP_ACCESS_CONTROL_LIST_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_SIP_IP_ADDRESS_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_SIP_IP_ADDRESS_PATTERN_FOR_SID)
        end
        unless (_cidr_prefix_length = cidr_prefix_length).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
        unless (_ip_address = ip_address).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "IpAccessControlListSid" + "}", URI.encode_path(ip_access_control_list_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CidrPrefixLength", cidr_prefix_length.to_s) if !cidr_prefix_length.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("IpAddress", ip_address.to_s) if !ip_address.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_sip_ip_address",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Stop a Siprec using either the SID of the Siprec resource or the `name` used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Twilio::CallSiprec]
    def update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Twilio::CallSiprec
      data, _status_code, _headers = update_siprec_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)
      data
    end

    # Stop a Siprec using either the SID of the Siprec resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Tuple(Twilio::CallSiprec, Integer, Hash)] Twilio::CallSiprec, response status code and response headers
    def update_siprec_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Tuple(Twilio::CallSiprec, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_siprec(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_siprec\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallSiprec.from_json(body), status_code, headers)
    end

    # Stop a Siprec using either the SID of the Siprec resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Siprec resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Siprec resource is associated with.
    # @required @param sid [String?] The SID of the Siprec resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return nil
    def update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_siprec(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status).execute(&block)
    end

    UPDATE_SIPREC_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIPREC_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_SIPREC_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_SIPREC_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_SIPREC_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_SIPREC_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_siprec(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_siprec ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_SIPREC_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_SIPREC_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_SIPREC_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_SIPREC_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_SIPREC_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_SIPREC_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
        end
        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_siprec",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Stop a Stream using either the SID of the Stream resource or the `name` used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Twilio::CallStream]
    def update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Twilio::CallStream
      data, _status_code, _headers = update_stream_with_http_info(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)
      data
    end

    # Stop a Stream using either the SID of the Stream resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return [Tuple(Twilio::CallStream, Integer, Hash)] Twilio::CallStream, response status code and response headers
    def update_stream_with_http_info(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Tuple(Twilio::CallStream, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_stream(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_stream\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::CallStream.from_json(body), status_code, headers)
    end

    # Stop a Stream using either the SID of the Stream resource or the &#x60;name&#x60; used when creating the resource
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Stream resource.
    # @required @param call_sid [String?] The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Stream resource is associated with.
    # @required @param sid [String?] The SID of the Stream resource, or the `name` used when creating the resource
    # @required @param status [Twilio::SiprecEnumUpdateStatus?]
    # @return nil
    def update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_stream(account_sid: account_sid, call_sid: call_sid, sid: sid, status: status).execute(&block)
    end

    UPDATE_STREAM_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_STREAM_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_STREAM_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_STREAM_MAX_LENGTH_FOR_CALL_SID    = 34
    UPDATE_STREAM_MIN_LENGTH_FOR_CALL_SID    = 34
    UPDATE_STREAM_PATTERN_FOR_CALL_SID       = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_stream(
      *,
      account_sid : String? = @account_sid,
      call_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::SiprecEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_stream ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_STREAM_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_STREAM_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_STREAM_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
        unless (_call_sid = call_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid", call_sid.to_s.size, UPDATE_STREAM_MAX_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid", call_sid.to_s.size, UPDATE_STREAM_MIN_LENGTH_FOR_CALL_SID)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid", _call_sid, UPDATE_STREAM_PATTERN_FOR_CALL_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
        end
        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_stream",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Twilio::UsageUsageTrigger]
    def update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Twilio::UsageUsageTrigger
      data, _status_code, _headers = update_usage_trigger_with_http_info(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name)
      data
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return [Tuple(Twilio::UsageUsageTrigger, Integer, Hash)] Twilio::UsageUsageTrigger, response status code and response headers
    def update_usage_trigger_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Tuple(Twilio::UsageUsageTrigger, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_usage_trigger(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: DefaultApi#update_usage_trigger\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::UsageUsageTrigger.from_json(body), status_code, headers)
    end

    # Update an instance of a usage trigger
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    # @optional @param callback_method [Twilio::HttpMethod?]
    # @optional @param callback_url [String?] The URL we should call using `callback_method` when the trigger fires.
    # @optional @param friendly_name [String?] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    # @return nil
    def update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_usage_trigger(account_sid: account_sid, sid: sid, callback_method: callback_method, callback_url: callback_url, friendly_name: friendly_name).execute(&block)
    end

    UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID         = 34
    UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID         = 34
    UPDATE_USAGE_TRIGGER_PATTERN_FOR_SID            = /^UT[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_usage_trigger(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      callback_method : Twilio::HttpMethod? = nil,
      callback_url : String? = nil,
      friendly_name : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: DefaultApi.update_usage_trigger ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_USAGE_TRIGGER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_USAGE_TRIGGER_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_USAGE_TRIGGER_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_USAGE_TRIGGER_PATTERN_FOR_SID)
        end
        unless (_callback_method = callback_method).nil?
          _callback_method.validate
        end
        unless (_callback_url = callback_url).nil?
        end
        unless (_friendly_name = friendly_name).nil?
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackMethod", callback_method.to_s) if !callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallbackUrl", callback_url.to_s) if !callback_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.update_usage_trigger",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
