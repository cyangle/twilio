#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/call_recording_enum_status"
require "../models/conference"
require "../models/conference_conference_recording"
require "../models/conference_enum_status"
require "../models/conference_enum_update_status"
require "../models/conference_participant"
require "../models/http_method"

require "../models/list_conference_recording_response"
require "../models/list_conference_response"
require "../models/list_participant_response"

module Twilio
  class ConferencesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Twilio::ConferenceParticipant]
    def create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = create_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def create_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_participant(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#create_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param conference_sid [String?] The SID of the participant's conference.
    # @required @param from [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
    # @required @param to [String?] The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
    # @optional @param amd_status_callback [String?] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    # @optional @param amd_status_callback_method [Twilio::HttpMethod?]
    # @optional @param beep [String?] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    # @optional @param byoc [String?] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    # @optional @param call_reason [String?] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param caller_id [String?] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param conference_record [String?] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    # @optional @param conference_recording_status_callback [String?] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    # @optional @param conference_recording_status_callback_event [Array(String)?] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    # @optional @param conference_recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_status_callback [String?] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    # @optional @param conference_status_callback_event [Array(String)?] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    # @optional @param conference_status_callback_method [Twilio::HttpMethod?]
    # @optional @param conference_trim [String?] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    # @optional @param early_media [Bool?] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param jitter_buffer_size [String?] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    # @optional @param label [String?] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    # @optional @param machine_detection [String?] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    # @optional @param machine_detection_silence_timeout [Int32?] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    # @optional @param machine_detection_speech_end_threshold [Int32?] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    # @optional @param machine_detection_speech_threshold [Int32?] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    # @optional @param machine_detection_timeout [Int32?] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    # @optional @param max_participants [Int32?] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    # @optional @param muted [Bool?] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    # @optional @param record [Bool?] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    # @optional @param recording_channels [String?] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    # @optional @param recording_status_callback [String?] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    # @optional @param recording_status_callback_event [Array(String)?] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    # @optional @param recording_status_callback_method [Twilio::HttpMethod?]
    # @optional @param recording_track [String?] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    # @optional @param region [String?] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    # @optional @param sip_auth_password [String?] The SIP password for authentication.
    # @optional @param sip_auth_username [String?] The SIP username used for authentication.
    # @optional @param start_conference_on_enter [Bool?] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    # @optional @param status_callback [String?] The URL we should call using the `status_callback_method` to send status information to your application.
    # @optional @param status_callback_event [Array(String)?] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    # @optional @param status_callback_method [Twilio::HttpMethod?]
    # @optional @param time_limit [Int32?] The maximum duration of the call in seconds. Constraints depend on account and configuration.
    # @optional @param timeout [Int32?] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return nil
    def create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_participant(account_sid: account_sid, conference_sid: conference_sid, from: from, to: to, amd_status_callback: amd_status_callback, amd_status_callback_method: amd_status_callback_method, beep: beep, byoc: byoc, call_reason: call_reason, call_sid_to_coach: call_sid_to_coach, caller_id: caller_id, coaching: coaching, conference_record: conference_record, conference_recording_status_callback: conference_recording_status_callback, conference_recording_status_callback_event: conference_recording_status_callback_event, conference_recording_status_callback_method: conference_recording_status_callback_method, conference_status_callback: conference_status_callback, conference_status_callback_event: conference_status_callback_event, conference_status_callback_method: conference_status_callback_method, conference_trim: conference_trim, early_media: early_media, end_conference_on_exit: end_conference_on_exit, jitter_buffer_size: jitter_buffer_size, label: label, machine_detection: machine_detection, machine_detection_silence_timeout: machine_detection_silence_timeout, machine_detection_speech_end_threshold: machine_detection_speech_end_threshold, machine_detection_speech_threshold: machine_detection_speech_threshold, machine_detection_timeout: machine_detection_timeout, max_participants: max_participants, muted: muted, record: record, recording_channels: recording_channels, recording_status_callback: recording_status_callback, recording_status_callback_event: recording_status_callback_event, recording_status_callback_method: recording_status_callback_method, recording_track: recording_track, region: region, sip_auth_password: sip_auth_password, sip_auth_username: sip_auth_username, start_conference_on_enter: start_conference_on_enter, status_callback: status_callback, status_callback_event: status_callback_event, status_callback_method: status_callback_method, time_limit: time_limit, timeout: timeout, wait_method: wait_method, wait_url: wait_url).execute(&block)
    end

    CREATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    CREATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    CREATE_PARTICIPANT_MAX_LENGTH_FOR_BYOC              = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_BYOC              = 34
    CREATE_PARTICIPANT_PATTERN_FOR_BYOC                 = /^BY[0-9a-fA-F]{32}$/
    CREATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH = 34
    CREATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH = 34
    CREATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH    = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      from : String? = nil,
      to : String? = nil,
      amd_status_callback : String? = nil,
      amd_status_callback_method : Twilio::HttpMethod? = nil,
      beep : String? = nil,
      byoc : String? = nil,
      call_reason : String? = nil,
      call_sid_to_coach : String? = nil,
      caller_id : String? = nil,
      coaching : Bool? = nil,
      conference_record : String? = nil,
      conference_recording_status_callback : String? = nil,
      conference_recording_status_callback_event : Array(String)? = nil,
      conference_recording_status_callback_method : Twilio::HttpMethod? = nil,
      conference_status_callback : String? = nil,
      conference_status_callback_event : Array(String)? = nil,
      conference_status_callback_method : Twilio::HttpMethod? = nil,
      conference_trim : String? = nil,
      early_media : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      jitter_buffer_size : String? = nil,
      label : String? = nil,
      machine_detection : String? = nil,
      machine_detection_silence_timeout : Int32? = nil,
      machine_detection_speech_end_threshold : Int32? = nil,
      machine_detection_speech_threshold : Int32? = nil,
      machine_detection_timeout : Int32? = nil,
      max_participants : Int32? = nil,
      muted : Bool? = nil,
      record : Bool? = nil,
      recording_channels : String? = nil,
      recording_status_callback : String? = nil,
      recording_status_callback_event : Array(String)? = nil,
      recording_status_callback_method : Twilio::HttpMethod? = nil,
      recording_track : String? = nil,
      region : String? = nil,
      sip_auth_password : String? = nil,
      sip_auth_username : String? = nil,
      start_conference_on_enter : Bool? = nil,
      status_callback : String? = nil,
      status_callback_event : Array(String)? = nil,
      status_callback_method : Twilio::HttpMethod? = nil,
      time_limit : Int32? = nil,
      timeout : Int32? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.create_participant ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?

        raise ArgumentError.new("\"from\" is required and cannot be null") if from.nil?

        raise ArgumentError.new("\"to\" is required and cannot be null") if to.nil?

        unless (_amd_status_callback_method = amd_status_callback_method).nil?
          _amd_status_callback_method.validate
        end

        unless (_byoc = byoc).nil?
          OpenApi::PrimitiveValidator.validate_max_length("byoc", byoc.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_min_length("byoc", byoc.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_BYOC)
          OpenApi::PrimitiveValidator.validate_pattern("byoc", _byoc, CREATE_PARTICIPANT_PATTERN_FOR_BYOC)
        end

        unless (_call_sid_to_coach = call_sid_to_coach).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid_to_coach", call_sid_to_coach.to_s.size, CREATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid_to_coach", call_sid_to_coach.to_s.size, CREATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid_to_coach", _call_sid_to_coach, CREATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH)
        end

        unless (_conference_recording_status_callback_method = conference_recording_status_callback_method).nil?
          _conference_recording_status_callback_method.validate
        end

        unless (_conference_status_callback_method = conference_status_callback_method).nil?
          _conference_status_callback_method.validate
        end

        unless (_recording_status_callback_method = recording_status_callback_method).nil?
          _recording_status_callback_method.validate
        end

        unless (_status_callback_method = status_callback_method).nil?
          _status_callback_method.validate
        end

        unless (_wait_method = wait_method).nil?
          _wait_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AmdStatusCallback", amd_status_callback.to_s) if !amd_status_callback.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AmdStatusCallbackMethod", amd_status_callback_method.to_s) if !amd_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Beep", beep.to_s) if !beep.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Byoc", byoc.to_s) if !byoc.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallReason", call_reason.to_s) if !call_reason.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallSidToCoach", call_sid_to_coach.to_s) if !call_sid_to_coach.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallerId", caller_id.to_s) if !caller_id.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Coaching", coaching.to_s) if !coaching.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecord", conference_record.to_s) if !conference_record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecordingStatusCallback", conference_recording_status_callback.to_s) if !conference_recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("ConferenceRecordingStatusCallbackEvent", conference_recording_status_callback_event, "multi")) if !conference_recording_status_callback_event.nil? && !conference_recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceRecordingStatusCallbackMethod", conference_recording_status_callback_method.to_s) if !conference_recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceStatusCallback", conference_status_callback.to_s) if !conference_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("ConferenceStatusCallbackEvent", conference_status_callback_event, "multi")) if !conference_status_callback_event.nil? && !conference_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceStatusCallbackMethod", conference_status_callback_method.to_s) if !conference_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("ConferenceTrim", conference_trim.to_s) if !conference_trim.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EarlyMedia", early_media.to_s) if !early_media.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EndConferenceOnExit", end_conference_on_exit.to_s) if !end_conference_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("From", from.to_s) if !from.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("JitterBufferSize", jitter_buffer_size.to_s) if !jitter_buffer_size.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Label", label.to_s) if !label.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetection", machine_detection.to_s) if !machine_detection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSilenceTimeout", machine_detection_silence_timeout.to_s) if !machine_detection_silence_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechEndThreshold", machine_detection_speech_end_threshold.to_s) if !machine_detection_speech_end_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionSpeechThreshold", machine_detection_speech_threshold.to_s) if !machine_detection_speech_threshold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MachineDetectionTimeout", machine_detection_timeout.to_s) if !machine_detection_timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxParticipants", max_participants.to_s) if !max_participants.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Muted", muted.to_s) if !muted.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Record", record.to_s) if !record.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingChannels", recording_channels.to_s) if !recording_channels.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallback", recording_status_callback.to_s) if !recording_status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("RecordingStatusCallbackEvent", recording_status_callback_event, "multi")) if !recording_status_callback_event.nil? && !recording_status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingStatusCallbackMethod", recording_status_callback_method.to_s) if !recording_status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("RecordingTrack", recording_track.to_s) if !recording_track.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Region", region.to_s) if !region.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthPassword", sip_auth_password.to_s) if !sip_auth_password.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("SipAuthUsername", sip_auth_username.to_s) if !sip_auth_username.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StartConferenceOnEnter", start_conference_on_enter.to_s) if !start_conference_on_enter.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallback", status_callback.to_s) if !status_callback.nil?
      form_params.concat(@api_client.build_collection_param_tuples("StatusCallbackEvent", status_callback_event, "multi")) if !status_callback_event.nil? && !status_callback_event.empty?
      form_params << Tuple(String, Crest::ParamsValue).new("StatusCallbackMethod", status_callback_method.to_s) if !status_callback_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("TimeLimit", time_limit.to_s) if !time_limit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Timeout", timeout.to_s) if !timeout.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("To", to.to_s) if !to.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitMethod", wait_method.to_s) if !wait_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitUrl", wait_url.to_s) if !wait_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ConferencesApi.create_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return [Nil]
    def delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Nil
      delete_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid)
      nil
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#delete_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Delete a recording from your account
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    # @return nil
    def delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid).execute(&block)
    end

    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID            = 34
    DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID            = 34
    DELETE_CONFERENCE_RECORDING_PATTERN_FOR_SID               = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.delete_conference_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_CONFERENCE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ConferencesApi.delete_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Nil]
    def delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Nil
      delete_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)
      nil
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#delete_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Kick a participant from a given conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
    # @required @param conference_sid [String?] The SID of the conference with the participants to delete.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return nil
    def delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid).execute(&block)
    end

    DELETE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    DELETE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    DELETE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    DELETE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.delete_participant ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, DELETE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, DELETE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, DELETE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ConferencesApi.delete_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return [Twilio::Conference]
    def fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Conference
      data, _status_code, _headers = fetch_conference_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return [Tuple(Twilio::Conference, Integer, Hash)] Twilio::Conference, response status code and response headers
    def fetch_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Conference, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_conference(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#fetch_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Conference.from_json(body), status_code, headers)
    end

    # Fetch an instance of a conference
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to fetch
    # @return nil
    def fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_conference(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_MAX_LENGTH_FOR_SID         = 34
    FETCH_CONFERENCE_MIN_LENGTH_FOR_SID         = 34
    FETCH_CONFERENCE_PATTERN_FOR_SID            = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.fetch_conference ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CONFERENCE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CONFERENCE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CONFERENCE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.fetch_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return [Twilio::ConferenceConferenceRecording]
    def fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Twilio::ConferenceConferenceRecording
      data, _status_code, _headers = fetch_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid)
      data
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return [Tuple(Twilio::ConferenceConferenceRecording, Integer, Hash)] Twilio::ConferenceConferenceRecording, response status code and response headers
    def fetch_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Tuple(Twilio::ConferenceConferenceRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#fetch_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceConferenceRecording.from_json(body), status_code, headers)
    end

    # Fetch an instance of a recording for a call
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    # @return nil
    def fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid).execute(&block)
    end

    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID            = 34
    FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID            = 34
    FETCH_CONFERENCE_RECORDING_PATTERN_FOR_SID               = /^RE[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.fetch_conference_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_CONFERENCE_RECORDING_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_CONFERENCE_RECORDING_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_CONFERENCE_RECORDING_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.fetch_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Twilio::ConferenceParticipant]
    def fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = fetch_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)
      data
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def fetch_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#fetch_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    # Fetch an instance of a participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
    # @required @param conference_sid [String?] The SID of the conference with the participant to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @return nil
    def fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    FETCH_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    FETCH_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    FETCH_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.fetch_participant ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, FETCH_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, FETCH_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, FETCH_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.fetch_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListConferenceResponse]
    def list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListConferenceResponse
      data, _status_code, _headers = list_conference_with_http_info(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size)
      data
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListConferenceResponse, Integer, Hash)] Twilio::ListConferenceResponse, response status code and response headers
    def list_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListConferenceResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_conference(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#list_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListConferenceResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of conferences belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
    # @optional @param date_updated [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_before [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param date_updated_after [Time?] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
    # @optional @param friendly_name [String?] The string that identifies the Conference resources to read.
    # @optional @param status [Twilio::ConferenceEnumStatus?] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_conference(account_sid: account_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, date_updated: date_updated, date_updated_before: date_updated_before, date_updated_after: date_updated_after, friendly_name: friendly_name, status: status, page_size: page_size).execute(&block)
    end

    LIST_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_CONFERENCE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_conference(
      *,
      account_sid : String? = @account_sid,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      date_updated : Time? = nil,
      date_updated_before : Time? = nil,
      date_updated_after : Time? = nil,
      friendly_name : String? = nil,
      status : Twilio::ConferenceEnumStatus? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.list_conference ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end

        unless (_status = status).nil?
          _status.validate
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CONFERENCE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CONFERENCE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["DateUpdated"] = Time::Format::ISO_8601_DATE.format(date_updated) if !date_updated.nil?
      query_params["DateUpdated<"] = Time::Format::ISO_8601_DATE.format(date_updated_before) if !date_updated_before.nil?
      query_params["DateUpdated>"] = Time::Format::ISO_8601_DATE.format(date_updated_after) if !date_updated_after.nil?
      query_params["FriendlyName"] = friendly_name.to_s if !friendly_name.nil?
      query_params["Status"] = status.to_s if !status.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.list_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListConferenceRecordingResponse]
    def list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListConferenceRecordingResponse
      data, _status_code, _headers = list_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)
      data
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListConferenceRecordingResponse, Integer, Hash)] Twilio::ListConferenceRecordingResponse, response status code and response headers
    def list_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListConferenceRecordingResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_conference_recording(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#list_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListConferenceRecordingResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of recordings belonging to the call used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to read.
    # @optional @param date_created [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_before [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param date_created_after [Time?] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_conference_recording(account_sid: account_sid, conference_sid: conference_sid, date_created: date_created, date_created_before: date_created_before, date_created_after: date_created_after, page_size: page_size).execute(&block)
    end

    LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_CONFERENCE_RECORDING_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_CONFERENCE_RECORDING_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      date_created : Time? = nil,
      date_created_before : Time? = nil,
      date_created_after : Time? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.list_conference_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_CONFERENCE_RECORDING_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_CONFERENCE_RECORDING_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["DateCreated"] = Time::Format::ISO_8601_DATE.format(date_created) if !date_created.nil?
      query_params["DateCreated<"] = Time::Format::ISO_8601_DATE.format(date_created_before) if !date_created_before.nil?
      query_params["DateCreated>"] = Time::Format::ISO_8601_DATE.format(date_created_after) if !date_created_after.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.list_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListParticipantResponse]
    def list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListParticipantResponse
      data, _status_code, _headers = list_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size)
      data
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListParticipantResponse, Integer, Hash)] Twilio::ListParticipantResponse, response status code and response headers
    def list_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListParticipantResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_participant(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#list_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListParticipantResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of participants belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
    # @required @param conference_sid [String?] The SID of the conference with the participants to read.
    # @optional @param muted [Bool?] Whether to return only participants that are muted. Can be: `true` or `false`.
    # @optional @param hold [Bool?] Whether to return only participants that are on hold. Can be: `true` or `false`.
    # @optional @param coaching [Bool?] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_participant(account_sid: account_sid, conference_sid: conference_sid, muted: muted, hold: hold, coaching: coaching, page_size: page_size).execute(&block)
    end

    LIST_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    LIST_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    LIST_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    LIST_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/
    LIST_PARTICIPANT_MAX_FOR_PAGE_SIZE             = Int32.new("1000")
    LIST_PARTICIPANT_MIN_FOR_PAGE_SIZE             = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      muted : Bool? = nil,
      hold : Bool? = nil,
      coaching : Bool? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.list_participant ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, LIST_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, LIST_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, LIST_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_PARTICIPANT_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_PARTICIPANT_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["Muted"] = muted.to_s if !muted.nil?
      query_params["Hold"] = hold.to_s if !hold.nil?
      query_params["Coaching"] = coaching.to_s if !coaching.nil?
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ConferencesApi.list_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return [Twilio::Conference]
    def update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Twilio::Conference
      data, _status_code, _headers = update_conference_with_http_info(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status)
      data
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return [Tuple(Twilio::Conference, Integer, Hash)] Twilio::Conference, response status code and response headers
    def update_conference_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Tuple(Twilio::Conference, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_conference(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#update_conference\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Conference.from_json(body), status_code, headers)
    end

    #
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference resource to update
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param status [Twilio::ConferenceEnumUpdateStatus?]
    # @return nil
    def update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_conference(account_sid: account_sid, sid: sid, announce_method: announce_method, announce_url: announce_url, status: status).execute(&block)
    end

    UPDATE_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_CONFERENCE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_conference(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      status : Twilio::ConferenceEnumUpdateStatus? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.update_conference ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CONFERENCE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?

        unless (_announce_method = announce_method).nil?
          _announce_method.validate
        end

        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceMethod", announce_method.to_s) if !announce_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceUrl", announce_url.to_s) if !announce_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ConferencesApi.update_conference",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Twilio::ConferenceConferenceRecording]
    def update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Twilio::ConferenceConferenceRecording
      data, _status_code, _headers = update_conference_recording_with_http_info(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior)
      data
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return [Tuple(Twilio::ConferenceConferenceRecording, Integer, Hash)] Twilio::ConferenceConferenceRecording, response status code and response headers
    def update_conference_recording_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Tuple(Twilio::ConferenceConferenceRecording, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#update_conference_recording\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceConferenceRecording.from_json(body), status_code, headers)
    end

    # Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    # @required @param conference_sid [String?] The Conference SID that identifies the conference associated with the recording to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    # @required @param status [Twilio::CallRecordingEnumStatus?]
    # @optional @param pause_behavior [String?] Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    # @return nil
    def update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_conference_recording(account_sid: account_sid, conference_sid: conference_sid, sid: sid, status: status, pause_behavior: pause_behavior).execute(&block)
    end

    UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID    = 34
    UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID    = 34
    UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID       = /^AC[0-9a-fA-F]{32}$/
    UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID = 34
    UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID = 34
    UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID    = /^CF[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_conference_recording(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      sid : String? = nil,
      status : Twilio::CallRecordingEnumStatus? = nil,
      pause_behavior : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.update_conference_recording ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, UPDATE_CONFERENCE_RECORDING_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, UPDATE_CONFERENCE_RECORDING_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?

        raise ArgumentError.new("\"status\" is required and cannot be null") if status.nil?
        unless (_status = status).nil?
          _status.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("PauseBehavior", pause_behavior.to_s) if !pause_behavior.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Status", status.to_s) if !status.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ConferencesApi.update_conference_recording",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Twilio::ConferenceParticipant]
    def update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Twilio::ConferenceParticipant
      data, _status_code, _headers = update_participant_with_http_info(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url)
      data
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return [Tuple(Twilio::ConferenceParticipant, Integer, Hash)] Twilio::ConferenceParticipant, response status code and response headers
    def update_participant_with_http_info(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Tuple(Twilio::ConferenceParticipant, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ConferencesApi#update_participant\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ConferenceParticipant.from_json(body), status_code, headers)
    end

    # Update the properties of the participant
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
    # @required @param conference_sid [String?] The SID of the conference with the participant to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
    # @optional @param announce_method [Twilio::HttpMethod?]
    # @optional @param announce_url [String?] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param beep_on_exit [Bool?] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    # @optional @param call_sid_to_coach [String?] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    # @optional @param coaching [Bool?] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    # @optional @param end_conference_on_exit [Bool?] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    # @optional @param hold [Bool?] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    # @optional @param hold_method [Twilio::HttpMethod?]
    # @optional @param hold_url [String?] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    # @optional @param muted [Bool?] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    # @optional @param wait_method [Twilio::HttpMethod?]
    # @optional @param wait_url [String?] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    # @return nil
    def update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_participant(account_sid: account_sid, conference_sid: conference_sid, call_sid: call_sid, announce_method: announce_method, announce_url: announce_url, beep_on_exit: beep_on_exit, call_sid_to_coach: call_sid_to_coach, coaching: coaching, end_conference_on_exit: end_conference_on_exit, hold: hold, hold_method: hold_method, hold_url: hold_url, muted: muted, wait_method: wait_method, wait_url: wait_url).execute(&block)
    end

    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID       = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID       = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID          = /^AC[0-9a-fA-F]{32}$/
    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID    = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID    = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID       = /^CF[0-9a-fA-F]{32}$/
    UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH = 34
    UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH = 34
    UPDATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH    = /^CA[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_participant(
      *,
      account_sid : String? = @account_sid,
      conference_sid : String? = nil,
      call_sid : String? = nil,
      announce_method : Twilio::HttpMethod? = nil,
      announce_url : String? = nil,
      beep_on_exit : Bool? = nil,
      call_sid_to_coach : String? = nil,
      coaching : Bool? = nil,
      end_conference_on_exit : Bool? = nil,
      hold : Bool? = nil,
      hold_method : Twilio::HttpMethod? = nil,
      hold_url : String? = nil,
      muted : Bool? = nil,
      wait_method : Twilio::HttpMethod? = nil,
      wait_url : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ConferencesApi.update_participant ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_PARTICIPANT_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"conference_sid\" is required and cannot be null") if conference_sid.nil?
        unless (_conference_sid = conference_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("conference_sid", conference_sid.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("conference_sid", conference_sid.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CONFERENCE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("conference_sid", _conference_sid, UPDATE_PARTICIPANT_PATTERN_FOR_CONFERENCE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?

        unless (_announce_method = announce_method).nil?
          _announce_method.validate
        end

        unless (_call_sid_to_coach = call_sid_to_coach).nil?
          OpenApi::PrimitiveValidator.validate_max_length("call_sid_to_coach", call_sid_to_coach.to_s.size, UPDATE_PARTICIPANT_MAX_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_min_length("call_sid_to_coach", call_sid_to_coach.to_s.size, UPDATE_PARTICIPANT_MIN_LENGTH_FOR_CALL_SID_TO_COACH)
          OpenApi::PrimitiveValidator.validate_pattern("call_sid_to_coach", _call_sid_to_coach, UPDATE_PARTICIPANT_PATTERN_FOR_CALL_SID_TO_COACH)
        end

        unless (_hold_method = hold_method).nil?
          _hold_method.validate
        end

        unless (_wait_method = wait_method).nil?
          _wait_method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "ConferenceSid" + "}", URI.encode_path(conference_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceMethod", announce_method.to_s) if !announce_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("AnnounceUrl", announce_url.to_s) if !announce_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("BeepOnExit", beep_on_exit.to_s) if !beep_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("CallSidToCoach", call_sid_to_coach.to_s) if !call_sid_to_coach.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Coaching", coaching.to_s) if !coaching.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("EndConferenceOnExit", end_conference_on_exit.to_s) if !end_conference_on_exit.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Hold", hold.to_s) if !hold.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("HoldMethod", hold_method.to_s) if !hold_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("HoldUrl", hold_url.to_s) if !hold_url.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Muted", muted.to_s) if !muted.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitMethod", wait_method.to_s) if !wait_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("WaitUrl", wait_url.to_s) if !wait_url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ConferencesApi.update_participant",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
