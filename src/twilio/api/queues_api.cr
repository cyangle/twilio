#  Twilio - Api
#
# This is the public Twilio REST API.
#
# The version of the OpenAPI document: 1.38.0
# Contact: support@twilio.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/http_method"

require "../models/list_member_response"
require "../models/list_queue_response"
require "../models/queue"
require "../models/queue_member"

module Twilio
  class QueuesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config
    property account_sid : String

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      @account_sid = api_client.config.username.not_nil!
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Twilio::Queue]
    def create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = create_queue_with_http_info(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size)
      data
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def create_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_queue(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#create_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Create a queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    # @required @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return nil
    def create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_queue(account_sid: account_sid, friendly_name: friendly_name, max_size: max_size).execute(&block)
    end

    CREATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    CREATE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_create_queue(
      *,
      account_sid : String? = @account_sid,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.create_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, CREATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, CREATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, CREATE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"friendly_name\" is required and cannot be null") if friendly_name.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxSize", max_size.to_s) if !max_size.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QueuesApi.create_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return [Nil]
    def delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Nil
      delete_queue_with_http_info(account_sid: account_sid, sid: sid)
      nil
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_queue(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#delete_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Remove an empty queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to delete
    # @return nil
    def delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_queue(account_sid: account_sid, sid: sid).execute(&block)
    end

    DELETE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    DELETE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    DELETE_QUEUE_MAX_LENGTH_FOR_SID         = 34
    DELETE_QUEUE_MIN_LENGTH_FOR_SID         = 34
    DELETE_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_delete_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.delete_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, DELETE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, DELETE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, DELETE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, DELETE_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, DELETE_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, DELETE_QUEUE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "QueuesApi.delete_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return [Twilio::QueueMember]
    def fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Twilio::QueueMember
      data, _status_code, _headers = fetch_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid)
      data
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return [Tuple(Twilio::QueueMember, Integer, Hash)] Twilio::QueueMember, response status code and response headers
    def fetch_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Tuple(Twilio::QueueMember, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#fetch_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::QueueMember.from_json(body), status_code, headers)
    end

    # Fetch a specific member from the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to fetch.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
    # @return nil
    def fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid).execute(&block)
    end

    FETCH_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    FETCH_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    FETCH_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.fetch_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, FETCH_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, FETCH_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, FETCH_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QueuesApi.fetch_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return [Twilio::Queue]
    def fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = fetch_queue_with_http_info(account_sid: account_sid, sid: sid)
      data
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def fetch_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fetch_queue(account_sid: account_sid, sid: sid)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#fetch_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Fetch an instance of a queue identified by the QueueSid
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to fetch
    # @return nil
    def fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fetch_queue(account_sid: account_sid, sid: sid).execute(&block)
    end

    FETCH_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    FETCH_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    FETCH_QUEUE_MAX_LENGTH_FOR_SID         = 34
    FETCH_QUEUE_MIN_LENGTH_FOR_SID         = 34
    FETCH_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_fetch_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.fetch_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, FETCH_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, FETCH_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, FETCH_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, FETCH_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, FETCH_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, FETCH_QUEUE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QueuesApi.fetch_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListMemberResponse]
    def list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Twilio::ListMemberResponse
      data, _status_code, _headers = list_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size)
      data
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListMemberResponse, Integer, Hash)] Twilio::ListMemberResponse, response status code and response headers
    def list_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListMemberResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_member(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#list_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListMemberResponse.from_json(body), status_code, headers)
    end

    # Retrieve the members of the queue
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_member(account_sid: account_sid, queue_sid: queue_sid, page_size: page_size).execute(&block)
    end

    LIST_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    LIST_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    LIST_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/
    LIST_MEMBER_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_MEMBER_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.list_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, LIST_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, LIST_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, LIST_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_MEMBER_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_MEMBER_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QueuesApi.list_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Twilio::ListQueueResponse]
    def list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Twilio::ListQueueResponse
      data, _status_code, _headers = list_queue_with_http_info(account_sid: account_sid, page_size: page_size)
      data
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return [Tuple(Twilio::ListQueueResponse, Integer, Hash)] Twilio::ListQueueResponse, response status code and response headers
    def list_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Tuple(Twilio::ListQueueResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list_queue(account_sid: account_sid, page_size: page_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#list_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::ListQueueResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of queues belonging to the account used to make the request
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
    # @optional @param page_size [Int32?] How many resources to return in each list page. The default is 50, and the maximum is 1000.
    # @return nil
    def list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list_queue(account_sid: account_sid, page_size: page_size).execute(&block)
    end

    LIST_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    LIST_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    LIST_QUEUE_MAX_FOR_PAGE_SIZE          = Int32.new("1000")
    LIST_QUEUE_MIN_FOR_PAGE_SIZE          = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list_queue(
      *,
      account_sid : String? = @account_sid,
      page_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.list_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, LIST_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, LIST_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, LIST_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, LIST_QUEUE_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, LIST_QUEUE_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["PageSize"] = page_size.to_s if !page_size.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "QueuesApi.list_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Twilio::QueueMember]
    def update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Twilio::QueueMember
      data, _status_code, _headers = update_member_with_http_info(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method)
      data
    end

    # Dequeue a member from a queue and have the member&#39;s call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return [Tuple(Twilio::QueueMember, Integer, Hash)] Twilio::QueueMember, response status code and response headers
    def update_member_with_http_info(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Tuple(Twilio::QueueMember, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#update_member\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::QueueMember.from_json(body), status_code, headers)
    end

    # Dequeue a member from a queue and have the member&#39;s call begin executing the TwiML document at that URL
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
    # @required @param queue_sid [String?] The SID of the Queue in which to find the members to update.
    # @required @param call_sid [String?] The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
    # @required @param url [String?] The absolute URL of the Queue resource.
    # @optional @param method [Twilio::HttpMethod?]
    # @return nil
    def update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_member(account_sid: account_sid, queue_sid: queue_sid, call_sid: call_sid, url: url, method: method).execute(&block)
    end

    UPDATE_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_MEMBER_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_MEMBER_MAX_LENGTH_FOR_QUEUE_SID   = 34
    UPDATE_MEMBER_MIN_LENGTH_FOR_QUEUE_SID   = 34
    UPDATE_MEMBER_PATTERN_FOR_QUEUE_SID      = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_member(
      *,
      account_sid : String? = @account_sid,
      queue_sid : String? = nil,
      call_sid : String? = nil,
      url : String? = nil,
      method : Twilio::HttpMethod? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.update_member ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_MEMBER_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_MEMBER_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_MEMBER_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"queue_sid\" is required and cannot be null") if queue_sid.nil?
        unless (_queue_sid = queue_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("queue_sid", queue_sid.to_s.size, UPDATE_MEMBER_MAX_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_min_length("queue_sid", queue_sid.to_s.size, UPDATE_MEMBER_MIN_LENGTH_FOR_QUEUE_SID)
          OpenApi::PrimitiveValidator.validate_pattern("queue_sid", _queue_sid, UPDATE_MEMBER_PATTERN_FOR_QUEUE_SID)
        end
        raise ArgumentError.new("\"call_sid\" is required and cannot be null") if call_sid.nil?

        raise ArgumentError.new("\"url\" is required and cannot be null") if url.nil?

        unless (_method = method).nil?
          _method.validate
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "QueueSid" + "}", URI.encode_path(queue_sid.to_s)).sub("{" + "CallSid" + "}", URI.encode_path(call_sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("Method", method.to_s) if !method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("Url", url.to_s) if !url.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QueuesApi.update_member",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Twilio::Queue]
    def update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Twilio::Queue
      data, _status_code, _headers = update_queue_with_http_info(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size)
      data
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return [Tuple(Twilio::Queue, Integer, Hash)] Twilio::Queue, response status code and response headers
    def update_queue_with_http_info(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Tuple(Twilio::Queue, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update_queue(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: QueuesApi#update_queue\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Twilio::Queue.from_json(body), status_code, headers)
    end

    # Update the queue with the new parameters
    # @required @param account_sid [String?] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
    # @required @param sid [String?] The Twilio-provided string that uniquely identifies the Queue resource to update
    # @optional @param friendly_name [String?] A descriptive string that you created to describe this resource. It can be up to 64 characters long.
    # @optional @param max_size [Int32?] The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
    # @return nil
    def update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update_queue(account_sid: account_sid, sid: sid, friendly_name: friendly_name, max_size: max_size).execute(&block)
    end

    UPDATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID = 34
    UPDATE_QUEUE_PATTERN_FOR_ACCOUNT_SID    = /^AC[0-9a-fA-F]{32}$/
    UPDATE_QUEUE_MAX_LENGTH_FOR_SID         = 34
    UPDATE_QUEUE_MIN_LENGTH_FOR_SID         = 34
    UPDATE_QUEUE_PATTERN_FOR_SID            = /^QU[0-9a-fA-F]{32}$/

    # @return Crest::Request
    def build_api_request_for_update_queue(
      *,
      account_sid : String? = @account_sid,
      sid : String? = nil,
      friendly_name : String? = nil,
      max_size : Int32? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: QueuesApi.update_queue ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"account_sid\" is required and cannot be null") if account_sid.nil?
        unless (_account_sid = account_sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("account_sid", account_sid.to_s.size, UPDATE_QUEUE_MAX_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_min_length("account_sid", account_sid.to_s.size, UPDATE_QUEUE_MIN_LENGTH_FOR_ACCOUNT_SID)
          OpenApi::PrimitiveValidator.validate_pattern("account_sid", _account_sid, UPDATE_QUEUE_PATTERN_FOR_ACCOUNT_SID)
        end
        raise ArgumentError.new("\"sid\" is required and cannot be null") if sid.nil?
        unless (_sid = sid).nil?
          OpenApi::PrimitiveValidator.validate_max_length("sid", sid.to_s.size, UPDATE_QUEUE_MAX_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_min_length("sid", sid.to_s.size, UPDATE_QUEUE_MIN_LENGTH_FOR_SID)
          OpenApi::PrimitiveValidator.validate_pattern("sid", _sid, UPDATE_QUEUE_PATTERN_FOR_SID)
        end
      end

      # resource path
      local_var_path = "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json".sub("{" + "AccountSid" + "}", URI.encode_path(account_sid.to_s)).sub("{" + "Sid" + "}", URI.encode_path(sid.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("FriendlyName", friendly_name.to_s) if !friendly_name.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("MaxSize", max_size.to_s) if !max_size.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["accountSid_authToken"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "QueuesApi.update_queue",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
